{"version":3,"sources":["webpack:///./Scripts/Actions/Checkout.action.js","webpack:///./Scripts/Components/Button.js","webpack:///./Scripts/Components/Cart.js","webpack:///./Scripts/Components/Checkout.Cart.js","webpack:///./Scripts/Components/InputField.js","webpack:///./Scripts/Components/InfoField.js","webpack:///./Scripts/Components/Checkout.BusinessCustomerInfo.js","webpack:///./Scripts/Components/Checkout.PrivateCustomerInfo.js","webpack:///./Scripts/Components/Checkout.ValidationSchema.js","webpack:///./Scripts/Components/Checkout.CustomerInfo.js","webpack:///./Scripts/Components/Checkout.DeliveryMethods.js","webpack:///./Scripts/Components/Checkout.DiscountCodes.js","webpack:///./Scripts/Components/Checkout.OrderInfo.js","webpack:///./Scripts/Components/Checkout.OrderNote.js","webpack:///./Scripts/Components/Checkout.PaymentMethods.js","webpack:///./Scripts/Components/Payments/PaymentWidget.js","webpack:///./Scripts/Components/Checkout.js","webpack:///../node_modules/core-js/modules/es.promise.finally.js"],"names":["setBusinessCustomer","isBusinessCustomer","type","CHECKOUT_SET_PRIVATE_CUSTOMER","payload","updateCustomerDetails","key","data","CHECKOUT_UPDATE_CUSTOMER_INFO","setDelivery","method","dispatch","getState","CHECKOUT_SET_DELIVERY","selectedDeliveryMethod","checkout","put","then","response","json","result","loadCart","paymentWidget","setPaymentWidget","catch","ex","catchError","error","submitError","setCountry","systemId","CHECKOUT_SET_COUNTRY","selectedCountry","deliveryMethods","CHECKOUT_SET_PAYMENT","paymentMethods","selectedPaymentMethod","setPayment","modelState","payment","reloadPayment","CHECKOUT_SET_PAYMENT_WIDGET","setDiscountCode","discountCode","CHECKOUT_SET_DISCOUNT_CODE","setUsedDiscountCodes","usedDiscountCodes","CHECKOUT_SET_USED_DISCOUNT_CODE","_submit","url","model","post","submitDone","setStatusSubmitButton","CHECKOUT_SUBMIT","CHECKOUT_SUBMIT_ERROR","value","CHECKOUT_SET_STATUS_SUBMIT_BUTTON","enableConfirmButton","setValidateStatus","isValidating","CHECKOUT_VALIDATE_ADDRESS","onClick","title","disabled","fluid","rounded","isLink","getClassNames","useCallback","classes","push","join","className","mapCartToAbort","quantityDispatch","debounce","articleNumber","quantity","AbortController","update","loadError","useDispatch","useState","removingRow","setRemovingRow","cart","useSelector","state","orderRows","setOrderRows","discountRows","useEffect","removeOrderRow","handleQuantityInput","rowSystemId","ensureCorrectness","floatQuantity","parseFloat","validValue","isNaN","index","findIndex","item","oldQuantity","abort","cancel","tempOrderRows","ProductImage","order","src","image","alt","name","ProductName","Fragment","href","brand","ProductPrice","isFreeGift","campaignPrice","price","ProductQuantity","min","maxLength","toString","onChange","event","target","onBlur","ProductTotalPrice","totalCampaignPrice","totalPrice","RemoveBtn","translate","CartTotal","orderTotal","map","errors","cssClass","id","autoComplete","placeholder","label","htmlFor","data-error-for","values","idx","getCountry","address","addressCountry","constants","country","text","onSave","onCompanyAddressChange","valueForm","isEditingAddress","companyAddresses","companyName","authenticated","input","stateKey","toLowerCase","selectedAddress","useMemo","selectedCompanyAddressId","find","zipCode","city","signUpCheckboxVisibility","signUp","customerDetails","alternativeAddress","checked","showAlternativeAddress","CHECKOUT_SET_SHOW_ALTERNATIVE_ADDRESS","CHECKOUT_SET_SIGN_UP","setSignUp","privateCustomerAdditionalDetailsSchema","object","shape","acceptTermsOfCondition","boolean","required","oneOf","privateCustomerAddressSchema","email","string","phoneNumber","mixed","notOneOf","lastName","firstName","privateCustomerAlternativeAddressSchema","businessCustomerDetailsSchema","businessCustomerAdditionalDetailsSchema","validateAlternativeAddress","validateCustomerInfo","validate","addressPath","addressFormValue","setAddressFormValue","setIsEditingAddress","loginUrl","checkoutMode","onCustomerInfoChange","previousState","companyAddressId","onEditForm","onUpdateCustomerDetails","notCustomerDetailFields","CLEAR_ERROR","updatedData","CHECKOUT_SET_SELECTED_COMPANY_ADDRESS","setSelectedCompanyAddress","companyAddress","c","path","indexOf","finally","privateCustomerInfoComponent","businessCustomerInfoComponent","length","formattedPrice","discountCodeEl","useRef","current","ref","remove","deleteDiscountCode","discount","deliveryCost","paymentCost","grandTotal","vat","orderNote","CHECKOUT_SET_ORDER_NOTE","setOrderNote","scriptPattern","scriptFilePattern","extractScripts","domString","matches","html","scripts","scriptFiles","exec","replace","trim","executeScript","domId","scriptContent","script","document","createElement","appendChild","createTextNode","e","getElementById","includeScript","srciptUrl","React","paymentSession","WidgetCheckout","args","responseString","DynamicComponent","loader","shippingOptionVisibility","setShippingOptionVisibility","paymentOptionVisibility","setPaymentOptionVisibility","customerDetailsVisibility","setCustomerDetailsVisibility","setDeliveryWidgetVisibility","paymentWidgetVisibility","setPaymentWidgetVisibility","orderSummaryVisibility","setOrderSummaryVisibility","setSignUpCheckboxVisibility","onSubmit","onSubmitError","placeOrder","onError","resetVisibilityValues","checkIntegrationTypeExist","integrationTypeCheck","integrationType","firstRender","PaymentIntegrationType","ShippingIntegrationType","redirectUrl","window","location","errorKeys","Object","keys","errorNode","querySelector","inputNode","parentElement","setTimeout","focus","scrollIntoView","behavior","updateKey","_force_update","CHECKOUT_ACCEPT_TERMS_OF_CONDITION","termsUrl","rel","$","IS_PURE","NativePromise","fails","getBuiltIn","speciesConstructor","promiseResolve","redefine","proto","real","forced","prototype","call","onFinally","C","this","isFunction","x"],"mappings":"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","file":"644.af3622761d7b80cdbbd8.js","sourcesContent":["import { post, put, remove } from '../Services/http';\r\nimport { load as loadCart } from './Cart.action';\r\nimport { catchError } from './Error.action';\r\n\r\nimport {\r\n    CHECKOUT_SET_SELECTED_COMPANY_ADDRESS,\r\n    CHECKOUT_SET_PRIVATE_CUSTOMER,\r\n    CHECKOUT_SET_SIGN_UP,\r\n    CHECKOUT_SET_DELIVERY,\r\n    CHECKOUT_SET_COUNTRY,\r\n    CHECKOUT_SET_PAYMENT,\r\n    CHECKOUT_SET_DISCOUNT_CODE,\r\n    CHECKOUT_SET_ORDER_NOTE,\r\n    CHECKOUT_ACCEPT_TERMS_OF_CONDITION,\r\n    CHECKOUT_SUBMIT,\r\n    CHECKOUT_SUBMIT_ERROR,\r\n    CHECKOUT_SET_PAYMENT_WIDGET,\r\n    CHECKOUT_SET_USED_DISCOUNT_CODE,\r\n    CHECKOUT_UPDATE_CUSTOMER_INFO,\r\n    CHECKOUT_SET_SHOW_ALTERNATIVE_ADDRESS,\r\n    CLEAR_ERROR,\r\n    CHECKOUT_SET_STATUS_SUBMIT_BUTTON,\r\n    CHECKOUT_VALIDATE_ADDRESS,\r\n} from '../constants';\r\n\r\nexport const setBusinessCustomer = (isBusinessCustomer) => ({\r\n    type: CHECKOUT_SET_PRIVATE_CUSTOMER,\r\n    payload: {\r\n        isBusinessCustomer,\r\n    },\r\n});\r\n\r\nexport const setSignUp = (signUp) => ({\r\n    type: CHECKOUT_SET_SIGN_UP,\r\n    payload: {\r\n        signUp,\r\n    },\r\n});\r\n\r\nexport const updateCustomerDetails = (key, data) => ({\r\n    type: CHECKOUT_UPDATE_CUSTOMER_INFO,\r\n    payload: {\r\n        key,\r\n        data,\r\n    },\r\n});\r\n\r\nexport const setSelectedCompanyAddress = (selectedCompanyAddressId) => ({\r\n    type: CHECKOUT_SET_SELECTED_COMPANY_ADDRESS,\r\n    payload: {\r\n        selectedCompanyAddressId,\r\n    },\r\n});\r\n\r\nexport const setDelivery = (method) => (dispatch, getState) => {\r\n    dispatch({\r\n        type: CHECKOUT_SET_DELIVERY,\r\n        payload: {\r\n            selectedDeliveryMethod: method,\r\n        },\r\n    });\r\n    const { payload } = getState().checkout;\r\n    return put('/api/checkout/setDeliveryProvider', payload)\r\n        .then((response) => response.json())\r\n        .then((result) => {\r\n            dispatch(loadCart());\r\n            if (result !== null && result.paymentWidget) {\r\n                dispatch(setPaymentWidget(result.paymentWidget));\r\n            }\r\n        })\r\n        .catch((ex) => dispatch(catchError(ex, (error) => submitError(error))));\r\n};\r\n\r\nexport const setCountry = (systemId) => (dispatch, getState) => {\r\n    dispatch({\r\n        type: CHECKOUT_SET_COUNTRY,\r\n        payload: {\r\n            selectedCountry: systemId,\r\n        },\r\n    });\r\n    const { payload } = getState().checkout;\r\n\r\n    // reset paymentWidget to null to avoid sending unnecessary request to payment provider\r\n    dispatch(setPaymentWidget(null));\r\n\r\n    return put('/api/checkout/setCountry', payload)\r\n        .then((response) => response.json())\r\n        .then((result) => {\r\n            dispatch(loadCart());\r\n            dispatch(setPaymentWidget(result.paymentWidget));\r\n            dispatch({\r\n                type: CHECKOUT_SET_DELIVERY,\r\n                payload: {\r\n                    deliveryMethods: result.deliveryMethods,\r\n                    selectedDeliveryMethod: result.selectedDeliveryMethod,\r\n                },\r\n            });\r\n            dispatch({\r\n                type: CHECKOUT_SET_PAYMENT,\r\n                payload: {\r\n                    paymentMethods: result.paymentMethods,\r\n                    selectedPaymentMethod: result.selectedPaymentMethod,\r\n                },\r\n            });\r\n        })\r\n        .catch((ex) => dispatch(catchError(ex, (error) => submitError(error))));\r\n};\r\n\r\nexport const setPayment = (method) => (dispatch, getState) => {\r\n    dispatch({\r\n        type: CHECKOUT_SET_PAYMENT,\r\n        payload: {\r\n            selectedPaymentMethod: method,\r\n        },\r\n    });\r\n\r\n    const { payload } = getState().checkout;\r\n    // reset paymentWidget to null to avoid sending unnecessary request to payment provider\r\n    dispatch(setPaymentWidget(null));\r\n    // reset payment error on the checkout\r\n    dispatch(\r\n        submitError({\r\n            modelState: {\r\n                payment: [],\r\n            },\r\n        })\r\n    );\r\n\r\n    return put('/api/checkout/setPaymentProvider', payload)\r\n        .then((response) => response.json())\r\n        .then((result) => {\r\n            dispatch(loadCart());\r\n            dispatch(setPaymentWidget(result.paymentWidget));\r\n        })\r\n        .catch((ex) => dispatch(catchError(ex, (error) => submitError(error))));\r\n};\r\n\r\nexport const reloadPayment = () => (dispatch, getState) => {\r\n    const { payload } = getState().checkout;\r\n    return put('/api/checkout/reloadPaymentWidget', payload)\r\n        .then((response) => response.json())\r\n        .then((result) => {\r\n            if (result && result.paymentWidget) {\r\n                dispatch(setPaymentWidget(result.paymentWidget));\r\n            }\r\n        })\r\n        .catch((ex) => dispatch(catchError(ex, (error) => submitError(error))));\r\n};\r\n\r\nconst setPaymentWidget = (paymentWidget) => ({\r\n    type: CHECKOUT_SET_PAYMENT_WIDGET,\r\n    payload: {\r\n        paymentWidget,\r\n    },\r\n});\r\n\r\nexport const setOrderNote = (orderNote) => ({\r\n    type: CHECKOUT_SET_ORDER_NOTE,\r\n    payload: {\r\n        orderNote,\r\n    },\r\n});\r\n\r\nexport const acceptTermsOfCondition = (acceptTermsOfCondition) => ({\r\n    type: CHECKOUT_ACCEPT_TERMS_OF_CONDITION,\r\n    payload: {\r\n        acceptTermsOfCondition,\r\n    },\r\n});\r\n\r\nexport const setDiscountCode = (discountCode) => ({\r\n    type: CHECKOUT_SET_DISCOUNT_CODE,\r\n    payload: {\r\n        discountCode,\r\n    },\r\n});\r\n\r\nexport const submitDiscountCode = () => (dispatch, getState) => {\r\n    const { payload } = getState().checkout;\r\n    return put('/api/checkout/setDiscountCode', payload)\r\n        .then((response) => response.json())\r\n        .then((result) => {\r\n            dispatch(setUsedDiscountCodes(result.usedDiscountCodes));\r\n            dispatch(loadCart());\r\n            dispatch(setPaymentWidget(result.paymentWidget));\r\n            // reset error of campaign code\r\n            dispatch(\r\n                submitError({\r\n                    modelState: {\r\n                        discountCode: [],\r\n                    },\r\n                })\r\n            );\r\n        })\r\n        .catch((ex) => {\r\n            dispatch(catchError(ex, (error) => submitError(error)));\r\n            // restore the initial cart\r\n            dispatch(loadCart());\r\n        });\r\n};\r\n\r\nexport const deleteDiscountCode = (discountCode) => (dispatch, getState) => {\r\n    const { payload } = getState().checkout;\r\n    payload.discountCode = discountCode;\r\n    return remove('/api/checkout/deleteDiscountCode', payload)\r\n        .then((response) => response.json())\r\n        .then((result) => {\r\n            dispatch(setUsedDiscountCodes(result.usedDiscountCodes));\r\n            dispatch(loadCart());\r\n            dispatch(setPaymentWidget(result.paymentWidget));\r\n            dispatch(setDiscountCode(''));\r\n            // reset error of campaign code\r\n            dispatch(\r\n                submitError({\r\n                    modelState: {\r\n                        discountCode: [],\r\n                    },\r\n                })\r\n            );\r\n        })\r\n        .catch((ex) => {\r\n            dispatch(catchError(ex, (error) => submitError(error)));\r\n            // restore the initial cart\r\n            dispatch(loadCart());\r\n        });\r\n};\r\n\r\nconst setUsedDiscountCodes = (usedDiscountCodes) => ({\r\n    type: CHECKOUT_SET_USED_DISCOUNT_CODE,\r\n    payload: {\r\n        usedDiscountCodes,\r\n    },\r\n});\r\n\r\nexport const submit = () => (dispatch, getState) => {\r\n    const { payload } = getState().checkout;\r\n    return _submit('/api/checkout', payload, dispatch);\r\n};\r\n\r\nconst _submit = (url, model, dispatch) => {\r\n    return post(url, model)\r\n        .then((response) => response.json())\r\n        .then((result) => {\r\n            dispatch(submitDone(result));\r\n        })\r\n        .catch((ex) => {\r\n            if (ex.response) {\r\n                ex.response.json().then((error) => {\r\n                    dispatch(submitError(error));\r\n                    dispatch(submitDone(null));\r\n                    // reload the cart, it might be changed after validation\r\n                    dispatch(loadCart());\r\n                });\r\n            } else {\r\n                dispatch(submitError(ex));\r\n            }\r\n            dispatch(setStatusSubmitButton(true));\r\n        });\r\n};\r\n\r\nexport const saveCustomerDetail = (data) => (dispatch, getState) => {\r\n    const { payload } = getState().checkout;\r\n    const updatedData = { ...payload, ...data };\r\n    return put('api/checkout/setCustomerDetail', updatedData)\r\n        .then((response) => response.json())\r\n        .then(() => dispatch(setStatusSubmitButton(true)))\r\n        .catch((ex) => {\r\n            if (ex.response) {\r\n                ex.response.json().then((error) => {\r\n                    dispatch(submitError(error));\r\n                    dispatch(setStatusSubmitButton(false));\r\n                });\r\n            } else {\r\n                dispatch(submitError(ex));\r\n            }\r\n            throw ex;\r\n        });\r\n};\r\n\r\nexport const clearError = () => ({\r\n    type: CLEAR_ERROR,\r\n    payload: {\r\n        errors: [],\r\n    },\r\n});\r\n\r\nexport const submitDone = (result) => ({\r\n    type: CHECKOUT_SUBMIT,\r\n    payload: {\r\n        result,\r\n    },\r\n});\r\n\r\nexport const submitError = (error) => ({\r\n    type: CHECKOUT_SUBMIT_ERROR,\r\n    payload: {\r\n        error,\r\n    },\r\n});\r\n\r\nexport const setStatusSubmitButton = (value) => ({\r\n    type: CHECKOUT_SET_STATUS_SUBMIT_BUTTON,\r\n    payload: {\r\n        enableConfirmButton: value,\r\n    },\r\n});\r\n\r\nexport const setShowAlternativeAddress = (showAlternativeAddress) => ({\r\n    type: CHECKOUT_SET_SHOW_ALTERNATIVE_ADDRESS,\r\n    payload: {\r\n        showAlternativeAddress,\r\n    },\r\n});\r\nexport const setValidateStatus = (isValidating) => ({\r\n    type: CHECKOUT_VALIDATE_ADDRESS,\r\n    payload: {\r\n        isValidating,\r\n    },\r\n});\r\n","import React from 'react';\r\nimport { useCallback } from 'react';\r\nconst Button = ({\r\n    onClick,\r\n    title,\r\n    disabled = false,\r\n    type = 'button',\r\n    fluid = false,\r\n    rounded = false,\r\n    isLink = false,\r\n}) => {\r\n    const getClassNames = useCallback(() => {\r\n        const classes = ['button'];\r\n        if (fluid) classes.push('expanded');\r\n        if (rounded) classes.push('rounded');\r\n        if (isLink) classes.push('link');\r\n        return classes.join(' ');\r\n    }, [fluid, rounded, isLink]);\r\n    return (\r\n        <button\r\n            className={getClassNames()}\r\n            onClick={onClick}\r\n            disabled={disabled}\r\n            type={type}\r\n        >\r\n            {title}\r\n        </button>\r\n    );\r\n};\r\nexport default Button;\r\n","import React, { useState, Fragment, useCallback, useEffect } from 'react';\r\nimport { translate } from '../Services/translation';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { reloadPayment } from '../Actions/Checkout.action';\r\nimport { update, loadError } from '../Actions/Cart.action';\r\nimport { debounce } from 'lodash-es';\r\nimport { catchError } from '../Actions/Error.action';\r\n\r\nconst mapCartToAbort = {};\r\n\r\nconst quantityDispatch = debounce((articleNumber, quantity, dispatch) => {\r\n    mapCartToAbort[articleNumber] = new AbortController();\r\n    dispatch(update(articleNumber, quantity, mapCartToAbort[articleNumber]))\r\n        .then(() => dispatch(reloadPayment()))\r\n        .catch((ex) => dispatch(catchError(ex, (error) => loadError(error))));\r\n}, 500);\r\n\r\nconst Cart = () => {\r\n    const dispatch = useDispatch();\r\n    const [removingRow, setRemovingRow] = useState({});\r\n    const cart = useSelector((state) => state.cart);\r\n    const [orderRows, setOrderRows] = useState(cart?.orderRows);\r\n    const { discountRows } = cart;\r\n\r\n    useEffect(() => {\r\n        setOrderRows(cart?.orderRows);\r\n    }, [cart]);\r\n\r\n    const removeOrderRow = useCallback(\r\n        (articleNumber) =>\r\n            dispatch(update(articleNumber, 0)).then(() =>\r\n                dispatch(reloadPayment())\r\n            ),\r\n        [dispatch]\r\n    );\r\n\r\n    const handleQuantityInput = useCallback(\r\n        (articleNumber, quantity, rowSystemId, ensureCorrectness = true) => {\r\n            // In case of onBlur event, we need ensureCorrectness as true in order to ensure if the value is a valid float number\r\n            // In case of onChange event, we accept invalid float number, but we don't send any request to the server.\r\n            let floatQuantity = parseFloat(quantity);\r\n            let validValue = !isNaN(floatQuantity) && floatQuantity > 0;\r\n            if (ensureCorrectness) {\r\n                quantity = validValue ? floatQuantity : 1;\r\n                floatQuantity = quantity;\r\n                validValue = true;\r\n            }\r\n            const index = orderRows.findIndex(\r\n                (item) => item.rowSystemId === rowSystemId\r\n            );\r\n            const oldQuantity = parseFloat(orderRows[index].quantity);\r\n            if (floatQuantity !== oldQuantity) {\r\n                mapCartToAbort[articleNumber] &&\r\n                    mapCartToAbort[articleNumber].abort();\r\n                quantityDispatch && quantityDispatch.cancel();\r\n                validValue &&\r\n                    quantityDispatch(articleNumber, quantity, dispatch);\r\n            }\r\n            const tempOrderRows = [...orderRows];\r\n            tempOrderRows[index] = {\r\n                ...tempOrderRows[index],\r\n                quantity,\r\n            };\r\n            setOrderRows(tempOrderRows);\r\n        },\r\n        [dispatch, orderRows]\r\n    );\r\n\r\n    const ProductImage = useCallback(({ order }) => {\r\n        return (\r\n            <img\r\n                className=\"checkout-cart__image\"\r\n                src={order.image}\r\n                alt={order.name}\r\n            />\r\n        );\r\n    }, []);\r\n\r\n    const ProductName = useCallback(({ order }) => {\r\n        return (\r\n            <Fragment>\r\n                <a href={order.url}>{order.name}</a>\r\n                <span className=\"checkout-cart__brand-name\">{order.brand}</span>\r\n            </Fragment>\r\n        );\r\n    }, []);\r\n\r\n    const ProductPrice = useCallback(({ order }) => {\r\n        return (\r\n            <Fragment>\r\n                {order.isFreeGift ? order.campaignPrice : order.price}\r\n            </Fragment>\r\n        );\r\n    }, []);\r\n\r\n    const ProductQuantity = useCallback(\r\n        (order) => {\r\n            return (\r\n                <Fragment>\r\n                    {order.isFreeGift ? (\r\n                        <div>{order.quantity}</div>\r\n                    ) : (\r\n                        <input\r\n                            className=\"checkout-cart__input\"\r\n                            type=\"number\"\r\n                            min=\"1\"\r\n                            maxLength={3}\r\n                            value={order.quantity.toString()}\r\n                            onChange={(event) =>\r\n                                handleQuantityInput(\r\n                                    order.articleNumber,\r\n                                    event.target.value,\r\n                                    order.rowSystemId,\r\n                                    false\r\n                                )\r\n                            }\r\n                            onBlur={(event) =>\r\n                                handleQuantityInput(\r\n                                    order.articleNumber,\r\n                                    event.target.value,\r\n                                    order.rowSystemId\r\n                                )\r\n                            }\r\n                        />\r\n                    )}\r\n                </Fragment>\r\n            );\r\n        },\r\n        [handleQuantityInput]\r\n    );\r\n\r\n    const ProductTotalPrice = ({ order }) => {\r\n        return (\r\n            <Fragment>\r\n                {order.isFreeGift ? order.totalCampaignPrice : order.totalPrice}\r\n            </Fragment>\r\n        );\r\n    };\r\n\r\n    const RemoveBtn = useCallback(\r\n        ({ order }) => {\r\n            return (\r\n                <Fragment>\r\n                    {!order.isFreeGift && !removingRow[order.rowSystemId] && (\r\n                        <a\r\n                            className=\"table__icon table__icon--delete\"\r\n                            onClick={() =>\r\n                                setRemovingRow({\r\n                                    ...removingRow,\r\n                                    [order.rowSystemId]: true,\r\n                                })\r\n                            }\r\n                            title={translate('general.remove')}\r\n                        ></a>\r\n                    )}\r\n                    {!order.isFreeGift && removingRow[order.rowSystemId] && (\r\n                        <Fragment>\r\n                            <a\r\n                                className=\"table__icon table__icon--accept\"\r\n                                onClick={() =>\r\n                                    removeOrderRow(order.articleNumber)\r\n                                }\r\n                                title={translate('general.ok')}\r\n                            ></a>\r\n                            <a\r\n                                className=\"table__icon table__icon--cancel\"\r\n                                onClick={() =>\r\n                                    setRemovingRow({\r\n                                        ...removingRow,\r\n                                        [order.rowSystemId]: false,\r\n                                    })\r\n                                }\r\n                                title={translate('general.cancel')}\r\n                            ></a>\r\n                        </Fragment>\r\n                    )}\r\n                </Fragment>\r\n            );\r\n        },\r\n        [removeOrderRow, removingRow]\r\n    );\r\n\r\n    const CartTotal = useCallback(({ cart }) => {\r\n        return (\r\n            <h3 className=\"text--right\">\r\n                {translate('checkout.cart.total')}: {cart.orderTotal}\r\n            </h3>\r\n        );\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"row checkout__container\">\r\n            <div className=\"small-12 simple-table hide-for-small-only\">\r\n                <div className=\"row small-unstack no-margin\">\r\n                    <div className=\"columns small-12 medium-4 large-5\"></div>\r\n                    <div className=\"columns small-3 medium-2 large-2\">\r\n                        {translate('checkout.cart.header.price')}\r\n                    </div>\r\n                    <div className=\"columns small-4 medium-2 large-2\">\r\n                        {translate('checkout.cart.header.quantity')}\r\n                    </div>\r\n                    <div className=\"columns small-5 medium-3 large-3\">\r\n                        {translate('checkout.cart.header.total')}\r\n                    </div>\r\n                </div>\r\n                {orderRows.map((order) => (\r\n                    <div\r\n                        className=\"row small-unstack no-margin checkout-cart__row\"\r\n                        key={order.rowSystemId}\r\n                    >\r\n                        <div className=\"columns small-12 medium-4 large-5 checkout-cart__image-container\">\r\n                            <div className=\"checkout-cart__image-wrapper\">\r\n                                <ProductImage order={order} />\r\n                            </div>\r\n                            <div className=\"checkout-cart__image-info\">\r\n                                <ProductName order={order} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"columns small-3 medium-2 large-2 simple-table__cell--no-break-word\">\r\n                            <ProductPrice order={order} />\r\n                        </div>\r\n                        <div className=\"columns small-2 medium-2 large-2\">\r\n                            {ProductQuantity(order)}\r\n                        </div>\r\n                        <div className=\"checkout-cart__total-price columns small-2 medium-3 large-2 simple-table__cell--no-break-word\">\r\n                            <ProductTotalPrice order={order} />\r\n                        </div>\r\n                        <div className=\"columns small-3 medium-1 large-1\">\r\n                            <RemoveBtn order={order} />\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n                {discountRows.map((order) => (\r\n                    <div\r\n                        className=\"row small-unstack no-margin checkout-cart__row\"\r\n                        key={order.rowSystemId}\r\n                    >\r\n                        <div className=\"columns small-12 medium-4 large-5 checkout-cart__image-container\">\r\n                            <div className=\"checkout-cart__discount-info checkout-cart__discount-row\">\r\n                                <ProductName order={order} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"columns small-3 medium-2 large-2 simple-table__cell--no-break-word\"></div>\r\n                        <div className=\"columns small-2 medium-2 large-2\"></div>\r\n                        <div className=\"checkout-cart__discount-price columns small-2 medium-3 large-2 simple-table__cell--no-break-word\">\r\n                            <ProductTotalPrice order={order} />\r\n                        </div>\r\n                        <div className=\"columns small-3 medium-1 large-1\"></div>\r\n                    </div>\r\n                ))}\r\n                <div className=\"row small-unstack no-margin checkout-cart__row\">\r\n                    <div className=\"columns\">\r\n                        <CartTotal cart={cart} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"small-12 simple-table checkout-mobile show-for-small-only\">\r\n                {orderRows.map((order) => (\r\n                    <div className=\"row no-margin\" key={order.rowSystemId}>\r\n                        <div className=\"columns small-3\">\r\n                            <ProductImage order={order} />\r\n                        </div>\r\n                        <div className=\"columns small-9\">\r\n                            <div className=\"row\">\r\n                                <div className=\"small-8 columns\">\r\n                                    <div className=\"flex-container flex-dir-column align-center\">\r\n                                        <ProductName order={order} />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"small-4 columns flex-container align-right\">\r\n                                    <RemoveBtn order={order} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"small-12 columns flex-container align-justify\">\r\n                                    <div>\r\n                                        <ProductPrice order={order} />\r\n                                    </div>\r\n                                    <div>{ProductQuantity(order)}</div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"checkout-cart__total-price small-12 columns text--right\">\r\n                                    <ProductTotalPrice order={order} />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n                {discountRows.map((order) => (\r\n                    <div className=\"row no-margin\" key={order.rowSystemId}>\r\n                        <div className=\"columns\">\r\n                            <div className=\"checkout-cart__discount-row\">\r\n                                <ProductName order={order} />\r\n                            </div>\r\n                            <div className=\"checkout-cart__discount-price text--right\">\r\n                                <ProductTotalPrice order={order} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n                <div className=\"row no-margin\">\r\n                    <div className=\"columns\">\r\n                        <CartTotal cart={cart} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cart;\r\n","import React, { Fragment } from 'react';\r\nimport Cart from './Cart';\r\nimport { translate } from '../Services/translation';\r\n\r\nconst CheckoutCart = ({ errors }) => {\r\n    return (\r\n        <Fragment>\r\n            <div className=\"row\">\r\n                <div className=\"small-12\">\r\n                    <h2 className=\"checkout__title\">\r\n                        {translate('checkout.title')}\r\n                    </h2>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <h3 className=\"checkout__section-title\">\r\n                    {translate('checkout.cart.title')}\r\n                </h3>\r\n            </div>\r\n            <div className=\"row\">\r\n                {errors && errors['cart'] && (\r\n                    <p className=\"checkout__validator--error\">\r\n                        {errors['cart'][0]}\r\n                    </p>\r\n                )}\r\n            </div>\r\n            <Cart />\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default CheckoutCart;\r\n","import React from 'react';\r\n\r\nconst InputField = ({\r\n    cssClass,\r\n    name,\r\n    id,\r\n    autoComplete = null,\r\n    placeholder = null,\r\n    type = 'text',\r\n    maxLength = 200,\r\n    disabled,\r\n    onChange,\r\n    value,\r\n    label,\r\n    errors,\r\n}) => {\r\n    return (\r\n        <div className={cssClass}>\r\n            <label className=\"form__label\" htmlFor={id}>\r\n                {label}\r\n            </label>\r\n            <input\r\n                className=\"form__input\"\r\n                disabled={disabled}\r\n                id={id}\r\n                name={name}\r\n                type={type}\r\n                value={value}\r\n                placeholder={placeholder}\r\n                autoComplete={autoComplete}\r\n                onChange={(event) => onChange(event.target.value)}\r\n                maxLength={maxLength}\r\n            />\r\n            {errors[id] && (\r\n                <span\r\n                    className=\"form__validator--error form__validator--top-narrow\"\r\n                    data-error-for={id}\r\n                >\r\n                    {errors[id][0]}\r\n                </span>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InputField;\r\n","import React from 'react';\r\n\r\nfunction InfoField({ values }) {\r\n    return (\r\n        <div className=\"small-12 medium-12 columns\">\r\n            {values.map((item, idx) => (\r\n                <>\r\n                    <span key={idx}>{item}</span>&nbsp;\r\n                </>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InfoField;\r\n","import React, { Fragment, useMemo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport constants from '../constants';\r\nimport { translate } from '../Services/translation';\r\nimport InputField from './InputField';\r\nimport InfoField from './InfoField';\r\nimport Button from './Button';\r\n\r\nconst getCountry = (address) => {\r\n    const addressCountry = constants.countries\r\n        ? constants.countries.find(\r\n              (country) => country.value === address.country\r\n          )\r\n        : null;\r\n    return addressCountry ? addressCountry.text : address.country;\r\n};\r\n\r\nconst CheckoutBusinessCustomerInfo = ({\r\n    onChange,\r\n    onSave,\r\n    onCompanyAddressChange,\r\n    valueForm,\r\n    isEditingAddress,\r\n}) => {\r\n    const { payload, errors = {} } = useSelector((state) => state.checkout);\r\n    const { companyAddresses = [], companyName, authenticated } = payload;\r\n\r\n    const input = (\r\n        cssClass,\r\n        stateKey,\r\n        id,\r\n        autoComplete = 'on',\r\n        type = 'text'\r\n    ) => (\r\n        <InputField\r\n            cssClass={cssClass}\r\n            id={`${stateKey}-${id}`}\r\n            name={`${stateKey}-${id}`}\r\n            autoComplete={autoComplete}\r\n            disabled={!authenticated}\r\n            value={(valueForm[stateKey] || {})[id] || ''}\r\n            onChange={(value) => onChange(stateKey, id, value)}\r\n            label={translate(`checkout.customerinfo.${id.toLowerCase()}`)}\r\n            errors={errors}\r\n            type={type}\r\n        />\r\n    );\r\n\r\n    const selectedAddress = useMemo(() => {\r\n        return valueForm.selectedCompanyAddressId && companyAddresses\r\n            ? companyAddresses.find(\r\n                  (address) =>\r\n                      address.systemId === valueForm.selectedCompanyAddressId\r\n              )\r\n            : null;\r\n    }, [valueForm.selectedCompanyAddressId, companyAddresses]);\r\n\r\n    return (\r\n        <div className=\"row checkout-info__container\">\r\n            {isEditingAddress ? (\r\n                <Fragment>\r\n                    <div className=\"small-12 medium-6 columns\">\r\n                        <div className=\"row-inner\">\r\n                            {input(\r\n                                'small-6 columns',\r\n                                'customerDetails',\r\n                                'firstName',\r\n                                'billing given-name'\r\n                            )}\r\n\r\n                            {input(\r\n                                'small-6 columns',\r\n                                'customerDetails',\r\n                                'lastName',\r\n                                'billing family-name'\r\n                            )}\r\n                        </div>\r\n                        <div className=\"row-inner\">\r\n                            {input(\r\n                                'small-12 columns',\r\n                                'customerDetails',\r\n                                'phoneNumber',\r\n                                'billing tel',\r\n                                'tel'\r\n                            )}\r\n                        </div>\r\n                        <div className=\"row-inner\">\r\n                            {input(\r\n                                'small-12 columns',\r\n                                'customerDetails',\r\n                                'email',\r\n                                'email',\r\n                                'email'\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"small-12 medium-6 columns\">\r\n                        <div className=\"row-inner\">\r\n                            <div className=\"small-12 columns\">\r\n                                <label\r\n                                    className=\"form__label\"\r\n                                    htmlFor=\"address\"\r\n                                >\r\n                                    {translate('checkout.customerinfo.address')}\r\n                                </label>\r\n\r\n                                <select\r\n                                    className=\"form__input\"\r\n                                    value={\r\n                                        valueForm.selectedCompanyAddressId || ''\r\n                                    }\r\n                                    disabled={!authenticated}\r\n                                    onChange={(event) =>\r\n                                        onCompanyAddressChange(\r\n                                            event.target.value,\r\n                                            companyAddresses.find(\r\n                                                (address) =>\r\n                                                    address.systemId ===\r\n                                                    event.target.value\r\n                                            ).country\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    <option value=\"\" disabled>\r\n                                        {translate(\r\n                                            'checkout.customerinfo.companyaddress.placeholder'\r\n                                        )}\r\n                                    </option>\r\n                                    {companyAddresses &&\r\n                                        companyAddresses.map((address) => (\r\n                                            <option\r\n                                                value={address.systemId}\r\n                                                key={`companyAddress-${address.systemId}`}\r\n                                            >{`${address.address}, ${\r\n                                                address.zipCode\r\n                                            }, ${address.city}, ${getCountry(\r\n                                                address\r\n                                            )}`}</option>\r\n                                        ))}\r\n                                </select>\r\n                                {errors['selectedCompanyAddressId'] && (\r\n                                    <span\r\n                                        className=\"form__validator--error form__validator--top-narrow\"\r\n                                        data-error-for=\"selectedCompanyAddressId\"\r\n                                    >\r\n                                        {errors['selectedCompanyAddressId'][0]}\r\n                                    </span>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        {selectedAddress && (\r\n                            <div className=\"row-inner\">\r\n                                <div className=\"small-12 columns\">\r\n                                    {companyName}\r\n                                </div>\r\n                                <div className=\"small-12 columns\">\r\n                                    {selectedAddress.address}\r\n                                </div>\r\n                                <div className=\"small-12 columns\">\r\n                                    <span>{selectedAddress.zipCode}</span>&nbsp;\r\n                                    <span>{selectedAddress.city}</span>\r\n                                </div>\r\n                                <div className=\"small-12 columns\">\r\n                                    {getCountry(selectedAddress)}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"small-12 columns flex-container align-right\">\r\n                        <Button\r\n                            onClick={onSave}\r\n                            title={translate('checkout.continue')}\r\n                            rounded={true}\r\n                        />\r\n                    </div>\r\n                </Fragment>\r\n            ) : (\r\n                <Fragment>\r\n                    <InfoField\r\n                        values={[\r\n                            valueForm['customerDetails']['firstName'],\r\n                            valueForm['customerDetails']['lastName'],\r\n                        ]}\r\n                    />\r\n                    <InfoField values={[companyName]} />\r\n                    <InfoField values={[selectedAddress.address]} />\r\n                    <InfoField\r\n                        values={[selectedAddress.zipCode, selectedAddress.city]}\r\n                    />\r\n                    <InfoField values={[getCountry(selectedAddress)]} />\r\n                    <InfoField\r\n                        values={[valueForm['customerDetails']['phoneNumber']]}\r\n                    />\r\n                    <InfoField\r\n                        values={[valueForm['customerDetails']['email']]}\r\n                    />\r\n                </Fragment>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CheckoutBusinessCustomerInfo;\r\nexport { getCountry };\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport constants from '../constants';\r\nimport { translate } from '../Services/translation';\r\nimport {\r\n    setSignUp,\r\n    setShowAlternativeAddress,\r\n} from '../Actions/Checkout.action';\r\nimport InputField from './InputField';\r\nimport { Fragment } from 'react';\r\nimport InfoField from './InfoField';\r\nimport { getCountry } from './Checkout.BusinessCustomerInfo';\r\nimport Button from './Button';\r\n\r\nconst CheckoutPrivateCustomerInfo = ({\r\n    onChange,\r\n    onSave,\r\n    valueForm,\r\n    isEditingAddress,\r\n    signUpCheckboxVisibility,\r\n}) => {\r\n    const dispatch = useDispatch();\r\n    const { payload, errors = {} } = useSelector((state) => state.checkout);\r\n    const { authenticated, signUp, isValidating } = payload;\r\n    const { customerDetails = {}, alternativeAddress = {} } = valueForm;\r\n\r\n    const input = (\r\n        cssClass,\r\n        stateKey,\r\n        id,\r\n        autoComplete = 'on',\r\n        placeholder = null,\r\n        type = 'text',\r\n        maxLength = 200\r\n    ) => (\r\n        <InputField\r\n            cssClass={cssClass}\r\n            id={`${stateKey}-${id}`}\r\n            name={`${stateKey}-${id}`}\r\n            autoComplete={autoComplete}\r\n            value={(valueForm[stateKey] || {})[id] || ''}\r\n            onChange={(value) => onChange(stateKey, id, value)}\r\n            label={translate(`checkout.customerinfo.${id.toLowerCase()}`)}\r\n            errors={errors}\r\n            placeholder={placeholder}\r\n            type={type}\r\n            maxLength={maxLength}\r\n        />\r\n    );\r\n\r\n    return (\r\n        <div className=\"row checkout-info__container\">\r\n            {isEditingAddress ? (\r\n                <Fragment>\r\n                    <div className=\"small-12 medium-6 columns\">\r\n                        <div className=\"row-inner\">\r\n                            <div className=\"small-12 columns checkout-info__placeholder-container\"></div>\r\n                        </div>\r\n                        <div className=\"row-inner\">\r\n                            {input(\r\n                                'small-6 columns',\r\n                                'customerDetails',\r\n                                'firstName',\r\n                                'billing given-name'\r\n                            )}\r\n                            {input(\r\n                                'small-6 columns',\r\n                                'customerDetails',\r\n                                'lastName',\r\n                                'billing family-name'\r\n                            )}\r\n                            {input(\r\n                                'small-12 columns',\r\n                                'customerDetails',\r\n                                'careOf',\r\n                                'on',\r\n                                null,\r\n                                'text',\r\n                                100\r\n                            )}\r\n                            {input(\r\n                                'small-12 columns',\r\n                                'customerDetails',\r\n                                'address',\r\n                                'billing street-address'\r\n                            )}\r\n                            {input(\r\n                                'small-6 columns',\r\n                                'customerDetails',\r\n                                'zipCode',\r\n                                'billing postal-code',\r\n                                null,\r\n                                'text',\r\n                                50\r\n                            )}\r\n                            {input(\r\n                                'small-6 columns',\r\n                                'customerDetails',\r\n                                'city',\r\n                                'billing address-level2',\r\n                                null,\r\n                                'text',\r\n                                100\r\n                            )}\r\n                            <div className=\"small-12 columns\">\r\n                                <label\r\n                                    className=\"form__label\"\r\n                                    htmlFor=\"country\"\r\n                                >\r\n                                    {translate('checkout.customerinfo.country')}\r\n                                </label>\r\n                                <select\r\n                                    className=\"form__input\"\r\n                                    id=\"country\"\r\n                                    value={customerDetails.country}\r\n                                    autoComplete=\"country\"\r\n                                    onChange={(event) => {\r\n                                        onChange(\r\n                                            'alternativeAddress',\r\n                                            'country',\r\n                                            event.target.value\r\n                                        );\r\n                                        onChange(\r\n                                            'customerDetails',\r\n                                            'country',\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                >\r\n                                    <option value=\"\" disabled>\r\n                                        {translate(\r\n                                            'checkout.customerinfo.country.placeholder'\r\n                                        )}\r\n                                    </option>\r\n                                    {constants.countries &&\r\n                                        constants.countries.map(\r\n                                            ({ text, value }) => (\r\n                                                <option\r\n                                                    value={value}\r\n                                                    key={`country-${value}`}\r\n                                                >\r\n                                                    {text}\r\n                                                </option>\r\n                                            )\r\n                                        )}\r\n                                </select>\r\n                            </div>\r\n                            {input(\r\n                                'small-12 columns',\r\n                                'customerDetails',\r\n                                'phoneNumber',\r\n                                'billing tel',\r\n                                null,\r\n                                'tel'\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"small-12 medium-6 columns\">\r\n                        <div className=\"row-inner\">\r\n                            <div className=\"small-12 columns\">\r\n                                <input\r\n                                    className=\"checkout-info__checkbox-input\"\r\n                                    type=\"checkbox\"\r\n                                    id=\"showAlternativeAddress\"\r\n                                    name=\"showAlternativeAddress\"\r\n                                    checked={\r\n                                        alternativeAddress.showAlternativeAddress ||\r\n                                        false\r\n                                    }\r\n                                    onChange={(event) => {\r\n                                        onChange(\r\n                                            'alternativeAddress',\r\n                                            'showAlternativeAddress',\r\n                                            event.target.checked\r\n                                        );\r\n                                        dispatch(\r\n                                            setShowAlternativeAddress(\r\n                                                event.target.checked\r\n                                            )\r\n                                        );\r\n                                    }}\r\n                                />\r\n                                <label\r\n                                    className=\"checkout-info__checkbox-label\"\r\n                                    htmlFor=\"showAlternativeAddress\"\r\n                                >\r\n                                    {translate(\r\n                                        'checkout.customerinfo.showAlternativeAddress'\r\n                                    )}\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        {alternativeAddress.showAlternativeAddress && (\r\n                            <div className=\"row-inner\">\r\n                                {input(\r\n                                    'small-6 columns',\r\n                                    'alternativeAddress',\r\n                                    'firstName',\r\n                                    'shipping given-name'\r\n                                )}\r\n                                {input(\r\n                                    'small-6 columns',\r\n                                    'alternativeAddress',\r\n                                    'lastName',\r\n                                    'shipping family-name'\r\n                                )}\r\n                                {input(\r\n                                    'small-12 columns',\r\n                                    'alternativeAddress',\r\n                                    'careOf',\r\n                                    'on',\r\n                                    null,\r\n                                    'text',\r\n                                    100\r\n                                )}\r\n                                {input(\r\n                                    'small-12 columns',\r\n                                    'alternativeAddress',\r\n                                    'address',\r\n                                    'shipping street-address'\r\n                                )}\r\n                                {input(\r\n                                    'small-6 columns',\r\n                                    'alternativeAddress',\r\n                                    'zipCode',\r\n                                    'shipping postal-code',\r\n                                    null,\r\n                                    'text',\r\n                                    50\r\n                                )}\r\n                                {input(\r\n                                    'small-6 columns',\r\n                                    'alternativeAddress',\r\n                                    'city',\r\n                                    'shipping address-level2',\r\n                                    null,\r\n                                    'text',\r\n                                    100\r\n                                )}\r\n                                <div className=\"small-12 columns\">\r\n                                    <label\r\n                                        className=\"form__label\"\r\n                                        htmlFor=\"country2\"\r\n                                    >\r\n                                        {translate(\r\n                                            'checkout.customerinfo.country'\r\n                                        )}\r\n                                    </label>\r\n                                    <select\r\n                                        className=\"form__input\"\r\n                                        id=\"country2\"\r\n                                        value={alternativeAddress.country}\r\n                                        autoComplete=\"country\"\r\n                                        onChange={(event) => {\r\n                                            onChange(\r\n                                                'alternativeAddress',\r\n                                                'country',\r\n                                                event.target.value\r\n                                            );\r\n                                            onChange(\r\n                                                'customerDetails',\r\n                                                'country',\r\n                                                event.target.value\r\n                                            );\r\n                                        }}\r\n                                    >\r\n                                        <option value=\"\" disabled>\r\n                                            {translate(\r\n                                                'checkout.customerinfo.country.placeholder'\r\n                                            )}\r\n                                        </option>\r\n                                        {constants.countries &&\r\n                                            constants.countries.map(\r\n                                                ({ text, value }) => (\r\n                                                    <option\r\n                                                        value={value}\r\n                                                        key={`country2-${value}`}\r\n                                                    >\r\n                                                        {text}\r\n                                                    </option>\r\n                                                )\r\n                                            )}\r\n                                    </select>\r\n                                </div>\r\n                                {input(\r\n                                    'small-12 columns',\r\n                                    'alternativeAddress',\r\n                                    'phoneNumber',\r\n                                    'shipping tel',\r\n                                    null,\r\n                                    'tel'\r\n                                )}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"small-12 medium-6 columns\">\r\n                        <div className=\"row-inner\">\r\n                            {input(\r\n                                'small-12 columns',\r\n                                'customerDetails',\r\n                                'email',\r\n                                'email',\r\n                                null,\r\n                                'email'\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    <div\r\n                        className={`small-12 columns flex-container ${\r\n                            authenticated ? 'align-right' : 'align-justify'\r\n                        }`}\r\n                    >\r\n                        <div>\r\n                            {!authenticated && signUpCheckboxVisibility && (\r\n                                <>\r\n                                    <input\r\n                                        className=\"checkout-info__checkbox-input\"\r\n                                        type=\"checkbox\"\r\n                                        id=\"signupandlogin\"\r\n                                        checked={signUp}\r\n                                        onChange={(event) =>\r\n                                            dispatch(\r\n                                                setSignUp(event.target.checked)\r\n                                            )\r\n                                        }\r\n                                    />\r\n                                    <label\r\n                                        className=\"checkout-info__checkbox-label\"\r\n                                        htmlFor=\"signupandlogin\"\r\n                                    >\r\n                                        {translate(\r\n                                            'checkout.customerinfo.signupandlogin'\r\n                                        )}\r\n                                    </label>\r\n                                </>\r\n                            )}\r\n                        </div>\r\n                        <Button\r\n                            onClick={onSave}\r\n                            title={translate('checkout.continue')}\r\n                            rounded={true}\r\n                            disabled={isValidating}\r\n                        />\r\n                    </div>\r\n                </Fragment>\r\n            ) : (\r\n                <Fragment>\r\n                    <InfoField\r\n                        values={[\r\n                            valueForm['customerDetails']['firstName'],\r\n                            valueForm['customerDetails']['lastName'],\r\n                        ]}\r\n                    />\r\n                    {valueForm['customerDetails']['careOf'] && (\r\n                        <InfoField\r\n                            values={[valueForm['customerDetails']['careOf']]}\r\n                        />\r\n                    )}\r\n                    <InfoField\r\n                        values={[valueForm['customerDetails']['address']]}\r\n                    />\r\n                    <InfoField\r\n                        values={[\r\n                            valueForm['customerDetails']['zipCode'],\r\n                            valueForm['customerDetails']['city'],\r\n                        ]}\r\n                    />\r\n                    <InfoField values={[getCountry(customerDetails)]} />\r\n\r\n                    <InfoField\r\n                        values={[valueForm['customerDetails']['phoneNumber']]}\r\n                    />\r\n                    <InfoField\r\n                        values={[valueForm['customerDetails']['email']]}\r\n                    />\r\n                </Fragment>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CheckoutPrivateCustomerInfo;\r\n","import { string, object, boolean, mixed } from 'yup';\r\nimport { translate } from '../Services/translation';\r\n\r\nconst privateCustomerAdditionalDetailsSchema = object().shape({\r\n    acceptTermsOfCondition: boolean()\r\n        .required(translate(`validation.checkrequired`))\r\n        .oneOf([true], translate(`validation.checkrequired`)),\r\n    selectedDeliveryMethod: object().required(translate(`validation.required`)),\r\n    selectedPaymentMethod: object().required(translate(`validation.required`)),\r\n});\r\n\r\nconst privateCustomerAddressSchema = object().shape({\r\n    email: string()\r\n        .required(translate(`validation.required`))\r\n        .email(translate(`validation.email`)),\r\n    phoneNumber: string().required(translate(`validation.required`)),\r\n    country: mixed()\r\n        .required(translate(`validation.required`))\r\n        .notOneOf([''], translate('validation.required')),\r\n    city: string().required(translate(`validation.required`)),\r\n    zipCode: string().required(translate(`validation.required`)),\r\n    address: string().required(translate(`validation.required`)),\r\n    lastName: string().required(translate(`validation.required`)),\r\n    firstName: string().required(translate(`validation.required`)),\r\n});\r\n\r\nconst privateCustomerAlternativeAddressSchema = object().shape({\r\n    phoneNumber: string().required(translate(`validation.required`)),\r\n    country: mixed()\r\n        .required(translate(`validation.required`))\r\n        .notOneOf([''], translate('validation.required')),\r\n    city: string().required(translate(`validation.required`)),\r\n    zipCode: string().required(translate(`validation.required`)),\r\n    address: string().required(translate(`validation.required`)),\r\n    lastName: string().required(translate(`validation.required`)),\r\n    firstName: string().required(translate(`validation.required`)),\r\n});\r\n\r\nconst businessCustomerDetailsSchema = object().shape({\r\n    email: string()\r\n        .required(translate(`validation.required`))\r\n        .email(translate(`validation.email`)),\r\n    phoneNumber: string().required(translate(`validation.required`)),\r\n    lastName: string().required(translate(`validation.required`)),\r\n    firstName: string().required(translate(`validation.required`)),\r\n    selectedCompanyAddressId: string().required(\r\n        translate(`validation.required`)\r\n    ),\r\n});\r\n\r\nconst businessCustomerAdditionalDetailsSchema = object().shape({\r\n    acceptTermsOfCondition: boolean()\r\n        .required(translate(`validation.checkrequired`))\r\n        .oneOf([true], translate(`validation.checkrequired`)),\r\n    selectedDeliveryMethod: object().required(translate(`validation.required`)),\r\n    selectedPaymentMethod: object().required(translate(`validation.required`)),\r\n});\r\n\r\nexport {\r\n    privateCustomerAdditionalDetailsSchema,\r\n    privateCustomerAddressSchema,\r\n    privateCustomerAlternativeAddressSchema,\r\n    businessCustomerDetailsSchema,\r\n    businessCustomerAdditionalDetailsSchema,\r\n};\r\n","import React, { Fragment, useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport {\r\n    clearError,\r\n    setBusinessCustomer,\r\n    setSelectedCompanyAddress,\r\n    submitError,\r\n    updateCustomerDetails,\r\n    setCountry,\r\n    saveCustomerDetail,\r\n    setValidateStatus,\r\n} from '../Actions/Checkout.action';\r\nimport CheckoutBusinessCustomerInfo from './Checkout.BusinessCustomerInfo';\r\nimport CheckoutPrivateCustomerInfo from './Checkout.PrivateCustomerInfo';\r\nimport {\r\n    businessCustomerDetailsSchema,\r\n    privateCustomerAddressSchema,\r\n    privateCustomerAlternativeAddressSchema,\r\n} from './Checkout.ValidationSchema';\r\nimport constants from '../constants';\r\nimport { translate } from '../Services/translation';\r\nimport Button from './Button';\r\n\r\nconst validateAlternativeAddress = (alternativeAddress) => {\r\n    return (\r\n        alternativeAddress &&\r\n        alternativeAddress.showAlternativeAddress &&\r\n        (alternativeAddress.firstName ||\r\n            alternativeAddress.lastName ||\r\n            alternativeAddress.address ||\r\n            alternativeAddress.zipCode ||\r\n            alternativeAddress.city ||\r\n            alternativeAddress.phoneNumber)\r\n    );\r\n};\r\n\r\nconst validateCustomerInfo = (result, isBusinessCustomer) => {\r\n    const {\r\n        customerDetails,\r\n        selectedCompanyAddressId,\r\n        alternativeAddress,\r\n    } = result;\r\n\r\n    if (isBusinessCustomer) {\r\n        return businessCustomerDetailsSchema.validate({\r\n            ...customerDetails,\r\n            selectedCompanyAddressId,\r\n        });\r\n    }\r\n\r\n    return privateCustomerAddressSchema\r\n        .validate({\r\n            ...customerDetails,\r\n        })\r\n        .then((result) => {\r\n            if (validateAlternativeAddress(alternativeAddress)) {\r\n                return privateCustomerAlternativeAddressSchema\r\n                    .validate({\r\n                        ...alternativeAddress,\r\n                    })\r\n                    .catch((error) => {\r\n                        error.addressPath = 'alternativeAddress';\r\n                        throw error;\r\n                    });\r\n            } else {\r\n                return result;\r\n            }\r\n        });\r\n};\r\n\r\nconst CheckoutCustomerInfo = ({\r\n    checkout,\r\n    addressFormValue,\r\n    setAddressFormValue,\r\n    isEditingAddress,\r\n    setIsEditingAddress,\r\n    signUpCheckboxVisibility,\r\n}) => {\r\n    const dispatch = useDispatch();\r\n    const {\r\n        payload: { loginUrl, authenticated, isBusinessCustomer, checkoutMode },\r\n    } = checkout;\r\n\r\n    const onCustomerInfoChange = useCallback(\r\n        (stateKey, id, value) => {\r\n            setAddressFormValue((previousState) => ({\r\n                ...previousState,\r\n                [stateKey]: {\r\n                    ...previousState[stateKey],\r\n                    [id]: value,\r\n                },\r\n            }));\r\n        },\r\n        [setAddressFormValue]\r\n    );\r\n    const onCompanyAddressChange = useCallback(\r\n        (companyAddressId, country) => {\r\n            setAddressFormValue((previousState) => ({\r\n                ...previousState,\r\n                selectedCompanyAddressId: companyAddressId,\r\n                customerDetails: {\r\n                    ...previousState.customerDetails,\r\n                    country,\r\n                },\r\n            }));\r\n        },\r\n        [setAddressFormValue]\r\n    );\r\n\r\n    const onEditForm = useCallback(() => {\r\n        setIsEditingAddress(true);\r\n    }, [setIsEditingAddress]);\r\n\r\n    const onUpdateCustomerDetails = useCallback(() => {\r\n        const notCustomerDetailFields = ['selectedCompanyAddressId'];\r\n\r\n        const onValid = () => {\r\n            const { payload } = checkout,\r\n                { isBusinessCustomer } = payload;\r\n            const {\r\n                customerDetails,\r\n                selectedCompanyAddressId,\r\n                alternativeAddress,\r\n            } = addressFormValue;\r\n\r\n            dispatch(updateCustomerDetails('customerDetails', customerDetails));\r\n            if (isBusinessCustomer) {\r\n                dispatch(setSelectedCompanyAddress(selectedCompanyAddressId));\r\n                const companyAddress = payload.companyAddresses.find(\r\n                    (c) => c.systemId === selectedCompanyAddressId\r\n                );\r\n                dispatch(setCountry(companyAddress.country));\r\n            } else {\r\n                dispatch(\r\n                    updateCustomerDetails(\r\n                        'alternativeAddress',\r\n                        alternativeAddress\r\n                    )\r\n                );\r\n                dispatch(setCountry(customerDetails.country));\r\n            }\r\n            setIsEditingAddress(false);\r\n        };\r\n\r\n        const onSetCustomerDetail = () =>\r\n            dispatch(saveCustomerDetail(addressFormValue));\r\n\r\n        const onError = (error) => {\r\n            error.path =\r\n                notCustomerDetailFields.indexOf(error.path) >= 0\r\n                    ? error.path\r\n                    : `${error?.addressPath || 'customerDetails'}-${\r\n                          error.path\r\n                      }`;\r\n            dispatch(submitError(error));\r\n        };\r\n\r\n        dispatch(setValidateStatus(true));\r\n        dispatch(clearError());\r\n\r\n        validateCustomerInfo(addressFormValue, isBusinessCustomer)\r\n            .then(onSetCustomerDetail)\r\n            .then(onValid)\r\n            .catch(onError)\r\n            .finally(() => {\r\n                dispatch(setValidateStatus(false));\r\n            });\r\n    }, [\r\n        dispatch,\r\n        addressFormValue,\r\n        isBusinessCustomer,\r\n        checkout,\r\n        setIsEditingAddress,\r\n    ]);\r\n\r\n    const privateCustomerInfoComponent = useCallback(() => {\r\n        return (\r\n            <CheckoutPrivateCustomerInfo\r\n                onSave={onUpdateCustomerDetails}\r\n                onChange={onCustomerInfoChange}\r\n                valueForm={addressFormValue}\r\n                isEditingAddress={isEditingAddress}\r\n                signUpCheckboxVisibility={signUpCheckboxVisibility}\r\n            />\r\n        );\r\n    }, [\r\n        addressFormValue,\r\n        isEditingAddress,\r\n        onCustomerInfoChange,\r\n        onUpdateCustomerDetails,\r\n        signUpCheckboxVisibility,\r\n    ]);\r\n\r\n    const businessCustomerInfoComponent = useCallback(() => {\r\n        return (\r\n            <CheckoutBusinessCustomerInfo\r\n                onChange={onCustomerInfoChange}\r\n                onCompanyAddressChange={onCompanyAddressChange}\r\n                onSave={onUpdateCustomerDetails}\r\n                valueForm={addressFormValue}\r\n                isEditingAddress={isEditingAddress}\r\n            />\r\n        );\r\n    }, [\r\n        addressFormValue,\r\n        isEditingAddress,\r\n        onCompanyAddressChange,\r\n        onCustomerInfoChange,\r\n        onUpdateCustomerDetails,\r\n    ]);\r\n\r\n    if (!authenticated) {\r\n        return (\r\n            <Fragment>\r\n                <div className=\"row align-justify\">\r\n                    <div className=\"flex-container checkout__flex-wrapper\">\r\n                        <h3 className=\"checkout__section-title\">\r\n                            {translate('checkout.customerinfo.title')}\r\n                        </h3>\r\n                        {isEditingAddress && (\r\n                            <Fragment>\r\n                                <label className=\"checkout__text--in-line\">\r\n                                    {translate(\r\n                                        'checkout.customerinfo.existingcustomer'\r\n                                    )}\r\n                                </label>\r\n                                &nbsp;\r\n                                <a href={loginUrl} className=\"checkout__link\">\r\n                                    {translate(\r\n                                        'checkout.customerinfo.clicktologin'\r\n                                    )}\r\n                                </a>\r\n                                &nbsp;\r\n                                {!isBusinessCustomer &&\r\n                                    checkoutMode ===\r\n                                        constants.checkoutMode.both && (\r\n                                        <a\r\n                                            onClick={() =>\r\n                                                dispatch(\r\n                                                    setBusinessCustomer(true)\r\n                                                )\r\n                                            }\r\n                                            className=\"checkout__link\"\r\n                                        >\r\n                                            {translate(\r\n                                                'checkout.customerinfo.businesscustomer'\r\n                                            )}\r\n                                        </a>\r\n                                    )}\r\n                                {isBusinessCustomer &&\r\n                                    checkoutMode ===\r\n                                        constants.checkoutMode.both && (\r\n                                        <a\r\n                                            onClick={() =>\r\n                                                dispatch(\r\n                                                    setBusinessCustomer(false)\r\n                                                )\r\n                                            }\r\n                                            className=\"checkout__link\"\r\n                                        >\r\n                                            {translate(\r\n                                                'checkout.customerinfo.privatecustomer'\r\n                                            )}\r\n                                        </a>\r\n                                    )}\r\n                            </Fragment>\r\n                        )}\r\n                    </div>\r\n                    {!isEditingAddress && (\r\n                        <Button\r\n                            onClick={onEditForm}\r\n                            title={translate('checkout.edit')}\r\n                            isLink={true}\r\n                        />\r\n                    )}\r\n                </div>\r\n                {!isBusinessCustomer &&\r\n                    checkoutMode !== constants.checkoutMode.companyCustomers &&\r\n                    privateCustomerInfoComponent()}\r\n                {(isBusinessCustomer ||\r\n                    checkoutMode === constants.checkoutMode.companyCustomers) &&\r\n                    businessCustomerInfoComponent()}\r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"row align-justify\">\r\n                <h3 className=\"checkout__section-title\">\r\n                    {translate('checkout.customerinfo.title')}\r\n                </h3>\r\n                {!isEditingAddress && (\r\n                    <Button onClick={onEditForm} title=\"edit\" isLink={true} />\r\n                )}\r\n            </div>\r\n            {!isBusinessCustomer && privateCustomerInfoComponent()}\r\n            {isBusinessCustomer && businessCustomerInfoComponent()}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default CheckoutCustomerInfo;\r\nexport { validateAlternativeAddress, validateCustomerInfo };\r\n","import React, { Fragment } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setDelivery } from '../Actions/Checkout.action';\r\nimport { translate } from '../Services/translation';\r\n\r\nconst CheckoutDeliveryMethods = ({ errors }) => {\r\n    const dispatch = useDispatch();\r\n    const { deliveryMethods, selectedDeliveryMethod } = useSelector(\r\n        (state) => state.checkout.payload\r\n    );\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"row\">\r\n                <h3 className=\"checkout__section-title\">\r\n                    {translate('checkout.delivery.title')}\r\n                </h3>\r\n            </div>\r\n            {deliveryMethods && deliveryMethods.length > 0 && (\r\n                <section className=\"row checkout-info__container\">\r\n                    <div className=\"columns small-12\">\r\n                        {deliveryMethods.map((method) => (\r\n                            <label className=\"row no-margin\" key={method.id}>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    name=\"deliveryMethods\"\r\n                                    className=\"checkout-info__checkbox-radio\"\r\n                                    value={method.id}\r\n                                    checked={\r\n                                        method.id === selectedDeliveryMethod?.id\r\n                                    }\r\n                                    onChange={() =>\r\n                                        dispatch(setDelivery(method))\r\n                                    }\r\n                                />\r\n                                <span className=\"columns\">\r\n                                    <b> {method.name} </b> -{' '}\r\n                                    {method.formattedPrice}\r\n                                </span>\r\n                            </label>\r\n                        ))}\r\n                    </div>\r\n                </section>\r\n            )}\r\n            <div className=\"row\">\r\n                {errors['selectedDeliveryMethod'] && (\r\n                    <span className=\"form__validator--error form__validator--top-narrow\">\r\n                        {errors['selectedDeliveryMethod'][0]}\r\n                    </span>\r\n                )}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default CheckoutDeliveryMethods;\r\n","import React, { Fragment, useEffect, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { translate } from '../Services/translation';\r\nimport {\r\n    setDiscountCode,\r\n    submitDiscountCode,\r\n    deleteDiscountCode,\r\n} from '../Actions/Checkout.action';\r\n\r\nconst CheckoutPaymentMethods = () => {\r\n    const dispatch = useDispatch();\r\n    const { payload, errors = {} } = useSelector((state) => state.checkout);\r\n    const { usedDiscountCodes } = payload;\r\n    const discountCodeEl = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (errors && !errors['discountCode']?.length) {\r\n            discountCodeEl.current.value = '';\r\n        }\r\n    }, [errors]);\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"row\">\r\n                <h3 className=\"checkout__section-title\">\r\n                    {translate('checkout.discountcode')}\r\n                </h3>\r\n            </div>\r\n            <section className=\"row checkout-info__container\">\r\n                <div className=\"columns small-12\">\r\n                    <div className=\"row no-margin\">\r\n                        <div className=\"small-6 medium-4\">\r\n                            <input\r\n                                ref={discountCodeEl}\r\n                                className=\"form__input\"\r\n                                id=\"campaign-code\"\r\n                                placeholder={translate('checkout.discountcode')}\r\n                                onChange={(event) =>\r\n                                    dispatch(\r\n                                        setDiscountCode(event.target.value)\r\n                                    )\r\n                                }\r\n                            />\r\n                            {errors && errors['discountCode'] && (\r\n                                <span\r\n                                    className=\"form__validator--error form__validator--top-narrow\"\r\n                                    data-error-for=\"campaign-code\"\r\n                                >\r\n                                    {errors['discountCode'][0]}\r\n                                </span>\r\n                            )}\r\n                        </div>\r\n                        <div className=\"small-5 medium-4 columns\">\r\n                            <button\r\n                                className=\"checkout-info__campaign-button\"\r\n                                onClick={() => dispatch(submitDiscountCode())}\r\n                            >\r\n                                {translate('checkout.usediscountcode')}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row no-margin\">\r\n                        <div className=\"chip__container\">\r\n                            {usedDiscountCodes &&\r\n                                usedDiscountCodes.map((discountCode) => (\r\n                                    <div className=\"chip\" key={discountCode}>\r\n                                        <span className=\"chip__label checkout-discount-codes\">\r\n                                            {discountCode}\r\n                                        </span>\r\n                                        <i className=\"chip__icon chip__icon--check\"></i>\r\n                                        <i\r\n                                            className=\"chip__icon chip__icon--delete\"\r\n                                            onClick={() =>\r\n                                                dispatch(\r\n                                                    deleteDiscountCode(\r\n                                                        discountCode\r\n                                                    )\r\n                                                )\r\n                                            }\r\n                                            title={translate('general.remove')}\r\n                                        ></i>\r\n                                    </div>\r\n                                ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default CheckoutPaymentMethods;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { translate } from '../Services/translation';\r\n\r\nconst CheckoutOrderInfo = () => {\r\n    const cart = useSelector((state) => state.cart);\r\n\r\n    return (\r\n        <div className=\"columns small-12 medium-6 checkout-info__summary--full-row\">\r\n            <div>\r\n                {translate('checkout.order.productstotal')}{' '}\r\n                <span className=\"checkout-info__summary--expand\"></span>{' '}\r\n                {cart.orderTotal}\r\n            </div>\r\n            <div>\r\n                {translate('checkout.order.discount')}{' '}\r\n                <span className=\"checkout-info__summary--expand\"></span>{' '}\r\n                {cart.discount}\r\n            </div>\r\n            <div>\r\n                {translate('checkout.order.deliverycost')}{' '}\r\n                <span className=\"checkout-info__summary--expand\"></span>{' '}\r\n                {cart.deliveryCost}\r\n            </div>\r\n            <div>\r\n                {translate('checkout.order.paymentcost')}{' '}\r\n                <span className=\"checkout-info__summary--expand\"></span>{' '}\r\n                {cart.paymentCost}\r\n            </div>\r\n            <h3>\r\n                {translate('checkout.order.grandTotal')}{' '}\r\n                <span className=\"checkout-info__summary--expand\"></span>{' '}\r\n                {cart.grandTotal}\r\n            </h3>\r\n            <div>\r\n                {translate('checkout.order.vat')}{' '}\r\n                <span className=\"checkout-info__summary--expand\"></span>{' '}\r\n                {cart.vat}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CheckoutOrderInfo;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { translate } from '../Services/translation';\r\nimport { setOrderNote } from '../Actions/Checkout.action';\r\n\r\nconst CheckoutOrderNote = () => {\r\n    const dispatch = useDispatch();\r\n    const orderNote = useSelector((state) => state.checkout.payload.orderNote);\r\n\r\n    return (\r\n        <div className=\"columns small-12 medium-6 checkout-info__summary--full-height\">\r\n            {translate('checkout.order.message')}\r\n            <textarea\r\n                className=\"form__input checkout-info__messages\"\r\n                value={orderNote}\r\n                onChange={(event) => dispatch(setOrderNote(event.target.value))}\r\n            ></textarea>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CheckoutOrderNote;\r\n","import React, { Fragment } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setPayment } from '../Actions/Checkout.action';\r\nimport { translate } from '../Services/translation';\r\n\r\nconst CheckoutPaymentMethods = ({ errors }) => {\r\n    const dispatch = useDispatch();\r\n    const { payload } = useSelector((state) => state.checkout);\r\n    const { paymentMethods, selectedPaymentMethod } = payload;\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"row\">\r\n                <h3 className=\"checkout__section-title\">\r\n                    {translate('checkout.payment.title')}\r\n                </h3>\r\n            </div>\r\n            {paymentMethods && paymentMethods.length > 0 && (\r\n                <section className=\"row checkout-info__container\">\r\n                    <div className=\"columns small-12\">\r\n                        {paymentMethods.map((method) => (\r\n                            <label className=\"row no-margin\" key={method.id}>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    name=\"paymentMethods\"\r\n                                    className=\"checkout-info__checkbox-radio\"\r\n                                    value={method.id}\r\n                                    checked={\r\n                                        method.id === selectedPaymentMethod.id\r\n                                    }\r\n                                    onChange={() =>\r\n                                        dispatch(setPayment(method))\r\n                                    }\r\n                                />\r\n                                <span className=\"columns\">\r\n                                    <b> {method.name} </b> -{' '}\r\n                                    {method.formattedPrice}\r\n                                </span>\r\n                            </label>\r\n                        ))}\r\n                    </div>\r\n                </section>\r\n            )}\r\n            <div className=\"row\">\r\n                {errors['selectedPaymentMethod'] && (\r\n                    <span className=\"form__validator--error form__validator--top-narrow\">\r\n                        {errors['selectedPaymentMethod'][0]}\r\n                    </span>\r\n                )}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default CheckoutPaymentMethods;\r\n","import React from 'react';\r\nimport DynamicComponent from '../DynamicComponent';\r\nconst scriptPattern = /<script\\b[^>]*>([\\s\\S]*?)<\\/script>/gi;\r\nconst scriptFilePattern = /<script.*?src=[\"'](.*?)[\"']/gi;\r\n\r\nconst extractScripts = (domString) => {\r\n    let matches,\r\n        html = domString;\r\n    const scripts = [],\r\n        scriptFiles = [];\r\n    while ((matches = scriptPattern.exec(domString)) !== null) {\r\n        html = html.replace(matches[0], '');\r\n        matches[1] && matches[1].trim() !== '' && scripts.push(matches[1]);\r\n    }\r\n    while ((matches = scriptFilePattern.exec(domString)) !== null) {\r\n        matches[1] && matches[1].trim() !== '' && scriptFiles.push(matches[1]);\r\n    }\r\n\r\n    return {\r\n        html,\r\n        scripts,\r\n        scriptFiles,\r\n    };\r\n};\r\n\r\nconst executeScript = (domId, scriptContent) => {\r\n    const script = document.createElement('script');\r\n    script.type = 'text/javascript';\r\n    try {\r\n        script.appendChild(document.createTextNode(scriptContent));\r\n    } catch (e) {\r\n        // to support IE\r\n        script.text = scriptContent;\r\n    }\r\n    document.getElementById(domId).appendChild(script);\r\n};\r\n\r\nconst includeScript = (domId, srciptUrl) => {\r\n    const script = document.createElement('script');\r\n    script.type = 'text/javascript';\r\n    script.src = srciptUrl;\r\n    document.getElementById(domId).appendChild(script);\r\n};\r\n\r\nconst PaymentWidget = React.memo(function PaymentWidget({ responseString }) {\r\n    const renderWidget = (paymentSession) => {\r\n        const WidgetCheckout = DynamicComponent({\r\n            loader: () => import('./CheckoutWidget'),\r\n        });\r\n        const args = {\r\n            paymentSession,\r\n            extractScripts,\r\n            executeScript,\r\n            includeScript,\r\n        };\r\n        return <WidgetCheckout {...args} />;\r\n    };\r\n\r\n    return renderWidget(responseString);\r\n});\r\n\r\nexport default PaymentWidget;\r\n","import React, {\r\n    Fragment,\r\n    useCallback,\r\n    useEffect,\r\n    useRef,\r\n    useState,\r\n} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n    acceptTermsOfCondition,\r\n    setDelivery,\r\n    setPayment,\r\n    setStatusSubmitButton,\r\n    submit,\r\n    submitDone,\r\n    submitError,\r\n} from '../Actions/Checkout.action';\r\nimport constants, {\r\n    PaymentIntegrationType,\r\n    ShippingIntegrationType,\r\n} from '../constants';\r\nimport { translate } from '../Services/translation';\r\nimport Button from './Button';\r\nimport CheckoutCart from './Checkout.Cart';\r\nimport CheckoutCustomerInfo, {\r\n    validateAlternativeAddress,\r\n    validateCustomerInfo,\r\n} from './Checkout.CustomerInfo';\r\nimport CheckoutDeliveryMethods from './Checkout.DeliveryMethods';\r\nimport CheckoutDiscountCodes from './Checkout.DiscountCodes';\r\nimport CheckoutOrderInfo from './Checkout.OrderInfo';\r\nimport CheckoutOrderNote from './Checkout.OrderNote';\r\nimport CheckoutPaymentMethods from './Checkout.PaymentMethods';\r\nimport {\r\n    businessCustomerAdditionalDetailsSchema,\r\n    businessCustomerDetailsSchema,\r\n    privateCustomerAdditionalDetailsSchema,\r\n    privateCustomerAddressSchema,\r\n    privateCustomerAlternativeAddressSchema,\r\n} from './Checkout.ValidationSchema';\r\nimport PaymentWidget from './Payments/PaymentWidget';\r\n\r\nconst Checkout = () => {\r\n    const dispatch = useDispatch();\r\n    const cart = useSelector((state) => state.cart);\r\n    const checkout = useSelector((state) => state.checkout);\r\n\r\n    const [shippingOptionVisibility, setShippingOptionVisibility] = useState(\r\n        true\r\n    );\r\n    const [paymentOptionVisibility, setPaymentOptionVisibility] = useState(\r\n        true\r\n    );\r\n    const [customerDetailsVisibility, setCustomerDetailsVisibility] = useState(\r\n        true\r\n    );\r\n    const [deliveryWidgetVisibility, setDeliveryWidgetVisibility] = useState(\r\n        true\r\n    );\r\n    const [paymentWidgetVisibility, setPaymentWidgetVisibility] = useState(\r\n        true\r\n    );\r\n    const [orderSummaryVisibility, setOrderSummaryVisibility] = useState(true);\r\n    const [signUpCheckboxVisibility, setSignUpCheckboxVisibility] = useState(\r\n        true\r\n    );\r\n\r\n    const {\r\n        payload: {\r\n            customerDetails,\r\n            alternativeAddress,\r\n            selectedCompanyAddressId,\r\n            selectedDeliveryMethod,\r\n            selectedPaymentMethod,\r\n            deliveryMethods,\r\n            paymentMethods,\r\n        },\r\n    } = checkout;\r\n    const [isEditingAddress, setIsEditingAddress] = useState(true);\r\n    const [addressFormValue, setAddressFormValue] = useState({\r\n        customerDetails,\r\n        alternativeAddress,\r\n        selectedCompanyAddressId,\r\n    });\r\n    const onSubmit = useCallback(() => dispatch(submit()), [dispatch]);\r\n    const onSubmitError = useCallback(\r\n        (error) => {\r\n            dispatch(submitError(error));\r\n            dispatch(submitDone(null));\r\n        },\r\n        [dispatch]\r\n    );\r\n\r\n    const placeOrder = useCallback(() => {\r\n        const { payload } = checkout,\r\n            {\r\n                isBusinessCustomer,\r\n                selectedCompanyAddressId,\r\n                acceptTermsOfCondition,\r\n                selectedPaymentMethod,\r\n                selectedDeliveryMethod,\r\n            } = payload;\r\n        const notCustomerDetailFields = [\r\n            'selectedCompanyAddressId',\r\n            'selectedPaymentMethod',\r\n            'selectedDeliveryMethod',\r\n            'acceptTermsOfCondition',\r\n        ];\r\n        const onError = (error, addressPath = 'customerDetails') => {\r\n            error.path =\r\n                notCustomerDetailFields.indexOf(error.path) >= 0\r\n                    ? error.path\r\n                    : `${addressPath}-${error.path}`;\r\n            onSubmitError(error);\r\n            dispatch(setStatusSubmitButton(true));\r\n        };\r\n        dispatch(setStatusSubmitButton(false));\r\n        if (isBusinessCustomer) {\r\n            businessCustomerDetailsSchema\r\n                .validate({\r\n                    ...payload.customerDetails,\r\n                    selectedCompanyAddressId,\r\n                })\r\n                .then(() => {\r\n                    businessCustomerAdditionalDetailsSchema\r\n                        .validate({\r\n                            selectedPaymentMethod,\r\n                            selectedDeliveryMethod,\r\n                            acceptTermsOfCondition,\r\n                        })\r\n                        .then(() => {\r\n                            onSubmit();\r\n                        })\r\n                        .catch(onError);\r\n                })\r\n                .catch(onError);\r\n        } else {\r\n            privateCustomerAddressSchema\r\n                .validate({\r\n                    ...payload.customerDetails,\r\n                })\r\n                .then(() => {\r\n                    if (\r\n                        validateAlternativeAddress(payload.alternativeAddress)\r\n                    ) {\r\n                        privateCustomerAlternativeAddressSchema\r\n                            .validate({\r\n                                ...payload.alternativeAddress,\r\n                            })\r\n                            .then(() => {\r\n                                privateCustomerAdditionalDetailsSchema\r\n                                    .validate({\r\n                                        selectedPaymentMethod,\r\n                                        selectedDeliveryMethod,\r\n                                        acceptTermsOfCondition,\r\n                                    })\r\n                                    .then(() => {\r\n                                        onSubmit();\r\n                                    })\r\n                                    .catch(onError);\r\n                            })\r\n                            .catch((error) => {\r\n                                onError(error, 'alternativeAddress');\r\n                            });\r\n                    } else {\r\n                        privateCustomerAdditionalDetailsSchema\r\n                            .validate({\r\n                                selectedPaymentMethod,\r\n                                selectedDeliveryMethod,\r\n                                acceptTermsOfCondition,\r\n                            })\r\n                            .then(() => {\r\n                                onSubmit();\r\n                            })\r\n                            .catch(onError);\r\n                    }\r\n                })\r\n                .catch(onError);\r\n        }\r\n    }, [checkout, dispatch, onSubmit, onSubmitError]);\r\n\r\n    const resetVisibilityValues = useCallback(() => {\r\n        setShippingOptionVisibility(true);\r\n        setPaymentOptionVisibility(true);\r\n        setCustomerDetailsVisibility(true);\r\n        setDeliveryWidgetVisibility(true);\r\n        setPaymentWidgetVisibility(true);\r\n        setOrderSummaryVisibility(true);\r\n        setSignUpCheckboxVisibility(true);\r\n    }, []);\r\n\r\n    const checkIntegrationTypeExist = useCallback(\r\n        (integrationTypeCheck) => {\r\n            return deliveryMethods.find(\r\n                (method) => method.integrationType === integrationTypeCheck\r\n            );\r\n        },\r\n        [deliveryMethods]\r\n    );\r\n\r\n    const firstRender = useRef(true);\r\n\r\n    // Sets default value on first load.\r\n    useEffect(() => {\r\n        if (!firstRender.current) {\r\n            return;\r\n        }\r\n        firstRender.current = false;\r\n\r\n        if (!checkout) {\r\n            return;\r\n        }\r\n\r\n        const {\r\n            selectedPaymentMethod,\r\n            selectedDeliveryMethod,\r\n            customerDetails,\r\n            alternativeAddress,\r\n        } = checkout.payload;\r\n\r\n        // set selected value for payment method on load.\r\n        selectedPaymentMethod && dispatch(setPayment(selectedPaymentMethod));\r\n        // set selected value for delivery method on load.\r\n        selectedDeliveryMethod && dispatch(setDelivery(selectedDeliveryMethod));\r\n        // fill default select value to the state\r\n        setAddressFormValue((previousState) => ({\r\n            ...previousState,\r\n            customerDetails: {\r\n                ...(customerDetails ?? {}),\r\n                country:\r\n                    customerDetails?.country ?? constants.countries[0].value,\r\n            },\r\n            alternativeAddress: {\r\n                ...(alternativeAddress ?? {}),\r\n                country:\r\n                    alternativeAddress?.country ?? constants.countries[0].value,\r\n            },\r\n        }));\r\n    }, [checkout, dispatch]);\r\n\r\n    // Show or hide different sections depending on payment and delivery methods.\r\n    useEffect(() => {\r\n        resetVisibilityValues();\r\n        switch (selectedPaymentMethod?.integrationType) {\r\n            case PaymentIntegrationType.IframeCheckout:\r\n                setCustomerDetailsVisibility(false);\r\n                setOrderSummaryVisibility(false);\r\n                break;\r\n            case PaymentIntegrationType.PaymentWidgets:\r\n                if (isEditingAddress) {\r\n                    setPaymentWidgetVisibility(false);\r\n                }\r\n                setOrderSummaryVisibility(false);\r\n                setSignUpCheckboxVisibility(false);\r\n                break;\r\n            case PaymentIntegrationType.DirectPayment:\r\n                if (isEditingAddress) {\r\n                    setOrderSummaryVisibility(false);\r\n                }\r\n                setPaymentWidgetVisibility(false);\r\n                break;\r\n        }\r\n        if (\r\n            checkIntegrationTypeExist(ShippingIntegrationType.DeliveryCheckout)\r\n        ) {\r\n            return setShippingOptionVisibility(false);\r\n        }\r\n        if (\r\n            checkIntegrationTypeExist(ShippingIntegrationType.PaymentCheckout)\r\n        ) {\r\n            return (\r\n                setShippingOptionVisibility(false) &&\r\n                setDeliveryWidgetVisibility(false)\r\n            );\r\n        }\r\n        if (\r\n            selectedDeliveryMethod?.integrationType ===\r\n            ShippingIntegrationType.Inline\r\n        ) {\r\n            setDeliveryWidgetVisibility(false);\r\n        }\r\n    }, [\r\n        selectedDeliveryMethod,\r\n        selectedPaymentMethod,\r\n        deliveryMethods,\r\n        paymentMethods,\r\n        resetVisibilityValues,\r\n        checkIntegrationTypeExist,\r\n        isEditingAddress,\r\n    ]);\r\n\r\n    // Update place order button's status when the state of Customer Information form is changed.\r\n    useEffect(() => {\r\n        dispatch(setStatusSubmitButton(false));\r\n        if (isEditingAddress) {\r\n            return;\r\n        }\r\n        validateCustomerInfo(\r\n            addressFormValue,\r\n            checkout.payload.isBusinessCustomer\r\n        )\r\n            .then(() => {\r\n                dispatch(setStatusSubmitButton(true));\r\n            })\r\n            .catch(() => {\r\n                dispatch(setStatusSubmitButton(false));\r\n            });\r\n    }, [\r\n        dispatch,\r\n        isEditingAddress,\r\n        addressFormValue,\r\n        checkout.payload.isBusinessCustomer,\r\n    ]);\r\n\r\n    // Scroll the the first field that has validation error when saving the form.\r\n    useEffect(() => {\r\n        if (checkout.result && checkout.result.redirectUrl) {\r\n            window.location = checkout.result.redirectUrl;\r\n            return;\r\n        }\r\n\r\n        if (!checkout.errors) {\r\n            return;\r\n        }\r\n\r\n        const errorKeys = Object.keys(checkout.errors);\r\n        if (!errorKeys || errorKeys.length < 1) {\r\n            return;\r\n        }\r\n\r\n        const errorNode = document.querySelector(\r\n            `[data-error-for=\"${errorKeys[0]}\"]`\r\n        );\r\n        if (!errorNode) {\r\n            return;\r\n        }\r\n\r\n        const inputNode = errorNode.parentElement.querySelector('input');\r\n        if (inputNode) {\r\n            setTimeout(() => inputNode.focus(), 1000);\r\n            inputNode.scrollIntoView({ behavior: 'smooth' });\r\n        } else {\r\n            errorNode.scrollIntoView({ behavior: 'smooth' });\r\n        }\r\n    }, [checkout.result, checkout.errors]);\r\n\r\n    if (!cart || !cart.orderRows || cart.orderRows.length < 1) {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"small-12\">\r\n                    <h2 className=\"checkout__title\">\r\n                        {translate(`checkout.cart.empty`)}\r\n                    </h2>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const { payload, errors = {} } = checkout,\r\n        {\r\n            paymentWidget,\r\n            authenticated,\r\n            isBusinessCustomer,\r\n            checkoutMode,\r\n        } = payload;\r\n    const responseString = paymentWidget ? paymentWidget.responseString : null;\r\n    const updateKey = paymentWidget ? paymentWidget._force_update : null;\r\n    return (\r\n        <Fragment>\r\n            <CheckoutCart errors={errors} />\r\n            <CheckoutDiscountCodes />\r\n\r\n            {shippingOptionVisibility && (\r\n                <CheckoutDeliveryMethods errors={errors} />\r\n            )}\r\n\r\n            {paymentOptionVisibility && (\r\n                <CheckoutPaymentMethods errors={errors} />\r\n            )}\r\n\r\n            {customerDetailsVisibility && (\r\n                <CheckoutCustomerInfo\r\n                    checkout={checkout}\r\n                    addressFormValue={addressFormValue}\r\n                    isEditingAddress={isEditingAddress}\r\n                    setAddressFormValue={setAddressFormValue}\r\n                    setIsEditingAddress={setIsEditingAddress}\r\n                    signUpCheckboxVisibility={signUpCheckboxVisibility}\r\n                />\r\n            )}\r\n\r\n            {paymentWidget && paymentWidgetVisibility && (\r\n                <PaymentWidget\r\n                    key={updateKey}\r\n                    responseString={responseString}\r\n                />\r\n            )}\r\n\r\n            {orderSummaryVisibility && (\r\n                <Fragment>\r\n                    <div className=\"row\">\r\n                        <h3 className=\"checkout__section-title\">\r\n                            {translate('checkout.order.title')}\r\n                        </h3>\r\n                    </div>\r\n\r\n                    <section className=\"row checkout-info__container checkout-info__summary\">\r\n                        <CheckoutOrderNote />\r\n                        <CheckoutOrderInfo />\r\n                    </section>\r\n\r\n                    <div className=\"row\">\r\n                        <input\r\n                            className=\"checkout-info__checkbox-input\"\r\n                            type=\"checkbox\"\r\n                            id=\"acceptTermsOfCondition\"\r\n                            checked={payload.acceptTermsOfCondition}\r\n                            onChange={(event) =>\r\n                                dispatch(\r\n                                    acceptTermsOfCondition(event.target.checked)\r\n                                )\r\n                            }\r\n                        />\r\n                        <label\r\n                            className=\"checkout-info__checkbox-label\"\r\n                            htmlFor=\"acceptTermsOfCondition\"\r\n                        >\r\n                            {translate('checkout.terms.acceptTermsOfCondition')}{' '}\r\n                            <a\r\n                                className=\"checkout__link\"\r\n                                href={payload.termsUrl}\r\n                                target=\"_blank\"\r\n                                rel=\"noreferrer\"\r\n                            >\r\n                                {translate('checkout.terms.link')}\r\n                            </a>\r\n                        </label>\r\n                        {errors['acceptTermsOfCondition'] && (\r\n                            <span\r\n                                className=\"form__validator--error form__validator--top-narrow\"\r\n                                data-error-for=\"acceptTermsOfCondition\"\r\n                            >\r\n                                {errors['acceptTermsOfCondition'][0]}\r\n                            </span>\r\n                        )}\r\n                    </div>\r\n\r\n                    <div className=\"row checkout__submit\">\r\n                        {!authenticated &&\r\n                        (isBusinessCustomer ||\r\n                            checkoutMode ===\r\n                                constants.checkoutMode.companyCustomers) ? (\r\n                            <Button\r\n                                onClick={() =>\r\n                                    (location.href = payload.loginUrl)\r\n                                }\r\n                                title={translate(\r\n                                    'checkout.login.to.placeorder'\r\n                                )}\r\n                                fluid={true}\r\n                            />\r\n                        ) : (\r\n                            <Button\r\n                                disabled={!checkout.enableConfirmButton}\r\n                                onClick={placeOrder}\r\n                                title={translate('checkout.placeorder')}\r\n                                fluid={true}\r\n                                type=\"submit\"\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </Fragment>\r\n            )}\r\n\r\n            <div className=\"row\">\r\n                {errors && errors['general'] && (\r\n                    <p className=\"checkout__validator--error\">\r\n                        {errors['general'][0]}\r\n                    </p>\r\n                )}\r\n                {errors && errors['payment'] && (\r\n                    <p className=\"checkout__validator--error\">\r\n                        {errors['payment'][0]}\r\n                    </p>\r\n                )}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Checkout;\r\n","'use strict';\nvar $ = require('../internals/export');\nvar IS_PURE = require('../internals/is-pure');\nvar NativePromise = require('../internals/native-promise-constructor');\nvar fails = require('../internals/fails');\nvar getBuiltIn = require('../internals/get-built-in');\nvar speciesConstructor = require('../internals/species-constructor');\nvar promiseResolve = require('../internals/promise-resolve');\nvar redefine = require('../internals/redefine');\n\n// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829\nvar NON_GENERIC = !!NativePromise && fails(function () {\n  NativePromise.prototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });\n});\n\n// `Promise.prototype.finally` method\n// https://tc39.es/ecma262/#sec-promise.prototype.finally\n$({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {\n  'finally': function (onFinally) {\n    var C = speciesConstructor(this, getBuiltIn('Promise'));\n    var isFunction = typeof onFinally == 'function';\n    return this.then(\n      isFunction ? function (x) {\n        return promiseResolve(C, onFinally()).then(function () { return x; });\n      } : onFinally,\n      isFunction ? function (e) {\n        return promiseResolve(C, onFinally()).then(function () { throw e; });\n      } : onFinally\n    );\n  }\n});\n\n// patch native Promise.prototype for native async functions\nif (!IS_PURE && typeof NativePromise == 'function' && !NativePromise.prototype['finally']) {\n  redefine(NativePromise.prototype, 'finally', getBuiltIn('Promise').prototype['finally']);\n}\n"],"sourceRoot":""}