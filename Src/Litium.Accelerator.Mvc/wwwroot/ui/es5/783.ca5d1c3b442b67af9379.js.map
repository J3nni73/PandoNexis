{"version":3,"sources":["webpack:///./Scripts/Actions/Person.action.js","webpack:///./Scripts/Components/PersonList.js","webpack:///./Scripts/Components/PersonForm.js","webpack:///./Scripts/Components/PersonListContainer.js"],"names":["rootRoute","changeMode","mode","type","PERSON_CHANGE_MODE","payload","query","ViewMode","dispatch","get","then","response","json","result","receive","catch","ex","catchError","error","setError","list","PERSON_RECEIVE","PERSON_ERROR","onEdit","useDispatch","persons","useSelector","state","myPage","useState","removingRow","setRemovingRow","onRemoveRequest","rowSystemId","showDeleteButton","previousState","className","translate","map","person","key","systemId","firstName","lastName","email","phone","role","editable","Fragment","onClick","title","personSystemId","httpRemove","personSchema","object","shape","string","required","inputPerson","onDismiss","errors","setPerson","useEffect","onChange","propName","value","prevState","htmlFor","id","name","autoComplete","event","target","constants","checked","validate","put","edit","post","add","showForm","useCallback","showList"],"mappings":"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","file":"783.ca5d1c3b442b67af9379.js","sourcesContent":["import { ViewMode } from '../constants';\r\nimport { get, post, put, remove as httpRemove } from '../Services/http';\r\nimport { catchError } from './Error.action';\r\nimport { PERSON_RECEIVE, PERSON_ERROR, PERSON_CHANGE_MODE } from '../constants';\r\n\r\nconst rootRoute = '/api/mypageperson';\r\n\r\nexport const changeMode = (mode) => ({\r\n    type: PERSON_CHANGE_MODE,\r\n    payload: {\r\n        mode,\r\n    },\r\n});\r\n\r\nexport const query = (mode = ViewMode.List) => (dispatch) => {\r\n    return get(rootRoute)\r\n        .then((response) => response.json())\r\n        .then((result) => {\r\n            dispatch(receive(result, mode));\r\n        })\r\n        .catch((ex) => dispatch(catchError(ex, (error) => setError(error))));\r\n};\r\n\r\nexport const remove = (personSystemId) => (dispatch) =>\r\n    httpRemove(rootRoute, personSystemId)\r\n        .then(() => dispatch(query()))\r\n        .catch((ex) => dispatch(catchError(ex, (error) => setError(error))));\r\n\r\nexport const add = (person) => (dispatch) =>\r\n    post(rootRoute, person)\r\n        .then(() => dispatch(query()))\r\n        .catch((ex) => dispatch(catchError(ex, (error) => setError(error))));\r\n\r\nexport const edit = (person) => (dispatch) =>\r\n    put(rootRoute, person)\r\n        .then(() => dispatch(query()))\r\n        .catch((ex) => dispatch(catchError(ex, (error) => setError(error))));\r\n\r\nconst receive = (list, mode) => ({\r\n    type: PERSON_RECEIVE,\r\n    payload: {\r\n        list,\r\n        mode,\r\n    },\r\n});\r\n\r\nexport const setError = (error) => ({\r\n    type: PERSON_ERROR,\r\n    payload: {\r\n        error,\r\n    },\r\n});\r\n","import React, { Fragment, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { translate } from '../Services/translation';\r\nimport { remove } from '../Actions/Person.action';\r\n\r\nconst PersonList = ({ onEdit }) => {\r\n    const dispatch = useDispatch();\r\n    const persons = useSelector((state) => state.myPage.persons.list);\r\n\r\n    const [removingRow, setRemovingRow] = useState({});\r\n\r\n    const onRemoveRequest = (rowSystemId, showDeleteButton) => {\r\n        setRemovingRow((previousState) => {\r\n            return {\r\n                ...previousState,\r\n                [rowSystemId]: showDeleteButton,\r\n            };\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"simple-table\">\r\n            <div className=\"row medium-unstack no-margin simple-table__header\">\r\n                <div className=\"columns\">{translate('mypage.person.name')}</div>\r\n                <div className=\"columns\">\r\n                    {translate('mypage.person.email')}\r\n                </div>\r\n                <div className=\"columns\">\r\n                    {translate('mypage.person.phone')}\r\n                </div>\r\n                <div className=\"columns\">{translate('mypage.person.role')}</div>\r\n                <div className=\"columns medium-2 hide-for-small-only\"></div>\r\n            </div>\r\n\r\n            {persons &&\r\n                persons.map((person) => (\r\n                    <div\r\n                        className=\"row medium-unstack no-margin\"\r\n                        key={person.systemId}\r\n                    >\r\n                        <div className=\"columns\">\r\n                            {person.firstName} {person.lastName}\r\n                        </div>\r\n                        <div className=\"columns\">{person.email || ''}</div>\r\n                        <div className=\"columns\">{person.phone || ''}</div>\r\n                        <div className=\"columns\">{person.role}</div>\r\n                        <div className=\"columns medium-2\">\r\n                            {person.editable && (\r\n                                <Fragment>\r\n                                    <a\r\n                                        onClick={() => onEdit(person)}\r\n                                        className=\"table__icon table__icon--edit\"\r\n                                        title={translate('Edit')}\r\n                                    ></a>\r\n                                    {!removingRow[person.systemId] && (\r\n                                        <a\r\n                                            onClick={() =>\r\n                                                onRemoveRequest(\r\n                                                    person.systemId,\r\n                                                    true\r\n                                                )\r\n                                            }\r\n                                            className=\"table__icon table__icon--delete\"\r\n                                            title={translate('Remove')}\r\n                                        ></a>\r\n                                    )}\r\n                                    {removingRow[person.systemId] && (\r\n                                        <a\r\n                                            className=\"table__icon table__icon--accept\"\r\n                                            onClick={() =>\r\n                                                dispatch(\r\n                                                    remove(person.systemId)\r\n                                                )\r\n                                            }\r\n                                            title={translate('Accept')}\r\n                                        ></a>\r\n                                    )}\r\n                                    {removingRow[person.systemId] && (\r\n                                        <a\r\n                                            className=\"table__icon table__icon--cancel\"\r\n                                            onClick={() =>\r\n                                                onRemoveRequest(\r\n                                                    person.systemId,\r\n                                                    false\r\n                                                )\r\n                                            }\r\n                                            title={translate('Cancel')}\r\n                                        ></a>\r\n                                    )}\r\n                                </Fragment>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PersonList;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { string, object } from 'yup';\r\nimport { translate } from '../Services/translation';\r\nimport constants from '../constants';\r\nimport { add, edit, setError } from '../Actions/Person.action';\r\n\r\nconst personSchema = object().shape({\r\n    phone: string().required(translate(`validation.required`)),\r\n    email: string()\r\n        .required(translate(`validation.required`))\r\n        .email(translate(`validation.email`)),\r\n    lastName: string().required(translate(`validation.required`)),\r\n    firstName: string().required(translate(`validation.required`)),\r\n});\r\n\r\nconst PersonForm = ({ person: inputPerson, onDismiss }) => {\r\n    const dispatch = useDispatch();\r\n    const errors = useSelector((state) => state.myPage.persons.errors) || {};\r\n\r\n    const [person, setPerson] = useState(inputPerson);\r\n    useEffect(() => {\r\n        setPerson(inputPerson);\r\n    }, [setPerson, inputPerson]);\r\n\r\n    const onChange = (propName, value) => {\r\n        setPerson((prevState) => {\r\n            return {\r\n                ...prevState,\r\n                [propName]: value,\r\n            };\r\n        });\r\n    };\r\n\r\n    const onSubmit = () => {\r\n        if (!person || !person.editable) {\r\n            return;\r\n        }\r\n        personSchema\r\n            .validate(person)\r\n            .then(() => {\r\n                if (person.systemId) {\r\n                    dispatch(edit(person));\r\n                } else {\r\n                    dispatch(add(person));\r\n                }\r\n            })\r\n            .catch((error) => dispatch(setError(error)));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>\r\n                {translate(\r\n                    person.systemId\r\n                        ? 'mypage.person.edittitle'\r\n                        : 'mypage.person.addtitle'\r\n                )}\r\n            </h2>\r\n            <div className=\"row\">\r\n                <div className=\"columns small-12 medium-8\">\r\n                    <label className=\"form__label\" htmlFor=\"firstName\">\r\n                        {translate('mypage.person.firstname')}\r\n                    </label>\r\n                    <input\r\n                        className=\"form__input\"\r\n                        id=\"firstName\"\r\n                        name=\"firstName\"\r\n                        type=\"text\"\r\n                        autoComplete=\"given-name\"\r\n                        value={person.firstName || ''}\r\n                        onChange={(event) =>\r\n                            onChange('firstName', event.target.value)\r\n                        }\r\n                    />\r\n                    {errors['firstName'] && (\r\n                        <span className=\"form__validator--error form__validator--top-narrow\">\r\n                            {errors['firstName'][0]}\r\n                        </span>\r\n                    )}\r\n                </div>\r\n                <div className=\"columns small-12 medium-8\">\r\n                    <label className=\"form__label\" htmlFor=\"lastName\">\r\n                        {translate('mypage.person.lastname')}\r\n                    </label>\r\n                    <input\r\n                        className=\"form__input\"\r\n                        id=\"lastName\"\r\n                        name=\"lastName\"\r\n                        type=\"text\"\r\n                        autoComplete=\"family-name\"\r\n                        value={person.lastName || ''}\r\n                        onChange={(event) =>\r\n                            onChange('lastName', event.target.value)\r\n                        }\r\n                    />\r\n                    {errors['lastName'] && (\r\n                        <span className=\"form__validator--error form__validator--top-narrow\">\r\n                            {errors['lastName'][0]}\r\n                        </span>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"columns small-12 medium-8\">\r\n                    <label className=\"form__label\" htmlFor=\"email\">\r\n                        {translate('mypage.person.email')}\r\n                    </label>\r\n                    <input\r\n                        className=\"form__input\"\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        autoComplete=\"email\"\r\n                        value={person.email || ''}\r\n                        onChange={(event) =>\r\n                            onChange('email', event.target.value)\r\n                        }\r\n                    />\r\n                    {errors['email'] && (\r\n                        <span className=\"form__validator--error form__validator--top-narrow\">\r\n                            {errors['email'][0]}\r\n                        </span>\r\n                    )}\r\n                </div>\r\n                <div className=\"columns small-12 medium-8\">\r\n                    <label className=\"form__label\" htmlFor=\"phone\">\r\n                        {translate('mypage.person.phone')}\r\n                    </label>\r\n                    <input\r\n                        className=\"form__input\"\r\n                        id=\"phone\"\r\n                        name=\"phone\"\r\n                        type=\"tel\"\r\n                        autoComplete=\"tel\"\r\n                        value={person.phone || ''}\r\n                        onChange={(event) =>\r\n                            onChange('phone', event.target.value)\r\n                        }\r\n                    />\r\n                    {errors['phone'] && (\r\n                        <span className=\"form__validator--error form__validator--top-narrow\">\r\n                            {errors['phone'][0]}\r\n                        </span>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"columns small-12 medium-8\">\r\n                    <label className=\"form__control\">\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"role\"\r\n                            className=\"form__radio\"\r\n                            value={constants.role.approver}\r\n                            checked={person.role === constants.role.approver}\r\n                            onChange={(event) =>\r\n                                onChange('role', event.target.value)\r\n                            }\r\n                        />\r\n                        {translate('mypage.person.role.approver')}\r\n                    </label>\r\n                </div>\r\n                <div className=\"columns small-12 medium-8\">\r\n                    <label className=\"form__control\">\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"role\"\r\n                            className=\"form__radio\"\r\n                            value={constants.role.buyer}\r\n                            checked={person.role === constants.role.buyer}\r\n                            onChange={(event) =>\r\n                                onChange('role', event.target.value)\r\n                            }\r\n                        />\r\n                        {translate('mypage.person.role.buyer')}\r\n                    </label>\r\n                </div>\r\n            </div>\r\n\r\n            {errors['general'] && <div>{errors['general'][0]}</div>}\r\n            <button className=\"form__button\" onClick={onDismiss}>\r\n                {translate('general.cancel')}\r\n            </button>\r\n            <span className=\"form__space\"></span>\r\n            <button className=\"form__button\" onClick={onSubmit}>\r\n                {translate('general.save')}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PersonForm;\r\n","import React, { Fragment, useEffect, useState, useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PersonList from './PersonList';\r\nimport PersonForm from './PersonForm';\r\nimport { query, changeMode } from '../Actions/Person.action';\r\nimport { translate } from '../Services/translation';\r\nimport constants, { ViewMode } from '../constants';\r\n\r\nconst PersonListContainer = () => {\r\n    const mode = useSelector((state) => state.myPage.persons.mode);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(query());\r\n    }, [dispatch]);\r\n\r\n    const [person, setPerson] = useState({});\r\n\r\n    const showForm = useCallback(\r\n        (person) => {\r\n            setPerson(person);\r\n            dispatch(changeMode(ViewMode.Edit));\r\n        },\r\n        [setPerson, dispatch]\r\n    );\r\n\r\n    const showList = useCallback(() => {\r\n        setPerson({});\r\n        dispatch(changeMode(ViewMode.List));\r\n    }, [setPerson, dispatch]);\r\n\r\n    return (\r\n        <Fragment>\r\n            {mode !== ViewMode.List && (\r\n                <PersonForm person={person} onDismiss={showList} />\r\n            )}\r\n            {mode === ViewMode.List && (\r\n                <Fragment>\r\n                    <h2>{translate('mypage.person.title')}</h2>\r\n                    <p>\r\n                        <b>{translate('mypage.person.subtitle')}</b>\r\n                    </p>\r\n                    <button\r\n                        className=\"form__button\"\r\n                        onClick={() =>\r\n                            showForm({\r\n                                role: constants.role.approver,\r\n                                editable: true,\r\n                            })\r\n                        }\r\n                    >\r\n                        {translate('mypage.person.add')}\r\n                    </button>\r\n                    <PersonList onEdit={showForm} />\r\n                </Fragment>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default PersonListContainer;\r\n"],"sourceRoot":""}