{"version":3,"sources":["webpack:///./Scripts/Actions/Address.action.js","webpack:///./Scripts/Components/AddressList.js","webpack:///./Scripts/Components/AddressForm.js","webpack:///./Scripts/Components/AddressListContainer.js"],"names":["rootRoute","changeMode","mode","type","ADDRESS_CHANGE_MODE","payload","query","ViewMode","dispatch","get","then","response","json","result","receive","catch","ex","catchError","error","setError","list","ADDRESS_RECEIVE","ADDRESS_ERROR","onEdit","useDispatch","addresses","useSelector","state","myPage","useState","removingRow","setRemovingRow","onRemoveRequest","rowSystemId","showDeleteButton","previousState","className","translate","map","address","key","systemId","zipCode","city","onClick","title","addressSystemId","httpRemove","addressSchema","object","shape","phoneNumber","string","required","country","address2","nullable","onDismiss","errors","thisAddress","setThisAddress","useEffect","onChange","propName","value","prevState","htmlFor","id","name","autoComplete","event","target","constants","text","validate","put","edit","post","add","setAddress","showForm","useCallback","showList","Fragment"],"mappings":"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","file":"41.13baaa2adaeabb1a4a79.js","sourcesContent":["import { ViewMode } from '../constants';\r\nimport { get, post, put, remove as httpRemove } from '../Services/http';\r\nimport { catchError } from './Error.action';\r\nimport {\r\n    ADDRESS_CHANGE_MODE,\r\n    ADDRESS_RECEIVE,\r\n    ADDRESS_ERROR,\r\n} from '../constants';\r\nconst rootRoute = '/api/mypageaddress';\r\n\r\nexport const changeMode = (mode) => ({\r\n    type: ADDRESS_CHANGE_MODE,\r\n    payload: {\r\n        mode,\r\n    },\r\n});\r\n\r\nexport const query = (mode = ViewMode.List) => (dispatch) => {\r\n    return get(rootRoute)\r\n        .then((response) => response.json())\r\n        .then((result) => {\r\n            dispatch(receive(result, mode));\r\n        })\r\n        .catch((ex) => dispatch(catchError(ex, (error) => setError(error))));\r\n};\r\n\r\nexport const remove = (addressSystemId) => (dispatch) =>\r\n    httpRemove(rootRoute, addressSystemId)\r\n        .then(() => dispatch(query()))\r\n        .catch((ex) => dispatch(catchError(ex, (error) => setError(error))));\r\n\r\nexport const add = (address) => (dispatch) =>\r\n    post(rootRoute, address)\r\n        .then(() => dispatch(query()))\r\n        .catch((ex) => dispatch(catchError(ex, (error) => setError(error))));\r\n\r\nexport const edit = (address) => (dispatch) =>\r\n    put(rootRoute, address)\r\n        .then(() => dispatch(query()))\r\n        .catch((ex) => dispatch(catchError(ex, (error) => setError(error))));\r\n\r\nconst receive = (list, mode) => ({\r\n    type: ADDRESS_RECEIVE,\r\n    payload: {\r\n        list,\r\n        mode,\r\n    },\r\n});\r\n\r\nexport const setError = (error) => ({\r\n    type: ADDRESS_ERROR,\r\n    payload: {\r\n        error,\r\n    },\r\n});\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { translate } from '../Services/translation';\r\nimport { remove } from '../Actions/Address.action';\r\n\r\nconst AddressList = ({ onEdit }) => {\r\n    const dispatch = useDispatch();\r\n    const addresses = useSelector((state) => state.myPage.addresses.list);\r\n\r\n    const [removingRow, setRemovingRow] = useState({});\r\n\r\n    const onRemoveRequest = (rowSystemId, showDeleteButton) => {\r\n        setRemovingRow((previousState) => {\r\n            return {\r\n                ...previousState,\r\n                [rowSystemId]: showDeleteButton,\r\n            };\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"simple-table\">\r\n            <div className=\"row medium-unstack no-margin simple-table__header\">\r\n                <div className=\"columns\">\r\n                    {translate('mypage.address.address')}\r\n                </div>\r\n                <div className=\"columns\">\r\n                    {translate('mypage.address.postnumber')}\r\n                </div>\r\n                <div className=\"columns\">\r\n                    {translate('mypage.address.city')}\r\n                </div>\r\n                <div className=\"columns medium-2 hide-for-small-only\"></div>\r\n            </div>\r\n\r\n            {addresses &&\r\n                addresses.map((address) => (\r\n                    <div\r\n                        className=\"row medium-unstack no-margin\"\r\n                        key={`${address.systemId}`}\r\n                    >\r\n                        <div className=\"columns\">{address.address}</div>\r\n                        <div className=\"columns\">{address.zipCode}</div>\r\n                        <div className=\"columns\">{address.city}</div>\r\n                        <div className=\"columns medium-2\">\r\n                            <a\r\n                                className=\"table__icon table__icon--edit\"\r\n                                onClick={() => onEdit(address)}\r\n                                title={translate('Edit')}\r\n                            ></a>\r\n                            {!removingRow[address.systemId] && (\r\n                                <a\r\n                                    className=\"table__icon table__icon--delete\"\r\n                                    onClick={() =>\r\n                                        onRemoveRequest(address.systemId, true)\r\n                                    }\r\n                                    title={translate('Remove')}\r\n                                ></a>\r\n                            )}\r\n                            {removingRow[address.systemId] && (\r\n                                <a\r\n                                    className=\"table__icon table__icon--accept\"\r\n                                    onClick={() =>\r\n                                        dispatch(remove(address.systemId))\r\n                                    }\r\n                                    title={translate('Accept')}\r\n                                ></a>\r\n                            )}\r\n                            {removingRow[address.systemId] && (\r\n                                <a\r\n                                    className=\"table__icon table__icon--cancel\"\r\n                                    onClick={() =>\r\n                                        onRemoveRequest(address.systemId, false)\r\n                                    }\r\n                                    title={translate('Cancel')}\r\n                                ></a>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddressList;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { string, object } from 'yup';\r\nimport { translate } from '../Services/translation';\r\nimport constants from '../constants';\r\nimport { add, edit, setError } from '../Actions/Address.action';\r\n\r\nconst addressSchema = object().shape({\r\n    phoneNumber: string().required(translate(`validation.required`)),\r\n    country: string().required(translate(`validation.required`)),\r\n    city: string().required(translate(`validation.required`)),\r\n    zipCode: string().required(translate(`validation.required`)),\r\n    address2: string().nullable(),\r\n    address: string().required(translate(`validation.required`)),\r\n});\r\n\r\nconst AddressForm = ({ address, onDismiss }) => {\r\n    const dispatch = useDispatch();\r\n    const errors = useSelector((state) => state.myPage.addresses.errors) || {};\r\n\r\n    const [thisAddress, setThisAddress] = useState(address);\r\n    useEffect(() => {\r\n        setThisAddress(address);\r\n    }, [setThisAddress, address]);\r\n\r\n    const onChange = (propName, value) => {\r\n        setThisAddress((prevState) => {\r\n            return {\r\n                ...prevState,\r\n                [propName]: value,\r\n            };\r\n        });\r\n    };\r\n\r\n    const onSubmit = () => {\r\n        addressSchema\r\n            .validate(thisAddress)\r\n            .then(() => {\r\n                if (thisAddress.systemId) {\r\n                    dispatch(edit(thisAddress));\r\n                } else {\r\n                    dispatch(add(thisAddress));\r\n                }\r\n            })\r\n            .catch((error) => dispatch(setError(error)));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>\r\n                {translate(\r\n                    address.systemId\r\n                        ? 'mypage.address.edittitle'\r\n                        : 'mypage.address.addtitle'\r\n                )}\r\n            </h2>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"columns small-12 medium-8\">\r\n                    <label className=\"form__label\" htmlFor=\"address\">\r\n                        {translate('mypage.address.address')}\r\n                    </label>\r\n                    <input\r\n                        className=\"form__input\"\r\n                        id=\"address\"\r\n                        name=\"address\"\r\n                        type=\"text\"\r\n                        autoComplete=\"address-line1\"\r\n                        value={thisAddress.address || ''}\r\n                        onChange={(event) =>\r\n                            onChange('address', event.target.value)\r\n                        }\r\n                    />\r\n                    {errors['address'] && (\r\n                        <span className=\"form__validator--error form__validator--top-narrow\">\r\n                            {errors['address'][0]}\r\n                        </span>\r\n                    )}\r\n\r\n                    <input\r\n                        className=\"form__input\"\r\n                        id=\"address2\"\r\n                        name=\"address2\"\r\n                        type=\"text\"\r\n                        autoComplete=\"address-line2\"\r\n                        value={thisAddress.address2 || ''}\r\n                        onChange={(event) =>\r\n                            onChange('address2', event.target.value)\r\n                        }\r\n                    />\r\n                    {errors['address2'] && (\r\n                        <span className=\"form__validator--error form__validator--top-narrow\">\r\n                            {errors['address2'][0]}\r\n                        </span>\r\n                    )}\r\n                </div>\r\n\r\n                <div className=\"columns small-12 medium-8\">\r\n                    <label className=\"form__label\" htmlFor=\"zipCode\">\r\n                        {translate('mypage.address.postnumber')}\r\n                    </label>\r\n                    <input\r\n                        className=\"form__input\"\r\n                        id=\"zipCode\"\r\n                        name=\"zipCode\"\r\n                        type=\"text\"\r\n                        autoComplete=\"postal-code\"\r\n                        value={thisAddress.zipCode || ''}\r\n                        onChange={(event) =>\r\n                            onChange('zipCode', event.target.value)\r\n                        }\r\n                    />\r\n                    {errors['zipCode'] && (\r\n                        <span className=\"form__validator--error form__validator--top-narrow\">\r\n                            {errors['zipCode'][0]}\r\n                        </span>\r\n                    )}\r\n                </div>\r\n\r\n                <div className=\"columns small-12 medium-8\">\r\n                    <label className=\"form__label\" htmlFor=\"city\">\r\n                        {translate('mypage.address.city')}\r\n                    </label>\r\n                    <input\r\n                        className=\"form__input\"\r\n                        id=\"city\"\r\n                        name=\"city\"\r\n                        type=\"text\"\r\n                        autoComplete=\"on\"\r\n                        value={thisAddress.city || ''}\r\n                        onChange={(event) =>\r\n                            onChange('city', event.target.value)\r\n                        }\r\n                    />\r\n                    {errors['city'] && (\r\n                        <span className=\"form__validator--error form__validator--top-narrow\">\r\n                            {errors['city'][0]}\r\n                        </span>\r\n                    )}\r\n                </div>\r\n\r\n                <div className=\"columns small-12 medium-8\">\r\n                    <label className=\"form__label\" htmlFor=\"country\">\r\n                        {translate('mypage.address.country')}\r\n                    </label>\r\n                    <select\r\n                        className=\"form__input\"\r\n                        autoComplete=\"country-name\"\r\n                        value={thisAddress.country || ''}\r\n                        onChange={(event) =>\r\n                            onChange('country', event.target.value)\r\n                        }\r\n                    >\r\n                        {constants.countries.map((country) => (\r\n                            <option key={country.value} value={country.value}>\r\n                                {country.text}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    {errors['country'] && (\r\n                        <span className=\"form__validator--error form__validator--top-narrow\">\r\n                            {errors['country'][0]}\r\n                        </span>\r\n                    )}\r\n                </div>\r\n\r\n                <div className=\"columns small-12 medium-8\">\r\n                    <label className=\"form__label\" htmlFor=\"phoneNumber\">\r\n                        {translate('mypage.address.phonenumber')}\r\n                    </label>\r\n                    <input\r\n                        className=\"form__input\"\r\n                        id=\"phoneNumber\"\r\n                        name=\"phoneNumber\"\r\n                        type=\"tel\"\r\n                        autoComplete=\"tel\"\r\n                        value={thisAddress.phoneNumber || ''}\r\n                        onChange={(event) =>\r\n                            onChange('phoneNumber', event.target.value)\r\n                        }\r\n                    />\r\n                    {errors['phoneNumber'] && (\r\n                        <span className=\"form__validator--error form__validator--top-narrow\">\r\n                            {errors['phoneNumber'][0]}\r\n                        </span>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {errors['general'] && <div>{errors['general'][0]}</div>}\r\n            <button className=\"form__button\" onClick={onDismiss}>\r\n                {translate('general.cancel')}\r\n            </button>\r\n            <span className=\"form__space\"></span>\r\n            <button className=\"form__button\" onClick={onSubmit}>\r\n                {translate('general.save')}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddressForm;\r\n","import React, { Fragment, useEffect, useState, useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport AddressList from './AddressList';\r\nimport AddressForm from './AddressForm';\r\nimport { query, changeMode } from '../Actions/Address.action';\r\nimport { translate } from '../Services/translation';\r\nimport constants, { ViewMode } from '../constants';\r\n\r\nconst AddressListContainer = () => {\r\n    const mode = useSelector((state) => state.myPage.addresses.mode);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(query());\r\n    }, [dispatch]);\r\n\r\n    const [address, setAddress] = useState({});\r\n\r\n    const showForm = useCallback(\r\n        (address) => {\r\n            setAddress(address);\r\n            dispatch(changeMode(ViewMode.Edit));\r\n        },\r\n        [setAddress, dispatch]\r\n    );\r\n\r\n    const showList = useCallback(() => {\r\n        setAddress({});\r\n        dispatch(changeMode(ViewMode.List));\r\n    }, [setAddress, dispatch]);\r\n\r\n    return (\r\n        <Fragment>\r\n            {mode !== ViewMode.List && (\r\n                <AddressForm address={address} onDismiss={showList} />\r\n            )}\r\n            {mode === ViewMode.List && (\r\n                <Fragment>\r\n                    <h2>{translate('mypage.address.title')}</h2>\r\n                    <p>\r\n                        <b>{translate('mypage.address.subtitle')}</b>\r\n                    </p>\r\n                    <button\r\n                        className=\"form__button\"\r\n                        onClick={() =>\r\n                            showForm({ country: constants.countries[0].value })\r\n                        }\r\n                    >\r\n                        {translate('mypage.address.add')}\r\n                    </button>\r\n                    <AddressList onEdit={showForm} />\r\n                </Fragment>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default AddressListContainer;\r\n"],"sourceRoot":""}