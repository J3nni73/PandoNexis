{"version":3,"sources":["webpack:///./Scripts/Actions/Checkout.action.js","webpack:///./Scripts/Components/Button.js","webpack:///./Scripts/Components/Cart.js","webpack:///./Scripts/Components/Checkout.Cart.js","webpack:///./Scripts/Components/InputField.js","webpack:///./Scripts/Components/InfoField.js","webpack:///./Scripts/Components/Checkout.BusinessCustomerInfo.js","webpack:///./Scripts/Components/Checkout.PrivateCustomerInfo.js","webpack:///./Scripts/Components/Checkout.ValidationSchema.js","webpack:///./Scripts/Components/Checkout.CustomerInfo.js","webpack:///./Scripts/Components/Checkout.DeliveryMethods.js","webpack:///./Scripts/Components/Checkout.DiscountCodes.js","webpack:///./Scripts/Components/Checkout.OrderInfo.js","webpack:///./Scripts/Components/Checkout.OrderNote.js","webpack:///./Scripts/Components/Checkout.PaymentMethods.js","webpack:///./Scripts/Components/Payments/PaymentWidget.js","webpack:///./Scripts/Components/Checkout.js"],"names":["setBusinessCustomer","isBusinessCustomer","type","CHECKOUT_SET_PRIVATE_CUSTOMER","payload","updateCustomerDetails","key","data","CHECKOUT_UPDATE_CUSTOMER_INFO","setDelivery","method","dispatch","getState","CHECKOUT_SET_DELIVERY","selectedDeliveryMethod","checkout","put","then","response","json","result","loadCart","paymentWidget","setPaymentWidget","catch","ex","catchError","error","submitError","setCountry","systemId","CHECKOUT_SET_COUNTRY","selectedCountry","deliveryMethods","CHECKOUT_SET_PAYMENT","paymentMethods","selectedPaymentMethod","setPayment","modelState","payment","reloadPayment","CHECKOUT_SET_PAYMENT_WIDGET","setDiscountCode","discountCode","CHECKOUT_SET_DISCOUNT_CODE","setUsedDiscountCodes","usedDiscountCodes","CHECKOUT_SET_USED_DISCOUNT_CODE","_submit","url","model","post","submitDone","setStatusSubmitButton","CHECKOUT_SUBMIT","CHECKOUT_SUBMIT_ERROR","value","CHECKOUT_SET_STATUS_SUBMIT_BUTTON","enableConfirmButton","setValidateStatus","isValidating","CHECKOUT_VALIDATE_ADDRESS","onClick","title","disabled","fluid","rounded","isLink","getClassNames","useCallback","classes","push","join","className","mapCartToAbort","quantityDispatch","debounce","articleNumber","quantity","AbortController","update","loadError","useDispatch","removingRow","setRemovingRow","useState","cart","useSelector","state","orderRows","setOrderRows","discountRows","useEffect","removeOrderRow","handleQuantityInput","rowSystemId","ensureCorrectness","floatQuantity","parseFloat","validValue","isNaN","index","findIndex","item","abort","cancel","tempOrderRows","ProductImage","order","src","image","alt","name","ProductName","Fragment","href","brand","ProductPrice","isFreeGift","campaignPrice","price","ProductQuantity","min","maxLength","toString","onChange","event","target","onBlur","ProductTotalPrice","totalCampaignPrice","totalPrice","RemoveBtn","translate","CartTotal","orderTotal","map","errors","cssClass","id","autoComplete","placeholder","label","htmlFor","data-error-for","values","idx","getCountry","address","addressCountry","constants","country","text","onSave","onCompanyAddressChange","valueForm","isEditingAddress","companyAddresses","companyName","authenticated","input","stateKey","toLowerCase","selectedAddress","useMemo","selectedCompanyAddressId","find","zipCode","city","signUpCheckboxVisibility","signUp","customerDetails","alternativeAddress","checked","showAlternativeAddress","CHECKOUT_SET_SHOW_ALTERNATIVE_ADDRESS","CHECKOUT_SET_SIGN_UP","setSignUp","privateCustomerAdditionalDetailsSchema","object","shape","acceptTermsOfCondition","boolean","required","oneOf","privateCustomerAddressSchema","email","string","phoneNumber","mixed","notOneOf","lastName","firstName","privateCustomerAlternativeAddressSchema","businessCustomerDetailsSchema","businessCustomerAdditionalDetailsSchema","validateAlternativeAddress","validateCustomerInfo","validate","addressPath","addressFormValue","setAddressFormValue","setIsEditingAddress","loginUrl","checkoutMode","onCustomerInfoChange","previousState","companyAddressId","onEditForm","onUpdateCustomerDetails","notCustomerDetailFields","CLEAR_ERROR","updatedData","CHECKOUT_SET_SELECTED_COMPANY_ADDRESS","setSelectedCompanyAddress","companyAddress","c","path","indexOf","finally","privateCustomerInfoComponent","businessCustomerInfoComponent","length","formattedPrice","discountCodeEl","useRef","current","ref","remove","deleteDiscountCode","discount","deliveryCost","paymentCost","grandTotal","vat","orderNote","CHECKOUT_SET_ORDER_NOTE","setOrderNote","scriptPattern","scriptFilePattern","extractScripts","domString","matches","html","scripts","scriptFiles","exec","replace","trim","executeScript","domId","scriptContent","script","document","createElement","appendChild","createTextNode","e","getElementById","includeScript","srciptUrl","React","responseString","paymentSession","WidgetCheckout","DynamicComponent","loader","args","renderWidget","shippingOptionVisibility","setShippingOptionVisibility","paymentOptionVisibility","setPaymentOptionVisibility","customerDetailsVisibility","setCustomerDetailsVisibility","deliveryWidgetVisibility","setDeliveryWidgetVisibility","paymentWidgetVisibility","setPaymentWidgetVisibility","orderSummaryVisibility","setOrderSummaryVisibility","setSignUpCheckboxVisibility","onSubmit","onSubmitError","placeOrder","onError","resetVisibilityValues","checkIntegrationTypeExist","integrationTypeCheck","integrationType","firstRender","PaymentIntegrationType","ShippingIntegrationType","redirectUrl","window","location","errorKeys","Object","keys","errorNode","querySelector","inputNode","parentElement","setTimeout","focus","scrollIntoView","behavior","updateKey","_force_update","CHECKOUT_ACCEPT_TERMS_OF_CONDITION","termsUrl","rel"],"mappings":"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","file":"644.911618676702ed01615e.js","sourcesContent":["import { post, put, remove } from '../Services/http';\r\nimport { load as loadCart } from './Cart.action';\r\nimport { catchError } from './Error.action';\r\n\r\nimport {\r\n    CHECKOUT_SET_SELECTED_COMPANY_ADDRESS,\r\n    CHECKOUT_SET_PRIVATE_CUSTOMER,\r\n    CHECKOUT_SET_SIGN_UP,\r\n    CHECKOUT_SET_DELIVERY,\r\n    CHECKOUT_SET_COUNTRY,\r\n    CHECKOUT_SET_PAYMENT,\r\n    CHECKOUT_SET_DISCOUNT_CODE,\r\n    CHECKOUT_SET_ORDER_NOTE,\r\n    CHECKOUT_ACCEPT_TERMS_OF_CONDITION,\r\n    CHECKOUT_SUBMIT,\r\n    CHECKOUT_SUBMIT_ERROR,\r\n    CHECKOUT_SET_PAYMENT_WIDGET,\r\n    CHECKOUT_SET_USED_DISCOUNT_CODE,\r\n    CHECKOUT_UPDATE_CUSTOMER_INFO,\r\n    CHECKOUT_SET_SHOW_ALTERNATIVE_ADDRESS,\r\n    CLEAR_ERROR,\r\n    CHECKOUT_SET_STATUS_SUBMIT_BUTTON,\r\n    CHECKOUT_VALIDATE_ADDRESS,\r\n} from '../constants';\r\n\r\nexport const setBusinessCustomer = (isBusinessCustomer) => ({\r\n    type: CHECKOUT_SET_PRIVATE_CUSTOMER,\r\n    payload: {\r\n        isBusinessCustomer,\r\n    },\r\n});\r\n\r\nexport const setSignUp = (signUp) => ({\r\n    type: CHECKOUT_SET_SIGN_UP,\r\n    payload: {\r\n        signUp,\r\n    },\r\n});\r\n\r\nexport const updateCustomerDetails = (key, data) => ({\r\n    type: CHECKOUT_UPDATE_CUSTOMER_INFO,\r\n    payload: {\r\n        key,\r\n        data,\r\n    },\r\n});\r\n\r\nexport const setSelectedCompanyAddress = (selectedCompanyAddressId) => ({\r\n    type: CHECKOUT_SET_SELECTED_COMPANY_ADDRESS,\r\n    payload: {\r\n        selectedCompanyAddressId,\r\n    },\r\n});\r\n\r\nexport const setDelivery = (method) => (dispatch, getState) => {\r\n    dispatch({\r\n        type: CHECKOUT_SET_DELIVERY,\r\n        payload: {\r\n            selectedDeliveryMethod: method,\r\n        },\r\n    });\r\n    const { payload } = getState().checkout;\r\n    return put('/api/checkout/setDeliveryProvider', payload)\r\n        .then((response) => response.json())\r\n        .then((result) => {\r\n            dispatch(loadCart());\r\n            if (result !== null && result.paymentWidget) {\r\n                dispatch(setPaymentWidget(result.paymentWidget));\r\n            }\r\n        })\r\n        .catch((ex) => dispatch(catchError(ex, (error) => submitError(error))));\r\n};\r\n\r\nexport const setCountry = (systemId) => (dispatch, getState) => {\r\n    dispatch({\r\n        type: CHECKOUT_SET_COUNTRY,\r\n        payload: {\r\n            selectedCountry: systemId,\r\n        },\r\n    });\r\n    const { payload } = getState().checkout;\r\n\r\n    // reset paymentWidget to null to avoid sending unnecessary request to payment provider\r\n    dispatch(setPaymentWidget(null));\r\n\r\n    return put('/api/checkout/setCountry', payload)\r\n        .then((response) => response.json())\r\n        .then((result) => {\r\n            dispatch(loadCart());\r\n            dispatch(setPaymentWidget(result.paymentWidget));\r\n            dispatch({\r\n                type: CHECKOUT_SET_DELIVERY,\r\n                payload: {\r\n                    deliveryMethods: result.deliveryMethods,\r\n                    selectedDeliveryMethod: result.selectedDeliveryMethod,\r\n                },\r\n            });\r\n            dispatch({\r\n                type: CHECKOUT_SET_PAYMENT,\r\n                payload: {\r\n                    paymentMethods: result.paymentMethods,\r\n                    selectedPaymentMethod: result.selectedPaymentMethod,\r\n                },\r\n            });\r\n        })\r\n        .catch((ex) => dispatch(catchError(ex, (error) => submitError(error))));\r\n};\r\n\r\nexport const setPayment = (method) => (dispatch, getState) => {\r\n    dispatch({\r\n        type: CHECKOUT_SET_PAYMENT,\r\n        payload: {\r\n            selectedPaymentMethod: method,\r\n        },\r\n    });\r\n\r\n    const { payload } = getState().checkout;\r\n    // reset paymentWidget to null to avoid sending unnecessary request to payment provider\r\n    dispatch(setPaymentWidget(null));\r\n    // reset payment error on the checkout\r\n    dispatch(\r\n        submitError({\r\n            modelState: {\r\n                payment: [],\r\n            },\r\n        })\r\n    );\r\n\r\n    return put('/api/checkout/setPaymentProvider', payload)\r\n        .then((response) => response.json())\r\n        .then((result) => {\r\n            dispatch(loadCart());\r\n            dispatch(setPaymentWidget(result.paymentWidget));\r\n        })\r\n        .catch((ex) => dispatch(catchError(ex, (error) => submitError(error))));\r\n};\r\n\r\nexport const reloadPayment = () => (dispatch, getState) => {\r\n    const { payload } = getState().checkout;\r\n    return put('/api/checkout/reloadPaymentWidget', payload)\r\n        .then((response) => response.json())\r\n        .then((result) => {\r\n            if (result && result.paymentWidget) {\r\n                dispatch(setPaymentWidget(result.paymentWidget));\r\n            }\r\n        })\r\n        .catch((ex) => dispatch(catchError(ex, (error) => submitError(error))));\r\n};\r\n\r\nconst setPaymentWidget = (paymentWidget) => ({\r\n    type: CHECKOUT_SET_PAYMENT_WIDGET,\r\n    payload: {\r\n        paymentWidget,\r\n    },\r\n});\r\n\r\nexport const setOrderNote = (orderNote) => ({\r\n    type: CHECKOUT_SET_ORDER_NOTE,\r\n    payload: {\r\n        orderNote,\r\n    },\r\n});\r\n\r\nexport const acceptTermsOfCondition = (acceptTermsOfCondition) => ({\r\n    type: CHECKOUT_ACCEPT_TERMS_OF_CONDITION,\r\n    payload: {\r\n        acceptTermsOfCondition,\r\n    },\r\n});\r\n\r\nexport const setDiscountCode = (discountCode) => ({\r\n    type: CHECKOUT_SET_DISCOUNT_CODE,\r\n    payload: {\r\n        discountCode,\r\n    },\r\n});\r\n\r\nexport const submitDiscountCode = () => (dispatch, getState) => {\r\n    const { payload } = getState().checkout;\r\n    return put('/api/checkout/setDiscountCode', payload)\r\n        .then((response) => response.json())\r\n        .then((result) => {\r\n            dispatch(setUsedDiscountCodes(result.usedDiscountCodes));\r\n            dispatch(loadCart());\r\n            dispatch(setPaymentWidget(result.paymentWidget));\r\n            // reset error of campaign code\r\n            dispatch(\r\n                submitError({\r\n                    modelState: {\r\n                        discountCode: [],\r\n                    },\r\n                })\r\n            );\r\n        })\r\n        .catch((ex) => {\r\n            dispatch(catchError(ex, (error) => submitError(error)));\r\n            // restore the initial cart\r\n            dispatch(loadCart());\r\n        });\r\n};\r\n\r\nexport const deleteDiscountCode = (discountCode) => (dispatch, getState) => {\r\n    const { payload } = getState().checkout;\r\n    payload.discountCode = discountCode;\r\n    return remove('/api/checkout/deleteDiscountCode', payload)\r\n        .then((response) => response.json())\r\n        .then((result) => {\r\n            dispatch(setUsedDiscountCodes(result.usedDiscountCodes));\r\n            dispatch(loadCart());\r\n            dispatch(setPaymentWidget(result.paymentWidget));\r\n            dispatch(setDiscountCode(''));\r\n            // reset error of campaign code\r\n            dispatch(\r\n                submitError({\r\n                    modelState: {\r\n                        discountCode: [],\r\n                    },\r\n                })\r\n            );\r\n        })\r\n        .catch((ex) => {\r\n            dispatch(catchError(ex, (error) => submitError(error)));\r\n            // restore the initial cart\r\n            dispatch(loadCart());\r\n        });\r\n};\r\n\r\nconst setUsedDiscountCodes = (usedDiscountCodes) => ({\r\n    type: CHECKOUT_SET_USED_DISCOUNT_CODE,\r\n    payload: {\r\n        usedDiscountCodes,\r\n    },\r\n});\r\n\r\nexport const submit = () => (dispatch, getState) => {\r\n    const { payload } = getState().checkout;\r\n    return _submit('/api/checkout', payload, dispatch);\r\n};\r\n\r\nconst _submit = (url, model, dispatch) => {\r\n    return post(url, model)\r\n        .then((response) => response.json())\r\n        .then((result) => {\r\n            dispatch(submitDone(result));\r\n        })\r\n        .catch((ex) => {\r\n            if (ex.response) {\r\n                ex.response.json().then((error) => {\r\n                    dispatch(submitError(error));\r\n                    dispatch(submitDone(null));\r\n                    // reload the cart, it might be changed after validation\r\n                    dispatch(loadCart());\r\n                });\r\n            } else {\r\n                dispatch(submitError(ex));\r\n            }\r\n            dispatch(setStatusSubmitButton(true));\r\n        });\r\n};\r\n\r\nexport const saveCustomerDetail = (data) => (dispatch, getState) => {\r\n    const { payload } = getState().checkout;\r\n    const updatedData = { ...payload, ...data };\r\n    return put('api/checkout/setCustomerDetail', updatedData)\r\n        .then((response) => response.json())\r\n        .then(() => dispatch(setStatusSubmitButton(true)))\r\n        .catch((ex) => {\r\n            if (ex.response) {\r\n                ex.response.json().then((error) => {\r\n                    dispatch(submitError(error));\r\n                    dispatch(setStatusSubmitButton(false));\r\n                });\r\n            } else {\r\n                dispatch(submitError(ex));\r\n            }\r\n            throw ex;\r\n        });\r\n};\r\n\r\nexport const clearError = () => ({\r\n    type: CLEAR_ERROR,\r\n    payload: {\r\n        errors: [],\r\n    },\r\n});\r\n\r\nexport const submitDone = (result) => ({\r\n    type: CHECKOUT_SUBMIT,\r\n    payload: {\r\n        result,\r\n    },\r\n});\r\n\r\nexport const submitError = (error) => ({\r\n    type: CHECKOUT_SUBMIT_ERROR,\r\n    payload: {\r\n        error,\r\n    },\r\n});\r\n\r\nexport const setStatusSubmitButton = (value) => ({\r\n    type: CHECKOUT_SET_STATUS_SUBMIT_BUTTON,\r\n    payload: {\r\n        enableConfirmButton: value,\r\n    },\r\n});\r\n\r\nexport const setShowAlternativeAddress = (showAlternativeAddress) => ({\r\n    type: CHECKOUT_SET_SHOW_ALTERNATIVE_ADDRESS,\r\n    payload: {\r\n        showAlternativeAddress,\r\n    },\r\n});\r\nexport const setValidateStatus = (isValidating) => ({\r\n    type: CHECKOUT_VALIDATE_ADDRESS,\r\n    payload: {\r\n        isValidating,\r\n    },\r\n});\r\n","import React from 'react';\r\nimport { useCallback } from 'react';\r\nconst Button = ({\r\n    onClick,\r\n    title,\r\n    disabled = false,\r\n    type = 'button',\r\n    fluid = false,\r\n    rounded = false,\r\n    isLink = false,\r\n}) => {\r\n    const getClassNames = useCallback(() => {\r\n        const classes = ['button'];\r\n        if (fluid) classes.push('expanded');\r\n        if (rounded) classes.push('rounded');\r\n        if (isLink) classes.push('link');\r\n        return classes.join(' ');\r\n    }, [fluid, rounded, isLink]);\r\n    return (\r\n        <button\r\n            className={getClassNames()}\r\n            onClick={onClick}\r\n            disabled={disabled}\r\n            type={type}\r\n        >\r\n            {title}\r\n        </button>\r\n    );\r\n};\r\nexport default Button;\r\n","import React, { useState, Fragment, useCallback, useEffect } from 'react';\r\nimport { translate } from '../Services/translation';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { reloadPayment } from '../Actions/Checkout.action';\r\nimport { update, loadError } from '../Actions/Cart.action';\r\nimport { debounce } from 'lodash-es';\r\nimport { catchError } from '../Actions/Error.action';\r\n\r\nconst mapCartToAbort = {};\r\n\r\nconst quantityDispatch = debounce((articleNumber, quantity, dispatch) => {\r\n    mapCartToAbort[articleNumber] = new AbortController();\r\n    dispatch(update(articleNumber, quantity, mapCartToAbort[articleNumber]))\r\n        .then(() => dispatch(reloadPayment()))\r\n        .catch((ex) => dispatch(catchError(ex, (error) => loadError(error))));\r\n}, 500);\r\n\r\nconst Cart = () => {\r\n    const dispatch = useDispatch();\r\n    const [removingRow, setRemovingRow] = useState({});\r\n    const cart = useSelector((state) => state.cart);\r\n    const [orderRows, setOrderRows] = useState(cart?.orderRows);\r\n    const { discountRows } = cart;\r\n\r\n    useEffect(() => {\r\n        setOrderRows(cart?.orderRows);\r\n    }, [cart]);\r\n\r\n    const removeOrderRow = useCallback(\r\n        (articleNumber) =>\r\n            dispatch(update(articleNumber, 0)).then(() =>\r\n                dispatch(reloadPayment())\r\n            ),\r\n        [dispatch]\r\n    );\r\n\r\n    const handleQuantityInput = useCallback(\r\n        (articleNumber, quantity, rowSystemId, ensureCorrectness = true) => {\r\n            // In case of onBlur event, we need ensureCorrectness as true in order to ensure if the value is a valid float number\r\n            // In case of onChange event, we accept invalid float number, but we don't send any request to the server.\r\n            let floatQuantity = parseFloat(quantity);\r\n            let validValue = !isNaN(floatQuantity) && floatQuantity > 0;\r\n            if (ensureCorrectness) {\r\n                quantity = validValue ? floatQuantity : 1;\r\n                floatQuantity = quantity;\r\n                validValue = true;\r\n            }\r\n            const index = orderRows.findIndex(\r\n                (item) => item.rowSystemId === rowSystemId\r\n            );\r\n            const oldQuantity = parseFloat(orderRows[index].quantity);\r\n            if (floatQuantity !== oldQuantity) {\r\n                mapCartToAbort[articleNumber] &&\r\n                    mapCartToAbort[articleNumber].abort();\r\n                quantityDispatch && quantityDispatch.cancel();\r\n                validValue &&\r\n                    quantityDispatch(articleNumber, quantity, dispatch);\r\n            }\r\n            const tempOrderRows = [...orderRows];\r\n            tempOrderRows[index] = {\r\n                ...tempOrderRows[index],\r\n                quantity,\r\n            };\r\n            setOrderRows(tempOrderRows);\r\n        },\r\n        [dispatch, orderRows]\r\n    );\r\n\r\n    const ProductImage = useCallback(({ order }) => {\r\n        return (\r\n            <img\r\n                className=\"checkout-cart__image\"\r\n                src={order.image}\r\n                alt={order.name}\r\n            />\r\n        );\r\n    }, []);\r\n\r\n    const ProductName = useCallback(({ order }) => {\r\n        return (\r\n            <Fragment>\r\n                <a href={order.url}>{order.name}</a>\r\n                <span className=\"checkout-cart__brand-name\">{order.brand}</span>\r\n            </Fragment>\r\n        );\r\n    }, []);\r\n\r\n    const ProductPrice = useCallback(({ order }) => {\r\n        return (\r\n            <Fragment>\r\n                {order.isFreeGift ? order.campaignPrice : order.price}\r\n            </Fragment>\r\n        );\r\n    }, []);\r\n\r\n    const ProductQuantity = useCallback(\r\n        (order) => {\r\n            return (\r\n                <Fragment>\r\n                    {order.isFreeGift ? (\r\n                        <div>{order.quantity}</div>\r\n                    ) : (\r\n                        <input\r\n                            className=\"checkout-cart__input\"\r\n                            type=\"number\"\r\n                            min=\"1\"\r\n                            maxLength={3}\r\n                            value={order.quantity.toString()}\r\n                            onChange={(event) =>\r\n                                handleQuantityInput(\r\n                                    order.articleNumber,\r\n                                    event.target.value,\r\n                                    order.rowSystemId,\r\n                                    false\r\n                                )\r\n                            }\r\n                            onBlur={(event) =>\r\n                                handleQuantityInput(\r\n                                    order.articleNumber,\r\n                                    event.target.value,\r\n                                    order.rowSystemId\r\n                                )\r\n                            }\r\n                        />\r\n                    )}\r\n                </Fragment>\r\n            );\r\n        },\r\n        [handleQuantityInput]\r\n    );\r\n\r\n    const ProductTotalPrice = ({ order }) => {\r\n        return (\r\n            <Fragment>\r\n                {order.isFreeGift ? order.totalCampaignPrice : order.totalPrice}\r\n            </Fragment>\r\n        );\r\n    };\r\n\r\n    const RemoveBtn = useCallback(\r\n        ({ order }) => {\r\n            return (\r\n                <Fragment>\r\n                    {!order.isFreeGift && !removingRow[order.rowSystemId] && (\r\n                        <a\r\n                            className=\"table__icon table__icon--delete\"\r\n                            onClick={() =>\r\n                                setRemovingRow({\r\n                                    ...removingRow,\r\n                                    [order.rowSystemId]: true,\r\n                                })\r\n                            }\r\n                            title={translate('general.remove')}\r\n                        ></a>\r\n                    )}\r\n                    {!order.isFreeGift && removingRow[order.rowSystemId] && (\r\n                        <Fragment>\r\n                            <a\r\n                                className=\"table__icon table__icon--accept\"\r\n                                onClick={() =>\r\n                                    removeOrderRow(order.articleNumber)\r\n                                }\r\n                                title={translate('general.ok')}\r\n                            ></a>\r\n                            <a\r\n                                className=\"table__icon table__icon--cancel\"\r\n                                onClick={() =>\r\n                                    setRemovingRow({\r\n                                        ...removingRow,\r\n                                        [order.rowSystemId]: false,\r\n                                    })\r\n                                }\r\n                                title={translate('general.cancel')}\r\n                            ></a>\r\n                        </Fragment>\r\n                    )}\r\n                </Fragment>\r\n            );\r\n        },\r\n        [removeOrderRow, removingRow]\r\n    );\r\n\r\n    const CartTotal = useCallback(({ cart }) => {\r\n        return (\r\n            <h3 className=\"text--right\">\r\n                {translate('checkout.cart.total')}: {cart.orderTotal}\r\n            </h3>\r\n        );\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"row checkout__container\">\r\n            <div className=\"small-12 simple-table hide-for-small-only\">\r\n                <div className=\"row small-unstack no-margin\">\r\n                    <div className=\"columns small-12 medium-4 large-5\"></div>\r\n                    <div className=\"columns small-3 medium-2 large-2\">\r\n                        {translate('checkout.cart.header.price')}\r\n                    </div>\r\n                    <div className=\"columns small-4 medium-2 large-2\">\r\n                        {translate('checkout.cart.header.quantity')}\r\n                    </div>\r\n                    <div className=\"columns small-5 medium-3 large-3\">\r\n                        {translate('checkout.cart.header.total')}\r\n                    </div>\r\n                </div>\r\n                {orderRows.map((order) => (\r\n                    <div\r\n                        className=\"row small-unstack no-margin checkout-cart__row\"\r\n                        key={order.rowSystemId}\r\n                    >\r\n                        <div className=\"columns small-12 medium-4 large-5 checkout-cart__image-container\">\r\n                            <div className=\"checkout-cart__image-wrapper\">\r\n                                <ProductImage order={order} />\r\n                            </div>\r\n                            <div className=\"checkout-cart__image-info\">\r\n                                <ProductName order={order} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"columns small-3 medium-2 large-2 simple-table__cell--no-break-word\">\r\n                            <ProductPrice order={order} />\r\n                        </div>\r\n                        <div className=\"columns small-2 medium-2 large-2\">\r\n                            {ProductQuantity(order)}\r\n                        </div>\r\n                        <div className=\"checkout-cart__total-price columns small-2 medium-3 large-2 simple-table__cell--no-break-word\">\r\n                            <ProductTotalPrice order={order} />\r\n                        </div>\r\n                        <div className=\"columns small-3 medium-1 large-1\">\r\n                            <RemoveBtn order={order} />\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n                {discountRows.map((order) => (\r\n                    <div\r\n                        className=\"row small-unstack no-margin checkout-cart__row\"\r\n                        key={order.rowSystemId}\r\n                    >\r\n                        <div className=\"columns small-12 medium-4 large-5 checkout-cart__image-container\">\r\n                            <div className=\"checkout-cart__discount-info checkout-cart__discount-row\">\r\n                                <ProductName order={order} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"columns small-3 medium-2 large-2 simple-table__cell--no-break-word\"></div>\r\n                        <div className=\"columns small-2 medium-2 large-2\"></div>\r\n                        <div className=\"checkout-cart__discount-price columns small-2 medium-3 large-2 simple-table__cell--no-break-word\">\r\n                            <ProductTotalPrice order={order} />\r\n                        </div>\r\n                        <div className=\"columns small-3 medium-1 large-1\"></div>\r\n                    </div>\r\n                ))}\r\n                <div className=\"row small-unstack no-margin checkout-cart__row\">\r\n                    <div className=\"columns\">\r\n                        <CartTotal cart={cart} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"small-12 simple-table checkout-mobile show-for-small-only\">\r\n                {orderRows.map((order) => (\r\n                    <div className=\"row no-margin\" key={order.rowSystemId}>\r\n                        <div className=\"columns small-3\">\r\n                            <ProductImage order={order} />\r\n                        </div>\r\n                        <div className=\"columns small-9\">\r\n                            <div className=\"row\">\r\n                                <div className=\"small-8 columns\">\r\n                                    <div className=\"flex-container flex-dir-column align-center\">\r\n                                        <ProductName order={order} />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"small-4 columns flex-container align-right\">\r\n                                    <RemoveBtn order={order} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"small-12 columns flex-container align-justify\">\r\n                                    <div>\r\n                                        <ProductPrice order={order} />\r\n                                    </div>\r\n                                    <div>{ProductQuantity(order)}</div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"checkout-cart__total-price small-12 columns text--right\">\r\n                                    <ProductTotalPrice order={order} />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n                {discountRows.map((order) => (\r\n                    <div className=\"row no-margin\" key={order.rowSystemId}>\r\n                        <div className=\"columns\">\r\n                            <div className=\"checkout-cart__discount-row\">\r\n                                <ProductName order={order} />\r\n                            </div>\r\n                            <div className=\"checkout-cart__discount-price text--right\">\r\n                                <ProductTotalPrice order={order} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n                <div className=\"row no-margin\">\r\n                    <div className=\"columns\">\r\n                        <CartTotal cart={cart} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cart;\r\n","import React, { Fragment } from 'react';\r\nimport Cart from './Cart';\r\nimport { translate } from '../Services/translation';\r\n\r\nconst CheckoutCart = ({ errors }) => {\r\n    return (\r\n        <Fragment>\r\n            <div className=\"row\">\r\n                <div className=\"small-12\">\r\n                    <h2 className=\"checkout__title\">\r\n                        {translate('checkout.title')}\r\n                    </h2>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <h3 className=\"checkout__section-title\">\r\n                    {translate('checkout.cart.title')}\r\n                </h3>\r\n            </div>\r\n            <div className=\"row\">\r\n                {errors && errors['cart'] && (\r\n                    <p className=\"checkout__validator--error\">\r\n                        {errors['cart'][0]}\r\n                    </p>\r\n                )}\r\n            </div>\r\n            <Cart />\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default CheckoutCart;\r\n","import React from 'react';\r\n\r\nconst InputField = ({\r\n    cssClass,\r\n    name,\r\n    id,\r\n    autoComplete = null,\r\n    placeholder = null,\r\n    type = 'text',\r\n    maxLength = 200,\r\n    disabled,\r\n    onChange,\r\n    value,\r\n    label,\r\n    errors,\r\n}) => {\r\n    return (\r\n        <div className={cssClass}>\r\n            <label className=\"form__label\" htmlFor={id}>\r\n                {label}\r\n            </label>\r\n            <input\r\n                className=\"form__input\"\r\n                disabled={disabled}\r\n                id={id}\r\n                name={name}\r\n                type={type}\r\n                value={value}\r\n                placeholder={placeholder}\r\n                autoComplete={autoComplete}\r\n                onChange={(event) => onChange(event.target.value)}\r\n                maxLength={maxLength}\r\n            />\r\n            {errors[id] && (\r\n                <span\r\n                    className=\"form__validator--error form__validator--top-narrow\"\r\n                    data-error-for={id}\r\n                >\r\n                    {errors[id][0]}\r\n                </span>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InputField;\r\n","import React from 'react';\r\n\r\nfunction InfoField({ values }) {\r\n    return (\r\n        <div className=\"small-12 medium-12 columns\">\r\n            {values.map((item, idx) => (\r\n                <>\r\n                    <span key={idx}>{item}</span>&nbsp;\r\n                </>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InfoField;\r\n","import React, { Fragment, useMemo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport constants from '../constants';\r\nimport { translate } from '../Services/translation';\r\nimport InputField from './InputField';\r\nimport InfoField from './InfoField';\r\nimport Button from './Button';\r\n\r\nconst getCountry = (address) => {\r\n    const addressCountry = constants.countries\r\n        ? constants.countries.find(\r\n              (country) => country.value === address.country\r\n          )\r\n        : null;\r\n    return addressCountry ? addressCountry.text : address.country;\r\n};\r\n\r\nconst CheckoutBusinessCustomerInfo = ({\r\n    onChange,\r\n    onSave,\r\n    onCompanyAddressChange,\r\n    valueForm,\r\n    isEditingAddress,\r\n}) => {\r\n    const { payload, errors = {} } = useSelector((state) => state.checkout);\r\n    const { companyAddresses = [], companyName, authenticated } = payload;\r\n\r\n    const input = (\r\n        cssClass,\r\n        stateKey,\r\n        id,\r\n        autoComplete = 'on',\r\n        type = 'text'\r\n    ) => (\r\n        <InputField\r\n            cssClass={cssClass}\r\n            id={`${stateKey}-${id}`}\r\n            name={`${stateKey}-${id}`}\r\n            autoComplete={autoComplete}\r\n            disabled={!authenticated}\r\n            value={(valueForm[stateKey] || {})[id] || ''}\r\n            onChange={(value) => onChange(stateKey, id, value)}\r\n            label={translate(`checkout.customerinfo.${id.toLowerCase()}`)}\r\n            errors={errors}\r\n            type={type}\r\n        />\r\n    );\r\n\r\n    const selectedAddress = useMemo(() => {\r\n        return valueForm.selectedCompanyAddressId && companyAddresses\r\n            ? companyAddresses.find(\r\n                  (address) =>\r\n                      address.systemId === valueForm.selectedCompanyAddressId\r\n              )\r\n            : null;\r\n    }, [valueForm.selectedCompanyAddressId, companyAddresses]);\r\n\r\n    return (\r\n        <div className=\"row checkout-info__container\">\r\n            {isEditingAddress ? (\r\n                <Fragment>\r\n                    <div className=\"small-12 medium-6 columns\">\r\n                        <div className=\"row-inner\">\r\n                            {input(\r\n                                'small-6 columns',\r\n                                'customerDetails',\r\n                                'firstName',\r\n                                'billing given-name'\r\n                            )}\r\n\r\n                            {input(\r\n                                'small-6 columns',\r\n                                'customerDetails',\r\n                                'lastName',\r\n                                'billing family-name'\r\n                            )}\r\n                        </div>\r\n                        <div className=\"row-inner\">\r\n                            {input(\r\n                                'small-12 columns',\r\n                                'customerDetails',\r\n                                'phoneNumber',\r\n                                'billing tel',\r\n                                'tel'\r\n                            )}\r\n                        </div>\r\n                        <div className=\"row-inner\">\r\n                            {input(\r\n                                'small-12 columns',\r\n                                'customerDetails',\r\n                                'email',\r\n                                'email',\r\n                                'email'\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"small-12 medium-6 columns\">\r\n                        <div className=\"row-inner\">\r\n                            <div className=\"small-12 columns\">\r\n                                <label\r\n                                    className=\"form__label\"\r\n                                    htmlFor=\"address\"\r\n                                >\r\n                                    {translate('checkout.customerinfo.address')}\r\n                                </label>\r\n\r\n                                <select\r\n                                    className=\"form__input\"\r\n                                    value={\r\n                                        valueForm.selectedCompanyAddressId || ''\r\n                                    }\r\n                                    disabled={!authenticated}\r\n                                    onChange={(event) =>\r\n                                        onCompanyAddressChange(\r\n                                            event.target.value,\r\n                                            companyAddresses.find(\r\n                                                (address) =>\r\n                                                    address.systemId ===\r\n                                                    event.target.value\r\n                                            ).country\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    <option value=\"\" disabled>\r\n                                        {translate(\r\n                                            'checkout.customerinfo.companyaddress.placeholder'\r\n                                        )}\r\n                                    </option>\r\n                                    {companyAddresses &&\r\n                                        companyAddresses.map((address) => (\r\n                                            <option\r\n                                                value={address.systemId}\r\n                                                key={`companyAddress-${address.systemId}`}\r\n                                            >{`${address.address}, ${\r\n                                                address.zipCode\r\n                                            }, ${address.city}, ${getCountry(\r\n                                                address\r\n                                            )}`}</option>\r\n                                        ))}\r\n                                </select>\r\n                                {errors['selectedCompanyAddressId'] && (\r\n                                    <span\r\n                                        className=\"form__validator--error form__validator--top-narrow\"\r\n                                        data-error-for=\"selectedCompanyAddressId\"\r\n                                    >\r\n                                        {errors['selectedCompanyAddressId'][0]}\r\n                                    </span>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        {selectedAddress && (\r\n                            <div className=\"row-inner\">\r\n                                <div className=\"small-12 columns\">\r\n                                    {companyName}\r\n                                </div>\r\n                                <div className=\"small-12 columns\">\r\n                                    {selectedAddress.address}\r\n                                </div>\r\n                                <div className=\"small-12 columns\">\r\n                                    <span>{selectedAddress.zipCode}</span>&nbsp;\r\n                                    <span>{selectedAddress.city}</span>\r\n                                </div>\r\n                                <div className=\"small-12 columns\">\r\n                                    {getCountry(selectedAddress)}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"small-12 columns flex-container align-right\">\r\n                        <Button\r\n                            onClick={onSave}\r\n                            title={translate('checkout.continue')}\r\n                            rounded={true}\r\n                        />\r\n                    </div>\r\n                </Fragment>\r\n            ) : (\r\n                <Fragment>\r\n                    <InfoField\r\n                        values={[\r\n                            valueForm['customerDetails']['firstName'],\r\n                            valueForm['customerDetails']['lastName'],\r\n                        ]}\r\n                    />\r\n                    <InfoField values={[companyName]} />\r\n                    <InfoField values={[selectedAddress.address]} />\r\n                    <InfoField\r\n                        values={[selectedAddress.zipCode, selectedAddress.city]}\r\n                    />\r\n                    <InfoField values={[getCountry(selectedAddress)]} />\r\n                    <InfoField\r\n                        values={[valueForm['customerDetails']['phoneNumber']]}\r\n                    />\r\n                    <InfoField\r\n                        values={[valueForm['customerDetails']['email']]}\r\n                    />\r\n                </Fragment>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CheckoutBusinessCustomerInfo;\r\nexport { getCountry };\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport constants from '../constants';\r\nimport { translate } from '../Services/translation';\r\nimport {\r\n    setSignUp,\r\n    setShowAlternativeAddress,\r\n} from '../Actions/Checkout.action';\r\nimport InputField from './InputField';\r\nimport { Fragment } from 'react';\r\nimport InfoField from './InfoField';\r\nimport { getCountry } from './Checkout.BusinessCustomerInfo';\r\nimport Button from './Button';\r\n\r\nconst CheckoutPrivateCustomerInfo = ({\r\n    onChange,\r\n    onSave,\r\n    valueForm,\r\n    isEditingAddress,\r\n    signUpCheckboxVisibility,\r\n}) => {\r\n    const dispatch = useDispatch();\r\n    const { payload, errors = {} } = useSelector((state) => state.checkout);\r\n    const { authenticated, signUp, isValidating } = payload;\r\n    const { customerDetails = {}, alternativeAddress = {} } = valueForm;\r\n\r\n    const input = (\r\n        cssClass,\r\n        stateKey,\r\n        id,\r\n        autoComplete = 'on',\r\n        placeholder = null,\r\n        type = 'text',\r\n        maxLength = 200\r\n    ) => (\r\n        <InputField\r\n            cssClass={cssClass}\r\n            id={`${stateKey}-${id}`}\r\n            name={`${stateKey}-${id}`}\r\n            autoComplete={autoComplete}\r\n            value={(valueForm[stateKey] || {})[id] || ''}\r\n            onChange={(value) => onChange(stateKey, id, value)}\r\n            label={translate(`checkout.customerinfo.${id.toLowerCase()}`)}\r\n            errors={errors}\r\n            placeholder={placeholder}\r\n            type={type}\r\n            maxLength={maxLength}\r\n        />\r\n    );\r\n\r\n    return (\r\n        <div className=\"row checkout-info__container\">\r\n            {isEditingAddress ? (\r\n                <Fragment>\r\n                    <div className=\"small-12 medium-6 columns\">\r\n                        <div className=\"row-inner\">\r\n                            <div className=\"small-12 columns checkout-info__placeholder-container\"></div>\r\n                        </div>\r\n                        <div className=\"row-inner\">\r\n                            {input(\r\n                                'small-6 columns',\r\n                                'customerDetails',\r\n                                'firstName',\r\n                                'billing given-name'\r\n                            )}\r\n                            {input(\r\n                                'small-6 columns',\r\n                                'customerDetails',\r\n                                'lastName',\r\n                                'billing family-name'\r\n                            )}\r\n                            {input(\r\n                                'small-12 columns',\r\n                                'customerDetails',\r\n                                'careOf',\r\n                                'on',\r\n                                null,\r\n                                'text',\r\n                                100\r\n                            )}\r\n                            {input(\r\n                                'small-12 columns',\r\n                                'customerDetails',\r\n                                'address',\r\n                                'billing street-address'\r\n                            )}\r\n                            {input(\r\n                                'small-6 columns',\r\n                                'customerDetails',\r\n                                'zipCode',\r\n                                'billing postal-code',\r\n                                null,\r\n                                'text',\r\n                                50\r\n                            )}\r\n                            {input(\r\n                                'small-6 columns',\r\n                                'customerDetails',\r\n                                'city',\r\n                                'billing address-level2',\r\n                                null,\r\n                                'text',\r\n                                100\r\n                            )}\r\n                            <div className=\"small-12 columns\">\r\n                                <label\r\n                                    className=\"form__label\"\r\n                                    htmlFor=\"country\"\r\n                                >\r\n                                    {translate('checkout.customerinfo.country')}\r\n                                </label>\r\n                                <select\r\n                                    className=\"form__input\"\r\n                                    id=\"country\"\r\n                                    value={customerDetails.country}\r\n                                    autoComplete=\"country\"\r\n                                    onChange={(event) => {\r\n                                        onChange(\r\n                                            'alternativeAddress',\r\n                                            'country',\r\n                                            event.target.value\r\n                                        );\r\n                                        onChange(\r\n                                            'customerDetails',\r\n                                            'country',\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                >\r\n                                    <option value=\"\" disabled>\r\n                                        {translate(\r\n                                            'checkout.customerinfo.country.placeholder'\r\n                                        )}\r\n                                    </option>\r\n                                    {constants.countries &&\r\n                                        constants.countries.map(\r\n                                            ({ text, value }) => (\r\n                                                <option\r\n                                                    value={value}\r\n                                                    key={`country-${value}`}\r\n                                                >\r\n                                                    {text}\r\n                                                </option>\r\n                                            )\r\n                                        )}\r\n                                </select>\r\n                            </div>\r\n                            {input(\r\n                                'small-12 columns',\r\n                                'customerDetails',\r\n                                'phoneNumber',\r\n                                'billing tel',\r\n                                null,\r\n                                'tel'\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"small-12 medium-6 columns\">\r\n                        <div className=\"row-inner\">\r\n                            <div className=\"small-12 columns\">\r\n                                <input\r\n                                    className=\"checkout-info__checkbox-input\"\r\n                                    type=\"checkbox\"\r\n                                    id=\"showAlternativeAddress\"\r\n                                    name=\"showAlternativeAddress\"\r\n                                    checked={\r\n                                        alternativeAddress.showAlternativeAddress ||\r\n                                        false\r\n                                    }\r\n                                    onChange={(event) => {\r\n                                        onChange(\r\n                                            'alternativeAddress',\r\n                                            'showAlternativeAddress',\r\n                                            event.target.checked\r\n                                        );\r\n                                        dispatch(\r\n                                            setShowAlternativeAddress(\r\n                                                event.target.checked\r\n                                            )\r\n                                        );\r\n                                    }}\r\n                                />\r\n                                <label\r\n                                    className=\"checkout-info__checkbox-label\"\r\n                                    htmlFor=\"showAlternativeAddress\"\r\n                                >\r\n                                    {translate(\r\n                                        'checkout.customerinfo.showAlternativeAddress'\r\n                                    )}\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        {alternativeAddress.showAlternativeAddress && (\r\n                            <div className=\"row-inner\">\r\n                                {input(\r\n                                    'small-6 columns',\r\n                                    'alternativeAddress',\r\n                                    'firstName',\r\n                                    'shipping given-name'\r\n                                )}\r\n                                {input(\r\n                                    'small-6 columns',\r\n                                    'alternativeAddress',\r\n                                    'lastName',\r\n                                    'shipping family-name'\r\n                                )}\r\n                                {input(\r\n                                    'small-12 columns',\r\n                                    'alternativeAddress',\r\n                                    'careOf',\r\n                                    'on',\r\n                                    null,\r\n                                    'text',\r\n                                    100\r\n                                )}\r\n                                {input(\r\n                                    'small-12 columns',\r\n                                    'alternativeAddress',\r\n                                    'address',\r\n                                    'shipping street-address'\r\n                                )}\r\n                                {input(\r\n                                    'small-6 columns',\r\n                                    'alternativeAddress',\r\n                                    'zipCode',\r\n                                    'shipping postal-code',\r\n                                    null,\r\n                                    'text',\r\n                                    50\r\n                                )}\r\n                                {input(\r\n                                    'small-6 columns',\r\n                                    'alternativeAddress',\r\n                                    'city',\r\n                                    'shipping address-level2',\r\n                                    null,\r\n                                    'text',\r\n                                    100\r\n                                )}\r\n                                <div className=\"small-12 columns\">\r\n                                    <label\r\n                                        className=\"form__label\"\r\n                                        htmlFor=\"country2\"\r\n                                    >\r\n                                        {translate(\r\n                                            'checkout.customerinfo.country'\r\n                                        )}\r\n                                    </label>\r\n                                    <select\r\n                                        className=\"form__input\"\r\n                                        id=\"country2\"\r\n                                        value={alternativeAddress.country}\r\n                                        autoComplete=\"country\"\r\n                                        onChange={(event) => {\r\n                                            onChange(\r\n                                                'alternativeAddress',\r\n                                                'country',\r\n                                                event.target.value\r\n                                            );\r\n                                            onChange(\r\n                                                'customerDetails',\r\n                                                'country',\r\n                                                event.target.value\r\n                                            );\r\n                                        }}\r\n                                    >\r\n                                        <option value=\"\" disabled>\r\n                                            {translate(\r\n                                                'checkout.customerinfo.country.placeholder'\r\n                                            )}\r\n                                        </option>\r\n                                        {constants.countries &&\r\n                                            constants.countries.map(\r\n                                                ({ text, value }) => (\r\n                                                    <option\r\n                                                        value={value}\r\n                                                        key={`country2-${value}`}\r\n                                                    >\r\n                                                        {text}\r\n                                                    </option>\r\n                                                )\r\n                                            )}\r\n                                    </select>\r\n                                </div>\r\n                                {input(\r\n                                    'small-12 columns',\r\n                                    'alternativeAddress',\r\n                                    'phoneNumber',\r\n                                    'shipping tel',\r\n                                    null,\r\n                                    'tel'\r\n                                )}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"small-12 medium-6 columns\">\r\n                        <div className=\"row-inner\">\r\n                            {input(\r\n                                'small-12 columns',\r\n                                'customerDetails',\r\n                                'email',\r\n                                'email',\r\n                                null,\r\n                                'email'\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    <div\r\n                        className={`small-12 columns flex-container ${\r\n                            authenticated ? 'align-right' : 'align-justify'\r\n                        }`}\r\n                    >\r\n                        <div>\r\n                            {!authenticated && signUpCheckboxVisibility && (\r\n                                <>\r\n                                    <input\r\n                                        className=\"checkout-info__checkbox-input\"\r\n                                        type=\"checkbox\"\r\n                                        id=\"signupandlogin\"\r\n                                        checked={signUp}\r\n                                        onChange={(event) =>\r\n                                            dispatch(\r\n                                                setSignUp(event.target.checked)\r\n                                            )\r\n                                        }\r\n                                    />\r\n                                    <label\r\n                                        className=\"checkout-info__checkbox-label\"\r\n                                        htmlFor=\"signupandlogin\"\r\n                                    >\r\n                                        {translate(\r\n                                            'checkout.customerinfo.signupandlogin'\r\n                                        )}\r\n                                    </label>\r\n                                </>\r\n                            )}\r\n                        </div>\r\n                        <Button\r\n                            onClick={onSave}\r\n                            title={translate('checkout.continue')}\r\n                            rounded={true}\r\n                            disabled={isValidating}\r\n                        />\r\n                    </div>\r\n                </Fragment>\r\n            ) : (\r\n                <Fragment>\r\n                    <InfoField\r\n                        values={[\r\n                            valueForm['customerDetails']['firstName'],\r\n                            valueForm['customerDetails']['lastName'],\r\n                        ]}\r\n                    />\r\n                    {valueForm['customerDetails']['careOf'] && (\r\n                        <InfoField\r\n                            values={[valueForm['customerDetails']['careOf']]}\r\n                        />\r\n                    )}\r\n                    <InfoField\r\n                        values={[valueForm['customerDetails']['address']]}\r\n                    />\r\n                    <InfoField\r\n                        values={[\r\n                            valueForm['customerDetails']['zipCode'],\r\n                            valueForm['customerDetails']['city'],\r\n                        ]}\r\n                    />\r\n                    <InfoField values={[getCountry(customerDetails)]} />\r\n\r\n                    <InfoField\r\n                        values={[valueForm['customerDetails']['phoneNumber']]}\r\n                    />\r\n                    <InfoField\r\n                        values={[valueForm['customerDetails']['email']]}\r\n                    />\r\n                </Fragment>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CheckoutPrivateCustomerInfo;\r\n","import { string, object, boolean, mixed } from 'yup';\r\nimport { translate } from '../Services/translation';\r\n\r\nconst privateCustomerAdditionalDetailsSchema = object().shape({\r\n    acceptTermsOfCondition: boolean()\r\n        .required(translate(`validation.checkrequired`))\r\n        .oneOf([true], translate(`validation.checkrequired`)),\r\n    selectedDeliveryMethod: object().required(translate(`validation.required`)),\r\n    selectedPaymentMethod: object().required(translate(`validation.required`)),\r\n});\r\n\r\nconst privateCustomerAddressSchema = object().shape({\r\n    email: string()\r\n        .required(translate(`validation.required`))\r\n        .email(translate(`validation.email`)),\r\n    phoneNumber: string().required(translate(`validation.required`)),\r\n    country: mixed()\r\n        .required(translate(`validation.required`))\r\n        .notOneOf([''], translate('validation.required')),\r\n    city: string().required(translate(`validation.required`)),\r\n    zipCode: string().required(translate(`validation.required`)),\r\n    address: string().required(translate(`validation.required`)),\r\n    lastName: string().required(translate(`validation.required`)),\r\n    firstName: string().required(translate(`validation.required`)),\r\n});\r\n\r\nconst privateCustomerAlternativeAddressSchema = object().shape({\r\n    phoneNumber: string().required(translate(`validation.required`)),\r\n    country: mixed()\r\n        .required(translate(`validation.required`))\r\n        .notOneOf([''], translate('validation.required')),\r\n    city: string().required(translate(`validation.required`)),\r\n    zipCode: string().required(translate(`validation.required`)),\r\n    address: string().required(translate(`validation.required`)),\r\n    lastName: string().required(translate(`validation.required`)),\r\n    firstName: string().required(translate(`validation.required`)),\r\n});\r\n\r\nconst businessCustomerDetailsSchema = object().shape({\r\n    email: string()\r\n        .required(translate(`validation.required`))\r\n        .email(translate(`validation.email`)),\r\n    phoneNumber: string().required(translate(`validation.required`)),\r\n    lastName: string().required(translate(`validation.required`)),\r\n    firstName: string().required(translate(`validation.required`)),\r\n    selectedCompanyAddressId: string().required(\r\n        translate(`validation.required`)\r\n    ),\r\n});\r\n\r\nconst businessCustomerAdditionalDetailsSchema = object().shape({\r\n    acceptTermsOfCondition: boolean()\r\n        .required(translate(`validation.checkrequired`))\r\n        .oneOf([true], translate(`validation.checkrequired`)),\r\n    selectedDeliveryMethod: object().required(translate(`validation.required`)),\r\n    selectedPaymentMethod: object().required(translate(`validation.required`)),\r\n});\r\n\r\nexport {\r\n    privateCustomerAdditionalDetailsSchema,\r\n    privateCustomerAddressSchema,\r\n    privateCustomerAlternativeAddressSchema,\r\n    businessCustomerDetailsSchema,\r\n    businessCustomerAdditionalDetailsSchema,\r\n};\r\n","import React, { Fragment, useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport {\r\n    clearError,\r\n    setBusinessCustomer,\r\n    setSelectedCompanyAddress,\r\n    submitError,\r\n    updateCustomerDetails,\r\n    setCountry,\r\n    saveCustomerDetail,\r\n    setValidateStatus,\r\n} from '../Actions/Checkout.action';\r\nimport CheckoutBusinessCustomerInfo from './Checkout.BusinessCustomerInfo';\r\nimport CheckoutPrivateCustomerInfo from './Checkout.PrivateCustomerInfo';\r\nimport {\r\n    businessCustomerDetailsSchema,\r\n    privateCustomerAddressSchema,\r\n    privateCustomerAlternativeAddressSchema,\r\n} from './Checkout.ValidationSchema';\r\nimport constants from '../constants';\r\nimport { translate } from '../Services/translation';\r\nimport Button from './Button';\r\n\r\nconst validateAlternativeAddress = (alternativeAddress) => {\r\n    return (\r\n        alternativeAddress &&\r\n        alternativeAddress.showAlternativeAddress &&\r\n        (alternativeAddress.firstName ||\r\n            alternativeAddress.lastName ||\r\n            alternativeAddress.address ||\r\n            alternativeAddress.zipCode ||\r\n            alternativeAddress.city ||\r\n            alternativeAddress.phoneNumber)\r\n    );\r\n};\r\n\r\nconst validateCustomerInfo = (result, isBusinessCustomer) => {\r\n    const {\r\n        customerDetails,\r\n        selectedCompanyAddressId,\r\n        alternativeAddress,\r\n    } = result;\r\n\r\n    if (isBusinessCustomer) {\r\n        return businessCustomerDetailsSchema.validate({\r\n            ...customerDetails,\r\n            selectedCompanyAddressId,\r\n        });\r\n    }\r\n\r\n    return privateCustomerAddressSchema\r\n        .validate({\r\n            ...customerDetails,\r\n        })\r\n        .then((result) => {\r\n            if (validateAlternativeAddress(alternativeAddress)) {\r\n                return privateCustomerAlternativeAddressSchema\r\n                    .validate({\r\n                        ...alternativeAddress,\r\n                    })\r\n                    .catch((error) => {\r\n                        error.addressPath = 'alternativeAddress';\r\n                        throw error;\r\n                    });\r\n            } else {\r\n                return result;\r\n            }\r\n        });\r\n};\r\n\r\nconst CheckoutCustomerInfo = ({\r\n    checkout,\r\n    addressFormValue,\r\n    setAddressFormValue,\r\n    isEditingAddress,\r\n    setIsEditingAddress,\r\n    signUpCheckboxVisibility,\r\n}) => {\r\n    const dispatch = useDispatch();\r\n    const {\r\n        payload: { loginUrl, authenticated, isBusinessCustomer, checkoutMode },\r\n    } = checkout;\r\n\r\n    const onCustomerInfoChange = useCallback(\r\n        (stateKey, id, value) => {\r\n            setAddressFormValue((previousState) => ({\r\n                ...previousState,\r\n                [stateKey]: {\r\n                    ...previousState[stateKey],\r\n                    [id]: value,\r\n                },\r\n            }));\r\n        },\r\n        [setAddressFormValue]\r\n    );\r\n    const onCompanyAddressChange = useCallback(\r\n        (companyAddressId, country) => {\r\n            setAddressFormValue((previousState) => ({\r\n                ...previousState,\r\n                selectedCompanyAddressId: companyAddressId,\r\n                customerDetails: {\r\n                    ...previousState.customerDetails,\r\n                    country,\r\n                },\r\n            }));\r\n        },\r\n        [setAddressFormValue]\r\n    );\r\n\r\n    const onEditForm = useCallback(() => {\r\n        setIsEditingAddress(true);\r\n    }, [setIsEditingAddress]);\r\n\r\n    const onUpdateCustomerDetails = useCallback(() => {\r\n        const notCustomerDetailFields = ['selectedCompanyAddressId'];\r\n\r\n        const onValid = () => {\r\n            const { payload } = checkout,\r\n                { isBusinessCustomer } = payload;\r\n            const {\r\n                customerDetails,\r\n                selectedCompanyAddressId,\r\n                alternativeAddress,\r\n            } = addressFormValue;\r\n\r\n            dispatch(updateCustomerDetails('customerDetails', customerDetails));\r\n            if (isBusinessCustomer) {\r\n                dispatch(setSelectedCompanyAddress(selectedCompanyAddressId));\r\n                const companyAddress = payload.companyAddresses.find(\r\n                    (c) => c.systemId === selectedCompanyAddressId\r\n                );\r\n                dispatch(setCountry(companyAddress.country));\r\n            } else {\r\n                dispatch(\r\n                    updateCustomerDetails(\r\n                        'alternativeAddress',\r\n                        alternativeAddress\r\n                    )\r\n                );\r\n                dispatch(setCountry(customerDetails.country));\r\n            }\r\n            setIsEditingAddress(false);\r\n        };\r\n\r\n        const onSetCustomerDetail = () =>\r\n            dispatch(saveCustomerDetail(addressFormValue));\r\n\r\n        const onError = (error) => {\r\n            error.path =\r\n                notCustomerDetailFields.indexOf(error.path) >= 0\r\n                    ? error.path\r\n                    : `${error?.addressPath || 'customerDetails'}-${\r\n                          error.path\r\n                      }`;\r\n            dispatch(submitError(error));\r\n        };\r\n\r\n        dispatch(setValidateStatus(true));\r\n        dispatch(clearError());\r\n\r\n        validateCustomerInfo(addressFormValue, isBusinessCustomer)\r\n            .then(onSetCustomerDetail)\r\n            .then(onValid)\r\n            .catch(onError)\r\n            .finally(() => {\r\n                dispatch(setValidateStatus(false));\r\n            });\r\n    }, [\r\n        dispatch,\r\n        addressFormValue,\r\n        isBusinessCustomer,\r\n        checkout,\r\n        setIsEditingAddress,\r\n    ]);\r\n\r\n    const privateCustomerInfoComponent = useCallback(() => {\r\n        return (\r\n            <CheckoutPrivateCustomerInfo\r\n                onSave={onUpdateCustomerDetails}\r\n                onChange={onCustomerInfoChange}\r\n                valueForm={addressFormValue}\r\n                isEditingAddress={isEditingAddress}\r\n                signUpCheckboxVisibility={signUpCheckboxVisibility}\r\n            />\r\n        );\r\n    }, [\r\n        addressFormValue,\r\n        isEditingAddress,\r\n        onCustomerInfoChange,\r\n        onUpdateCustomerDetails,\r\n        signUpCheckboxVisibility,\r\n    ]);\r\n\r\n    const businessCustomerInfoComponent = useCallback(() => {\r\n        return (\r\n            <CheckoutBusinessCustomerInfo\r\n                onChange={onCustomerInfoChange}\r\n                onCompanyAddressChange={onCompanyAddressChange}\r\n                onSave={onUpdateCustomerDetails}\r\n                valueForm={addressFormValue}\r\n                isEditingAddress={isEditingAddress}\r\n            />\r\n        );\r\n    }, [\r\n        addressFormValue,\r\n        isEditingAddress,\r\n        onCompanyAddressChange,\r\n        onCustomerInfoChange,\r\n        onUpdateCustomerDetails,\r\n    ]);\r\n\r\n    if (!authenticated) {\r\n        return (\r\n            <Fragment>\r\n                <div className=\"row align-justify\">\r\n                    <div className=\"flex-container checkout__flex-wrapper\">\r\n                        <h3 className=\"checkout__section-title\">\r\n                            {translate('checkout.customerinfo.title')}\r\n                        </h3>\r\n                        {isEditingAddress && (\r\n                            <Fragment>\r\n                                <label className=\"checkout__text--in-line\">\r\n                                    {translate(\r\n                                        'checkout.customerinfo.existingcustomer'\r\n                                    )}\r\n                                </label>\r\n                                &nbsp;\r\n                                <a href={loginUrl} className=\"checkout__link\">\r\n                                    {translate(\r\n                                        'checkout.customerinfo.clicktologin'\r\n                                    )}\r\n                                </a>\r\n                                &nbsp;\r\n                                {!isBusinessCustomer &&\r\n                                    checkoutMode ===\r\n                                        constants.checkoutMode.both && (\r\n                                        <a\r\n                                            onClick={() =>\r\n                                                dispatch(\r\n                                                    setBusinessCustomer(true)\r\n                                                )\r\n                                            }\r\n                                            className=\"checkout__link\"\r\n                                        >\r\n                                            {translate(\r\n                                                'checkout.customerinfo.businesscustomer'\r\n                                            )}\r\n                                        </a>\r\n                                    )}\r\n                                {isBusinessCustomer &&\r\n                                    checkoutMode ===\r\n                                        constants.checkoutMode.both && (\r\n                                        <a\r\n                                            onClick={() =>\r\n                                                dispatch(\r\n                                                    setBusinessCustomer(false)\r\n                                                )\r\n                                            }\r\n                                            className=\"checkout__link\"\r\n                                        >\r\n                                            {translate(\r\n                                                'checkout.customerinfo.privatecustomer'\r\n                                            )}\r\n                                        </a>\r\n                                    )}\r\n                            </Fragment>\r\n                        )}\r\n                    </div>\r\n                    {!isEditingAddress && (\r\n                        <Button\r\n                            onClick={onEditForm}\r\n                            title={translate('checkout.edit')}\r\n                            isLink={true}\r\n                        />\r\n                    )}\r\n                </div>\r\n                {!isBusinessCustomer &&\r\n                    checkoutMode !== constants.checkoutMode.companyCustomers &&\r\n                    privateCustomerInfoComponent()}\r\n                {(isBusinessCustomer ||\r\n                    checkoutMode === constants.checkoutMode.companyCustomers) &&\r\n                    businessCustomerInfoComponent()}\r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"row align-justify\">\r\n                <h3 className=\"checkout__section-title\">\r\n                    {translate('checkout.customerinfo.title')}\r\n                </h3>\r\n                {!isEditingAddress && (\r\n                    <Button onClick={onEditForm} title=\"edit\" isLink={true} />\r\n                )}\r\n            </div>\r\n            {!isBusinessCustomer && privateCustomerInfoComponent()}\r\n            {isBusinessCustomer && businessCustomerInfoComponent()}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default CheckoutCustomerInfo;\r\nexport { validateAlternativeAddress, validateCustomerInfo };\r\n","import React, { Fragment } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setDelivery } from '../Actions/Checkout.action';\r\nimport { translate } from '../Services/translation';\r\n\r\nconst CheckoutDeliveryMethods = ({ errors }) => {\r\n    const dispatch = useDispatch();\r\n    const { deliveryMethods, selectedDeliveryMethod } = useSelector(\r\n        (state) => state.checkout.payload\r\n    );\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"row\">\r\n                <h3 className=\"checkout__section-title\">\r\n                    {translate('checkout.delivery.title')}\r\n                </h3>\r\n            </div>\r\n            {deliveryMethods && deliveryMethods.length > 0 && (\r\n                <section className=\"row checkout-info__container\">\r\n                    <div className=\"columns small-12\">\r\n                        {deliveryMethods.map((method) => (\r\n                            <label className=\"row no-margin\" key={method.id}>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    name=\"deliveryMethods\"\r\n                                    className=\"checkout-info__checkbox-radio\"\r\n                                    value={method.id}\r\n                                    checked={\r\n                                        method.id === selectedDeliveryMethod?.id\r\n                                    }\r\n                                    onChange={() =>\r\n                                        dispatch(setDelivery(method))\r\n                                    }\r\n                                />\r\n                                <span className=\"columns\">\r\n                                    <b> {method.name} </b> -{' '}\r\n                                    {method.formattedPrice}\r\n                                </span>\r\n                            </label>\r\n                        ))}\r\n                    </div>\r\n                </section>\r\n            )}\r\n            <div className=\"row\">\r\n                {errors['selectedDeliveryMethod'] && (\r\n                    <span className=\"form__validator--error form__validator--top-narrow\">\r\n                        {errors['selectedDeliveryMethod'][0]}\r\n                    </span>\r\n                )}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default CheckoutDeliveryMethods;\r\n","import React, { Fragment, useEffect, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { translate } from '../Services/translation';\r\nimport {\r\n    setDiscountCode,\r\n    submitDiscountCode,\r\n    deleteDiscountCode,\r\n} from '../Actions/Checkout.action';\r\n\r\nconst CheckoutPaymentMethods = () => {\r\n    const dispatch = useDispatch();\r\n    const { payload, errors = {} } = useSelector((state) => state.checkout);\r\n    const { usedDiscountCodes } = payload;\r\n    const discountCodeEl = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (errors && !errors['discountCode']?.length) {\r\n            discountCodeEl.current.value = '';\r\n        }\r\n    }, [errors]);\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"row\">\r\n                <h3 className=\"checkout__section-title\">\r\n                    {translate('checkout.discountcode')}\r\n                </h3>\r\n            </div>\r\n            <section className=\"row checkout-info__container\">\r\n                <div className=\"columns small-12\">\r\n                    <div className=\"row no-margin\">\r\n                        <div className=\"small-6 medium-4\">\r\n                            <input\r\n                                ref={discountCodeEl}\r\n                                className=\"form__input\"\r\n                                id=\"campaign-code\"\r\n                                placeholder={translate('checkout.discountcode')}\r\n                                onChange={(event) =>\r\n                                    dispatch(\r\n                                        setDiscountCode(event.target.value)\r\n                                    )\r\n                                }\r\n                            />\r\n                            {errors && errors['discountCode'] && (\r\n                                <span\r\n                                    className=\"form__validator--error form__validator--top-narrow\"\r\n                                    data-error-for=\"campaign-code\"\r\n                                >\r\n                                    {errors['discountCode'][0]}\r\n                                </span>\r\n                            )}\r\n                        </div>\r\n                        <div className=\"small-5 medium-4 columns\">\r\n                            <button\r\n                                className=\"checkout-info__campaign-button\"\r\n                                onClick={() => dispatch(submitDiscountCode())}\r\n                            >\r\n                                {translate('checkout.usediscountcode')}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row no-margin\">\r\n                        <div className=\"chip__container\">\r\n                            {usedDiscountCodes &&\r\n                                usedDiscountCodes.map((discountCode) => (\r\n                                    <div className=\"chip\" key={discountCode}>\r\n                                        <span className=\"chip__label checkout-discount-codes\">\r\n                                            {discountCode}\r\n                                        </span>\r\n                                        <i className=\"chip__icon chip__icon--check\"></i>\r\n                                        <i\r\n                                            className=\"chip__icon chip__icon--delete\"\r\n                                            onClick={() =>\r\n                                                dispatch(\r\n                                                    deleteDiscountCode(\r\n                                                        discountCode\r\n                                                    )\r\n                                                )\r\n                                            }\r\n                                            title={translate('general.remove')}\r\n                                        ></i>\r\n                                    </div>\r\n                                ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default CheckoutPaymentMethods;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { translate } from '../Services/translation';\r\n\r\nconst CheckoutOrderInfo = () => {\r\n    const cart = useSelector((state) => state.cart);\r\n\r\n    return (\r\n        <div className=\"columns small-12 medium-6 checkout-info__summary--full-row\">\r\n            <div>\r\n                {translate('checkout.order.productstotal')}{' '}\r\n                <span className=\"checkout-info__summary--expand\"></span>{' '}\r\n                {cart.orderTotal}\r\n            </div>\r\n            <div>\r\n                {translate('checkout.order.discount')}{' '}\r\n                <span className=\"checkout-info__summary--expand\"></span>{' '}\r\n                {cart.discount}\r\n            </div>\r\n            <div>\r\n                {translate('checkout.order.deliverycost')}{' '}\r\n                <span className=\"checkout-info__summary--expand\"></span>{' '}\r\n                {cart.deliveryCost}\r\n            </div>\r\n            <div>\r\n                {translate('checkout.order.paymentcost')}{' '}\r\n                <span className=\"checkout-info__summary--expand\"></span>{' '}\r\n                {cart.paymentCost}\r\n            </div>\r\n            <h3>\r\n                {translate('checkout.order.grandTotal')}{' '}\r\n                <span className=\"checkout-info__summary--expand\"></span>{' '}\r\n                {cart.grandTotal}\r\n            </h3>\r\n            <div>\r\n                {translate('checkout.order.vat')}{' '}\r\n                <span className=\"checkout-info__summary--expand\"></span>{' '}\r\n                {cart.vat}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CheckoutOrderInfo;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { translate } from '../Services/translation';\r\nimport { setOrderNote } from '../Actions/Checkout.action';\r\n\r\nconst CheckoutOrderNote = () => {\r\n    const dispatch = useDispatch();\r\n    const orderNote = useSelector((state) => state.checkout.payload.orderNote);\r\n\r\n    return (\r\n        <div className=\"columns small-12 medium-6 checkout-info__summary--full-height\">\r\n            {translate('checkout.order.message')}\r\n            <textarea\r\n                className=\"form__input checkout-info__messages\"\r\n                value={orderNote}\r\n                onChange={(event) => dispatch(setOrderNote(event.target.value))}\r\n            ></textarea>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CheckoutOrderNote;\r\n","import React, { Fragment } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setPayment } from '../Actions/Checkout.action';\r\nimport { translate } from '../Services/translation';\r\n\r\nconst CheckoutPaymentMethods = ({ errors }) => {\r\n    const dispatch = useDispatch();\r\n    const { payload } = useSelector((state) => state.checkout);\r\n    const { paymentMethods, selectedPaymentMethod } = payload;\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"row\">\r\n                <h3 className=\"checkout__section-title\">\r\n                    {translate('checkout.payment.title')}\r\n                </h3>\r\n            </div>\r\n            {paymentMethods && paymentMethods.length > 0 && (\r\n                <section className=\"row checkout-info__container\">\r\n                    <div className=\"columns small-12\">\r\n                        {paymentMethods.map((method) => (\r\n                            <label className=\"row no-margin\" key={method.id}>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    name=\"paymentMethods\"\r\n                                    className=\"checkout-info__checkbox-radio\"\r\n                                    value={method.id}\r\n                                    checked={\r\n                                        method.id === selectedPaymentMethod.id\r\n                                    }\r\n                                    onChange={() =>\r\n                                        dispatch(setPayment(method))\r\n                                    }\r\n                                />\r\n                                <span className=\"columns\">\r\n                                    <b> {method.name} </b> -{' '}\r\n                                    {method.formattedPrice}\r\n                                </span>\r\n                            </label>\r\n                        ))}\r\n                    </div>\r\n                </section>\r\n            )}\r\n            <div className=\"row\">\r\n                {errors['selectedPaymentMethod'] && (\r\n                    <span className=\"form__validator--error form__validator--top-narrow\">\r\n                        {errors['selectedPaymentMethod'][0]}\r\n                    </span>\r\n                )}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default CheckoutPaymentMethods;\r\n","import React from 'react';\r\nimport DynamicComponent from '../DynamicComponent';\r\nconst scriptPattern = /<script\\b[^>]*>([\\s\\S]*?)<\\/script>/gi;\r\nconst scriptFilePattern = /<script.*?src=[\"'](.*?)[\"']/gi;\r\n\r\nconst extractScripts = (domString) => {\r\n    let matches,\r\n        html = domString;\r\n    const scripts = [],\r\n        scriptFiles = [];\r\n    while ((matches = scriptPattern.exec(domString)) !== null) {\r\n        html = html.replace(matches[0], '');\r\n        matches[1] && matches[1].trim() !== '' && scripts.push(matches[1]);\r\n    }\r\n    while ((matches = scriptFilePattern.exec(domString)) !== null) {\r\n        matches[1] && matches[1].trim() !== '' && scriptFiles.push(matches[1]);\r\n    }\r\n\r\n    return {\r\n        html,\r\n        scripts,\r\n        scriptFiles,\r\n    };\r\n};\r\n\r\nconst executeScript = (domId, scriptContent) => {\r\n    const script = document.createElement('script');\r\n    script.type = 'text/javascript';\r\n    try {\r\n        script.appendChild(document.createTextNode(scriptContent));\r\n    } catch (e) {\r\n        // to support IE\r\n        script.text = scriptContent;\r\n    }\r\n    document.getElementById(domId).appendChild(script);\r\n};\r\n\r\nconst includeScript = (domId, srciptUrl) => {\r\n    const script = document.createElement('script');\r\n    script.type = 'text/javascript';\r\n    script.src = srciptUrl;\r\n    document.getElementById(domId).appendChild(script);\r\n};\r\n\r\nconst PaymentWidget = React.memo(function PaymentWidget({ responseString }) {\r\n    const renderWidget = (paymentSession) => {\r\n        const WidgetCheckout = DynamicComponent({\r\n            loader: () => import('./CheckoutWidget'),\r\n        });\r\n        const args = {\r\n            paymentSession,\r\n            extractScripts,\r\n            executeScript,\r\n            includeScript,\r\n        };\r\n        return <WidgetCheckout {...args} />;\r\n    };\r\n\r\n    return renderWidget(responseString);\r\n});\r\n\r\nexport default PaymentWidget;\r\n","import React, {\r\n    Fragment,\r\n    useCallback,\r\n    useEffect,\r\n    useRef,\r\n    useState,\r\n} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n    acceptTermsOfCondition,\r\n    setDelivery,\r\n    setPayment,\r\n    setStatusSubmitButton,\r\n    submit,\r\n    submitDone,\r\n    submitError,\r\n} from '../Actions/Checkout.action';\r\nimport constants, {\r\n    PaymentIntegrationType,\r\n    ShippingIntegrationType,\r\n} from '../constants';\r\nimport { translate } from '../Services/translation';\r\nimport Button from './Button';\r\nimport CheckoutCart from './Checkout.Cart';\r\nimport CheckoutCustomerInfo, {\r\n    validateAlternativeAddress,\r\n    validateCustomerInfo,\r\n} from './Checkout.CustomerInfo';\r\nimport CheckoutDeliveryMethods from './Checkout.DeliveryMethods';\r\nimport CheckoutDiscountCodes from './Checkout.DiscountCodes';\r\nimport CheckoutOrderInfo from './Checkout.OrderInfo';\r\nimport CheckoutOrderNote from './Checkout.OrderNote';\r\nimport CheckoutPaymentMethods from './Checkout.PaymentMethods';\r\nimport {\r\n    businessCustomerAdditionalDetailsSchema,\r\n    businessCustomerDetailsSchema,\r\n    privateCustomerAdditionalDetailsSchema,\r\n    privateCustomerAddressSchema,\r\n    privateCustomerAlternativeAddressSchema,\r\n} from './Checkout.ValidationSchema';\r\nimport PaymentWidget from './Payments/PaymentWidget';\r\n\r\nconst Checkout = () => {\r\n    const dispatch = useDispatch();\r\n    const cart = useSelector((state) => state.cart);\r\n    const checkout = useSelector((state) => state.checkout);\r\n\r\n    const [shippingOptionVisibility, setShippingOptionVisibility] = useState(\r\n        true\r\n    );\r\n    const [paymentOptionVisibility, setPaymentOptionVisibility] = useState(\r\n        true\r\n    );\r\n    const [customerDetailsVisibility, setCustomerDetailsVisibility] = useState(\r\n        true\r\n    );\r\n    const [deliveryWidgetVisibility, setDeliveryWidgetVisibility] = useState(\r\n        true\r\n    );\r\n    const [paymentWidgetVisibility, setPaymentWidgetVisibility] = useState(\r\n        true\r\n    );\r\n    const [orderSummaryVisibility, setOrderSummaryVisibility] = useState(true);\r\n    const [signUpCheckboxVisibility, setSignUpCheckboxVisibility] = useState(\r\n        true\r\n    );\r\n\r\n    const {\r\n        payload: {\r\n            customerDetails,\r\n            alternativeAddress,\r\n            selectedCompanyAddressId,\r\n            selectedDeliveryMethod,\r\n            selectedPaymentMethod,\r\n            deliveryMethods,\r\n            paymentMethods,\r\n        },\r\n    } = checkout;\r\n    const [isEditingAddress, setIsEditingAddress] = useState(true);\r\n    const [addressFormValue, setAddressFormValue] = useState({\r\n        customerDetails,\r\n        alternativeAddress,\r\n        selectedCompanyAddressId,\r\n    });\r\n    const onSubmit = useCallback(() => dispatch(submit()), [dispatch]);\r\n    const onSubmitError = useCallback(\r\n        (error) => {\r\n            dispatch(submitError(error));\r\n            dispatch(submitDone(null));\r\n        },\r\n        [dispatch]\r\n    );\r\n\r\n    const placeOrder = useCallback(() => {\r\n        const { payload } = checkout,\r\n            {\r\n                isBusinessCustomer,\r\n                selectedCompanyAddressId,\r\n                acceptTermsOfCondition,\r\n                selectedPaymentMethod,\r\n                selectedDeliveryMethod,\r\n            } = payload;\r\n        const notCustomerDetailFields = [\r\n            'selectedCompanyAddressId',\r\n            'selectedPaymentMethod',\r\n            'selectedDeliveryMethod',\r\n            'acceptTermsOfCondition',\r\n        ];\r\n        const onError = (error, addressPath = 'customerDetails') => {\r\n            error.path =\r\n                notCustomerDetailFields.indexOf(error.path) >= 0\r\n                    ? error.path\r\n                    : `${addressPath}-${error.path}`;\r\n            onSubmitError(error);\r\n            dispatch(setStatusSubmitButton(true));\r\n        };\r\n        dispatch(setStatusSubmitButton(false));\r\n        if (isBusinessCustomer) {\r\n            businessCustomerDetailsSchema\r\n                .validate({\r\n                    ...payload.customerDetails,\r\n                    selectedCompanyAddressId,\r\n                })\r\n                .then(() => {\r\n                    businessCustomerAdditionalDetailsSchema\r\n                        .validate({\r\n                            selectedPaymentMethod,\r\n                            selectedDeliveryMethod,\r\n                            acceptTermsOfCondition,\r\n                        })\r\n                        .then(() => {\r\n                            onSubmit();\r\n                        })\r\n                        .catch(onError);\r\n                })\r\n                .catch(onError);\r\n        } else {\r\n            privateCustomerAddressSchema\r\n                .validate({\r\n                    ...payload.customerDetails,\r\n                })\r\n                .then(() => {\r\n                    if (\r\n                        validateAlternativeAddress(payload.alternativeAddress)\r\n                    ) {\r\n                        privateCustomerAlternativeAddressSchema\r\n                            .validate({\r\n                                ...payload.alternativeAddress,\r\n                            })\r\n                            .then(() => {\r\n                                privateCustomerAdditionalDetailsSchema\r\n                                    .validate({\r\n                                        selectedPaymentMethod,\r\n                                        selectedDeliveryMethod,\r\n                                        acceptTermsOfCondition,\r\n                                    })\r\n                                    .then(() => {\r\n                                        onSubmit();\r\n                                    })\r\n                                    .catch(onError);\r\n                            })\r\n                            .catch((error) => {\r\n                                onError(error, 'alternativeAddress');\r\n                            });\r\n                    } else {\r\n                        privateCustomerAdditionalDetailsSchema\r\n                            .validate({\r\n                                selectedPaymentMethod,\r\n                                selectedDeliveryMethod,\r\n                                acceptTermsOfCondition,\r\n                            })\r\n                            .then(() => {\r\n                                onSubmit();\r\n                            })\r\n                            .catch(onError);\r\n                    }\r\n                })\r\n                .catch(onError);\r\n        }\r\n    }, [checkout, dispatch, onSubmit, onSubmitError]);\r\n\r\n    const resetVisibilityValues = useCallback(() => {\r\n        setShippingOptionVisibility(true);\r\n        setPaymentOptionVisibility(true);\r\n        setCustomerDetailsVisibility(true);\r\n        setDeliveryWidgetVisibility(true);\r\n        setPaymentWidgetVisibility(true);\r\n        setOrderSummaryVisibility(true);\r\n        setSignUpCheckboxVisibility(true);\r\n    }, []);\r\n\r\n    const checkIntegrationTypeExist = useCallback(\r\n        (integrationTypeCheck) => {\r\n            return deliveryMethods.find(\r\n                (method) => method.integrationType === integrationTypeCheck\r\n            );\r\n        },\r\n        [deliveryMethods]\r\n    );\r\n\r\n    const firstRender = useRef(true);\r\n\r\n    // Sets default value on first load.\r\n    useEffect(() => {\r\n        if (!firstRender.current) {\r\n            return;\r\n        }\r\n        firstRender.current = false;\r\n\r\n        if (!checkout) {\r\n            return;\r\n        }\r\n\r\n        const {\r\n            selectedPaymentMethod,\r\n            selectedDeliveryMethod,\r\n            customerDetails,\r\n            alternativeAddress,\r\n        } = checkout.payload;\r\n\r\n        // set selected value for payment method on load.\r\n        selectedPaymentMethod && dispatch(setPayment(selectedPaymentMethod));\r\n        // set selected value for delivery method on load.\r\n        selectedDeliveryMethod && dispatch(setDelivery(selectedDeliveryMethod));\r\n        // fill default select value to the state\r\n        setAddressFormValue((previousState) => ({\r\n            ...previousState,\r\n            customerDetails: {\r\n                ...(customerDetails ?? {}),\r\n                country:\r\n                    customerDetails?.country ?? constants.countries[0].value,\r\n            },\r\n            alternativeAddress: {\r\n                ...(alternativeAddress ?? {}),\r\n                country:\r\n                    alternativeAddress?.country ?? constants.countries[0].value,\r\n            },\r\n        }));\r\n    }, [checkout, dispatch]);\r\n\r\n    // Show or hide different sections depending on payment and delivery methods.\r\n    useEffect(() => {\r\n        resetVisibilityValues();\r\n        switch (selectedPaymentMethod?.integrationType) {\r\n            case PaymentIntegrationType.IframeCheckout:\r\n                setCustomerDetailsVisibility(false);\r\n                setOrderSummaryVisibility(false);\r\n                break;\r\n            case PaymentIntegrationType.PaymentWidgets:\r\n                if (isEditingAddress) {\r\n                    setPaymentWidgetVisibility(false);\r\n                }\r\n                setOrderSummaryVisibility(false);\r\n                setSignUpCheckboxVisibility(false);\r\n                break;\r\n            case PaymentIntegrationType.DirectPayment:\r\n                if (isEditingAddress) {\r\n                    setOrderSummaryVisibility(false);\r\n                }\r\n                setPaymentWidgetVisibility(false);\r\n                break;\r\n        }\r\n        if (\r\n            checkIntegrationTypeExist(ShippingIntegrationType.DeliveryCheckout)\r\n        ) {\r\n            return setShippingOptionVisibility(false);\r\n        }\r\n        if (\r\n            checkIntegrationTypeExist(ShippingIntegrationType.PaymentCheckout)\r\n        ) {\r\n            return (\r\n                setShippingOptionVisibility(false) &&\r\n                setDeliveryWidgetVisibility(false)\r\n            );\r\n        }\r\n        if (\r\n            selectedDeliveryMethod?.integrationType ===\r\n            ShippingIntegrationType.Inline\r\n        ) {\r\n            setDeliveryWidgetVisibility(false);\r\n        }\r\n    }, [\r\n        selectedDeliveryMethod,\r\n        selectedPaymentMethod,\r\n        deliveryMethods,\r\n        paymentMethods,\r\n        resetVisibilityValues,\r\n        checkIntegrationTypeExist,\r\n        isEditingAddress,\r\n    ]);\r\n\r\n    // Update place order button's status when the state of Customer Information form is changed.\r\n    useEffect(() => {\r\n        dispatch(setStatusSubmitButton(false));\r\n        if (isEditingAddress) {\r\n            return;\r\n        }\r\n        validateCustomerInfo(\r\n            addressFormValue,\r\n            checkout.payload.isBusinessCustomer\r\n        )\r\n            .then(() => {\r\n                dispatch(setStatusSubmitButton(true));\r\n            })\r\n            .catch(() => {\r\n                dispatch(setStatusSubmitButton(false));\r\n            });\r\n    }, [\r\n        dispatch,\r\n        isEditingAddress,\r\n        addressFormValue,\r\n        checkout.payload.isBusinessCustomer,\r\n    ]);\r\n\r\n    // Scroll the the first field that has validation error when saving the form.\r\n    useEffect(() => {\r\n        if (checkout.result && checkout.result.redirectUrl) {\r\n            window.location = checkout.result.redirectUrl;\r\n            return;\r\n        }\r\n\r\n        if (!checkout.errors) {\r\n            return;\r\n        }\r\n\r\n        const errorKeys = Object.keys(checkout.errors);\r\n        if (!errorKeys || errorKeys.length < 1) {\r\n            return;\r\n        }\r\n\r\n        const errorNode = document.querySelector(\r\n            `[data-error-for=\"${errorKeys[0]}\"]`\r\n        );\r\n        if (!errorNode) {\r\n            return;\r\n        }\r\n\r\n        const inputNode = errorNode.parentElement.querySelector('input');\r\n        if (inputNode) {\r\n            setTimeout(() => inputNode.focus(), 1000);\r\n            inputNode.scrollIntoView({ behavior: 'smooth' });\r\n        } else {\r\n            errorNode.scrollIntoView({ behavior: 'smooth' });\r\n        }\r\n    }, [checkout.result, checkout.errors]);\r\n\r\n    if (!cart || !cart.orderRows || cart.orderRows.length < 1) {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"small-12\">\r\n                    <h2 className=\"checkout__title\">\r\n                        {translate(`checkout.cart.empty`)}\r\n                    </h2>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const { payload, errors = {} } = checkout,\r\n        {\r\n            paymentWidget,\r\n            authenticated,\r\n            isBusinessCustomer,\r\n            checkoutMode,\r\n        } = payload;\r\n    const responseString = paymentWidget ? paymentWidget.responseString : null;\r\n    const updateKey = paymentWidget ? paymentWidget._force_update : null;\r\n    return (\r\n        <Fragment>\r\n            <CheckoutCart errors={errors} />\r\n            <CheckoutDiscountCodes />\r\n\r\n            {shippingOptionVisibility && (\r\n                <CheckoutDeliveryMethods errors={errors} />\r\n            )}\r\n\r\n            {paymentOptionVisibility && (\r\n                <CheckoutPaymentMethods errors={errors} />\r\n            )}\r\n\r\n            {customerDetailsVisibility && (\r\n                <CheckoutCustomerInfo\r\n                    checkout={checkout}\r\n                    addressFormValue={addressFormValue}\r\n                    isEditingAddress={isEditingAddress}\r\n                    setAddressFormValue={setAddressFormValue}\r\n                    setIsEditingAddress={setIsEditingAddress}\r\n                    signUpCheckboxVisibility={signUpCheckboxVisibility}\r\n                />\r\n            )}\r\n\r\n            {paymentWidget && paymentWidgetVisibility && (\r\n                <PaymentWidget\r\n                    key={updateKey}\r\n                    responseString={responseString}\r\n                />\r\n            )}\r\n\r\n            {orderSummaryVisibility && (\r\n                <Fragment>\r\n                    <div className=\"row\">\r\n                        <h3 className=\"checkout__section-title\">\r\n                            {translate('checkout.order.title')}\r\n                        </h3>\r\n                    </div>\r\n\r\n                    <section className=\"row checkout-info__container checkout-info__summary\">\r\n                        <CheckoutOrderNote />\r\n                        <CheckoutOrderInfo />\r\n                    </section>\r\n\r\n                    <div className=\"row\">\r\n                        <input\r\n                            className=\"checkout-info__checkbox-input\"\r\n                            type=\"checkbox\"\r\n                            id=\"acceptTermsOfCondition\"\r\n                            checked={payload.acceptTermsOfCondition}\r\n                            onChange={(event) =>\r\n                                dispatch(\r\n                                    acceptTermsOfCondition(event.target.checked)\r\n                                )\r\n                            }\r\n                        />\r\n                        <label\r\n                            className=\"checkout-info__checkbox-label\"\r\n                            htmlFor=\"acceptTermsOfCondition\"\r\n                        >\r\n                            {translate('checkout.terms.acceptTermsOfCondition')}{' '}\r\n                            <a\r\n                                className=\"checkout__link\"\r\n                                href={payload.termsUrl}\r\n                                target=\"_blank\"\r\n                                rel=\"noreferrer\"\r\n                            >\r\n                                {translate('checkout.terms.link')}\r\n                            </a>\r\n                        </label>\r\n                        {errors['acceptTermsOfCondition'] && (\r\n                            <span\r\n                                className=\"form__validator--error form__validator--top-narrow\"\r\n                                data-error-for=\"acceptTermsOfCondition\"\r\n                            >\r\n                                {errors['acceptTermsOfCondition'][0]}\r\n                            </span>\r\n                        )}\r\n                    </div>\r\n\r\n                    <div className=\"row checkout__submit\">\r\n                        {!authenticated &&\r\n                        (isBusinessCustomer ||\r\n                            checkoutMode ===\r\n                                constants.checkoutMode.companyCustomers) ? (\r\n                            <Button\r\n                                onClick={() =>\r\n                                    (location.href = payload.loginUrl)\r\n                                }\r\n                                title={translate(\r\n                                    'checkout.login.to.placeorder'\r\n                                )}\r\n                                fluid={true}\r\n                            />\r\n                        ) : (\r\n                            <Button\r\n                                disabled={!checkout.enableConfirmButton}\r\n                                onClick={placeOrder}\r\n                                title={translate('checkout.placeorder')}\r\n                                fluid={true}\r\n                                type=\"submit\"\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </Fragment>\r\n            )}\r\n\r\n            <div className=\"row\">\r\n                {errors && errors['general'] && (\r\n                    <p className=\"checkout__validator--error\">\r\n                        {errors['general'][0]}\r\n                    </p>\r\n                )}\r\n                {errors && errors['payment'] && (\r\n                    <p className=\"checkout__validator--error\">\r\n                        {errors['payment'][0]}\r\n                    </p>\r\n                )}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Checkout;\r\n"],"sourceRoot":""}