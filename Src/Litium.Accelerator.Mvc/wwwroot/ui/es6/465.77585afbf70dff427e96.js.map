{"version":3,"sources":["webpack:///./Scripts/Actions/Order.action.js","webpack:///./Scripts/Components/ApproveOrderButton.js","webpack:///./Scripts/Components/OrderHistoryList.js","webpack:///./Scripts/Components/OrderHistoryB2BDetail.js","webpack:///./Scripts/Components/OrderHistoryB2CDetail.js","webpack:///./Scripts/Components/Pagination.js","webpack:///./Scripts/Services/Pagination.service.js","webpack:///./Scripts/Components/OrderHistoryListContainer.js","webpack:///./Scripts/Components/ReorderButton.js","webpack:///./Scripts/Components/withReactiveStyleBuyButton.js","webpack:///./Scripts/Services/Cart.service.js"],"names":["changeMode","mode","type","ORDER_CHANGE_MODE","payload","query","pageIndex","showOnlyMyOrders","pageSize","PaginationOptions","orderId","showOrderDetail","dispatch","get","then","response","json","result","receive","orders","totalCount","ViewMode","order","find","setOrder","catch","ex","catchError","error","setError","list","currentPage","ORDER_RECEIVE","ORDER_ERROR","ORDER_SET_ORDER","ApproveOrderButton","label","title","cssClass","onClick","callback","className","props","useDispatch","Button","withReactiveStyleBuyButton","post","id","approveOrder","onShowDetail","onApproveOrderCallback","isBusinessCustomer","hasApproverRole","useSelector","state","myPage","length","translate","map","key","orderDate","orderRows","brand","name","replace","orderGrandTotal","status","isWaitingApprove","ReorderButton","onDismiss","showArroveOrderButton","setShowArroveOrderButton","useState","useEffect","approveOrderCallback","useCallback","target","rel","href","externalOrderID","formattedActualDeliveryDate","customerInfo","address1","zip","city","country","merchantOrganizationNumber","firstName","lastName","row","index","link","quantityString","isFreeGift","priceInfo","formattedCampaignPrice","formattedPrice","totalPrice","discountRows","paymentMethod","orderTotalFee","deliveryMethod","orderTotalDeliveryCost","orderTotalDiscountAmount","orderTotalVat","deliveries","delivery","address","PaginationItem","current","disabled","onChange","trim","RenderFirstHalfItems","intervalStart","edgeEntries","currentPageIndex","renderItems","end","Math","min","i","publicPageIndex","push","RenderMiddleItems","intervalEnd","RenderSecondHalfItems","pageCount","max","model","Fragment","getInterval","displayedEntries","internalPageIndex","half","parseInt","ceil","parseFloat","upperLimit","errors","currentShowMyOrder","setCurrentShowMyOrder","pager","setPager","options","interval","calculatePager","showDetail","showList","changeShowMyOrder","checked","changePageIndex","ORDER_CHANGE_CURRENTPAGE","changeCurrentPage","isEmpty","Object","keys","defaultChecked","e","htmlFor","async","cart","reorderService","loadError","StateStyles","WrappedComponent","stylePrefix","stateClass","setStateClass","startTime","useRef","changeState","complete","autoReset","setTimeout","resetTimeout","onButtonClick","params","Date","now","loadingDuration","minimumLoadingTime","onComplete","add","articleNumber","quantity","isNaN","reorder"],"mappings":"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","file":"465.77585afbf70dff427e96.js","sourcesContent":["import { ViewMode, PaginationOptions } from '../constants';\r\nimport { get, post } from '../Services/http';\r\nimport { catchError } from './Error.action';\r\n\r\nimport {\r\n    ORDER_RECEIVE,\r\n    ORDER_ERROR,\r\n    ORDER_CHANGE_MODE,\r\n    ORDER_CHANGE_CURRENTPAGE,\r\n    ORDER_SET_ORDER,\r\n} from '../constants';\r\n\r\nconst rootRoute = '/api/order';\r\n\r\nexport const changeMode = (mode) => ({\r\n    type: ORDER_CHANGE_MODE,\r\n    payload: {\r\n        mode,\r\n    },\r\n});\r\n\r\nexport const query = (\r\n    pageIndex = 1,\r\n    showOnlyMyOrders = false,\r\n    pageSize = PaginationOptions.PageSize,\r\n    orderId = null,\r\n    showOrderDetail = false\r\n) => (dispatch) => {\r\n    return get(\r\n        `${rootRoute}?pageIndex=${pageIndex}&showMyOrders=${showOnlyMyOrders}&pageSize=${pageSize}`\r\n    )\r\n        .then((response) => response.json())\r\n        .then((result) => {\r\n            dispatch(\r\n                receive(\r\n                    result.orders,\r\n                    result.totalCount,\r\n                    pageIndex,\r\n                    showOnlyMyOrders,\r\n                    showOrderDetail ? ViewMode.Detail : ViewMode.List\r\n                )\r\n            );\r\n            if (orderId && showOrderDetail) {\r\n                const order = result.orders.find(\r\n                    (order) => order.orderId === orderId\r\n                );\r\n                dispatch(setOrder(order || {}));\r\n            }\r\n        })\r\n        .catch((ex) => dispatch(catchError(ex, (error) => setError(error))));\r\n};\r\n\r\nexport const approveOrder = (orderId, callback) => (dispatch) => {\r\n    return post(`${rootRoute}/approveOrder`, {\r\n        id: orderId,\r\n    })\r\n        .then((response) => response.json())\r\n        .then((result) => {\r\n            callback && callback(result);\r\n        })\r\n        .catch((ex) => dispatch(catchError(ex, (error) => setError(error))));\r\n};\r\n\r\nexport const getOrder = (orderId) => (dispatch) => {\r\n    return get(`${rootRoute}/${orderId}`)\r\n        .then((response) => response.json())\r\n        .then((result) => {\r\n            dispatch(setOrder(result));\r\n        })\r\n        .catch((ex) => dispatch(catchError(ex, (error) => setError(error))));\r\n};\r\n\r\nconst receive = (\r\n    list,\r\n    totalCount,\r\n    currentPage,\r\n    showOnlyMyOrders,\r\n    mode = ViewMode.List\r\n) => ({\r\n    type: ORDER_RECEIVE,\r\n    payload: {\r\n        list,\r\n        mode,\r\n        totalCount,\r\n        currentPage,\r\n        showOnlyMyOrders,\r\n    },\r\n});\r\n\r\nexport const changeCurrentPage = (currentPage) => ({\r\n    type: ORDER_CHANGE_CURRENTPAGE,\r\n    payload: {\r\n        currentPage,\r\n    },\r\n});\r\n\r\nexport const setError = (error) => ({\r\n    type: ORDER_ERROR,\r\n    payload: {\r\n        error,\r\n    },\r\n});\r\n\r\nexport const setOrder = (order) => ({\r\n    type: ORDER_SET_ORDER,\r\n    payload: {\r\n        order,\r\n    },\r\n});\r\n","import React, { useCallback } from 'react';\r\nimport { approveOrder } from '../Actions/Order.action';\r\nimport withReactiveStyleBuyButton from './withReactiveStyleBuyButton';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst ApproveOrderButton = ({\r\n    label,\r\n    title,\r\n    cssClass,\r\n    orderId,\r\n    onClick,\r\n    callback,\r\n}) => {\r\n    return (\r\n        <button\r\n            onClick={() => onClick({ orderId, callback })}\r\n            className={cssClass}\r\n            title={title || label}\r\n        >\r\n            {label}\r\n        </button>\r\n    );\r\n};\r\n\r\nconst StyledButton = (props) => {\r\n    const dispatch = useDispatch();\r\n    const onClick = ({ orderId, callback }) => {\r\n        try {\r\n            dispatch(approveOrder(orderId, callback));\r\n            return true;\r\n        } catch (ex) {\r\n            return false;\r\n        }\r\n    };\r\n    const Button = withReactiveStyleBuyButton(\r\n        ApproveOrderButton,\r\n        onClick,\r\n        'buy-button'\r\n    );\r\n    return <Button {...props} />;\r\n};\r\n\r\nexport default StyledButton;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { translate } from '../Services/translation';\r\nimport ReorderButton from './ReorderButton';\r\nimport ApproveOrderButton from './ApproveOrderButton';\r\n\r\nconst OrderHistoryList = ({\r\n    onShowDetail,\r\n    onApproveOrderCallback,\r\n    isBusinessCustomer,\r\n    hasApproverRole,\r\n}) => {\r\n    const orders = useSelector((state) => state.myPage.orders.list);\r\n\r\n    return (\r\n        <div className=\"order-history__list\">\r\n            {orders?.length > 0 && (\r\n                <div className=\"simple-table\">\r\n                    <div className=\"row medium-unstack no-margin simple-table__header hide-for-small-only\">\r\n                        <div className=\"columns medium-2\">\r\n                            {translate('orderlist.column.orderdate')}\r\n                        </div>\r\n                        <div className=\"columns medium-6\">\r\n                            {translate('orderlist.column.content')}\r\n                        </div>\r\n                        <div className=\"columns medium-2\">\r\n                            {translate('orderlist.column.grandtotal')}\r\n                        </div>\r\n                        <div className=\"columns medium-2\">\r\n                            {translate('orderlist.column.status')}\r\n                        </div>\r\n                        {isBusinessCustomer && (\r\n                            <div className=\"columns medium-2 hide-for-small-only\"></div>\r\n                        )}\r\n                    </div>\r\n                    {orders &&\r\n                        orders.map((order) => (\r\n                            <div\r\n                                key={order.orderId}\r\n                                className=\"row medium-unstack no-margin\"\r\n                            >\r\n                                <div className=\"columns medium-2\">\r\n                                    {order.orderDate}\r\n                                </div>\r\n                                <div className=\"columns medium-6\">\r\n                                    <a\r\n                                        onClick={() => onShowDetail(order)}\r\n                                        className=\"order-detail__product-link\"\r\n                                    >\r\n                                        {order.orderRows[0]?.brand}\r\n                                        <b>{order.orderRows[0]?.name}</b>&nbsp;\r\n                                        {order.orderRows.length > 1 &&\r\n                                            translate(\r\n                                                order.orderRows.length > 2\r\n                                                    ? 'orderlist.items'\r\n                                                    : 'orderlist.item'\r\n                                            ).replace(\r\n                                                '{0}',\r\n                                                order.orderRows.length - 1\r\n                                            )}\r\n                                    </a>\r\n                                </div>\r\n                                <div className=\"columns medium-2\">\r\n                                    {order.orderGrandTotal}\r\n                                </div>\r\n                                <div className=\"columns medium-2\">\r\n                                    {order.status}\r\n                                </div>\r\n                                {isBusinessCustomer && (\r\n                                    <div className=\"columns medium-2\">\r\n                                        {hasApproverRole &&\r\n                                            order.isWaitingApprove && (\r\n                                                <ApproveOrderButton\r\n                                                    title={translate(\r\n                                                        'approve.label'\r\n                                                    )}\r\n                                                    cssClass=\"table__icon table__icon--accept\"\r\n                                                    orderId={order.orderId}\r\n                                                    callback={\r\n                                                        onApproveOrderCallback\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        <ReorderButton\r\n                                            title={translate('general.reorder')}\r\n                                            cssClass=\"table__icon table__icon--reorder\"\r\n                                            orderId={order.orderId}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        ))}\r\n                </div>\r\n            )}\r\n            {orders?.length <= 0 && (\r\n                <div>{translate('orderlist.noorderfound')}</div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OrderHistoryList;\r\n","import React, { useState, useCallback, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { translate } from '../Services/translation';\r\nimport ReorderButton from './ReorderButton';\r\nimport ApproveOrderButton from './ApproveOrderButton';\r\n\r\nconst OrderHistoryB2BDetail = ({\r\n    onDismiss,\r\n    onApproveOrderCallback,\r\n    hasApproverRole,\r\n}) => {\r\n    const { order } = useSelector((state) => state.myPage.orders);\r\n    const [showArroveOrderButton, setShowArroveOrderButton] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setShowArroveOrderButton(hasApproverRole && order?.isWaitingApprove);\r\n    }, [hasApproverRole, order?.isWaitingApprove]);\r\n\r\n    const approveOrderCallback = useCallback(() => {\r\n        onApproveOrderCallback && onApproveOrderCallback(order?.orderId, true);\r\n    }, [onApproveOrderCallback, order?.orderId]);\r\n\r\n    return (\r\n        <div className=\"row order-detail__container\">\r\n            <div className=\"columns\">\r\n                <div className=\"row-inner order-detail__button-container\">\r\n                    <div className=\"small-6\">\r\n                        <a\r\n                            className=\"order-detail__button\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer\"\r\n                            href={`my-pages/order?id=${order?.orderId}&print=true`}\r\n                        >\r\n                            {translate('general.print')}\r\n                        </a>\r\n                        {showArroveOrderButton && (\r\n                            <ApproveOrderButton\r\n                                label={translate('approve.label')}\r\n                                cssClass=\"order-detail__button\"\r\n                                orderId={order?.orderId}\r\n                                callback={approveOrderCallback}\r\n                            />\r\n                        )}\r\n                        <ReorderButton\r\n                            label={translate('general.reorder')}\r\n                            cssClass=\"order-detail__button\"\r\n                            orderId={order?.orderId}\r\n                        />\r\n                    </div>\r\n                    <div className=\"small-6 text--right\">\r\n                        <a className=\"order-detail__button\" onClick={onDismiss}>\r\n                            {translate('orderdetail.backtoorderlist')}\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row-inner\">\r\n                    <div className=\"medium-12 large-6\">\r\n                        <h3>\r\n                            {translate('orderdetail.ordernumber')}:{' '}\r\n                            {order?.externalOrderID}\r\n                        </h3>\r\n                    </div>\r\n                    <div className=\"medium-12 large-6 text--right text__mobile--left\">\r\n                        <p>\r\n                            <span>\r\n                                {translate('orderdetail.orderdate')}:{' '}\r\n                                {order?.orderDate}\r\n                            </span>\r\n                            <br />\r\n                            <span>\r\n                                {translate('orderdetail.orderstatus')}:{' '}\r\n                                <strong>{order?.status}</strong>\r\n                            </span>\r\n                            <br />\r\n                            {order?.formattedActualDeliveryDate && (\r\n                                <span>\r\n                                    {translate('orderdetail.deliverydate')}:{' '}\r\n                                    <strong>\r\n                                        {order?.formattedActualDeliveryDate}\r\n                                    </strong>\r\n                                </span>\r\n                            )}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row-inner\">\r\n                    <div className=\"small-12\">\r\n                        <div className=\"row medium-unstack no-margin\">\r\n                            <div className=\"medium-12\">\r\n                                {translate('orderdetail.information')}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row no-margin\">\r\n                            <div className=\"medium-12\">\r\n                                <p>\r\n                                    {order?.customerInfo?.address1}\r\n                                    <br />\r\n                                    {order?.customerInfo?.zip}{' '}\r\n                                    {order?.customerInfo?.city} <br />\r\n                                    {order?.customerInfo?.country}\r\n                                </p>\r\n                                <p>\r\n                                    {translate(\r\n                                        'orderdetail.organizationnumber'\r\n                                    )}\r\n                                    : {order?.merchantOrganizationNumber}\r\n                                    <br />\r\n                                    {translate(\r\n                                        'orderdetail.orderreference'\r\n                                    )}: {order?.customerInfo?.firstName}{' '}\r\n                                    {order?.customerInfo?.lastName}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row-inner order-table\">\r\n                    <div className=\"row medium-unstack no-margin order-table__header hide-for-small-only\">\r\n                        <div className=\"columns medium-5\">\r\n                            {translate('orderdetail.column.products')}\r\n                        </div>\r\n                        <div className=\"columns medium-1\">\r\n                            {translate('orderdetail.column.quantity')}\r\n                        </div>\r\n                        <div className=\"columns medium-4\">\r\n                            {translate('orderdetail.column.price')}\r\n                        </div>\r\n                        <div className=\"columns medium-2 text--right\">\r\n                            {translate('orderdetail.column.total')}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"order-table__body\">\r\n                        {order?.orderRows?.map((row, index) => (\r\n                            <div\r\n                                key={index}\r\n                                className=\"row medium-unstack no-margin order-detail__summary-items\"\r\n                            >\r\n                                <div className=\"columns medium-5\">\r\n                                    <a\r\n                                        href={row.link?.href}\r\n                                        target=\"_parent\"\r\n                                        className=\"order-detail__product-link\"\r\n                                    >\r\n                                        {row.brand} <strong>{row.name}</strong>\r\n                                    </a>\r\n                                </div>\r\n                                <div className=\"columns medium-1\">\r\n                                    {row.quantityString}\r\n                                </div>\r\n                                <div className=\"columns medium-4\">\r\n                                    {row.isFreeGift &&\r\n                                    row.priceInfo?.formattedCampaignPrice ? (\r\n                                        <span>\r\n                                            {\r\n                                                row.priceInfo\r\n                                                    ?.formattedCampaignPrice\r\n                                            }\r\n                                        </span>\r\n                                    ) : (\r\n                                        <span>\r\n                                            {row.priceInfo?.formattedPrice}\r\n                                        </span>\r\n                                    )}\r\n                                </div>\r\n                                <div className=\"columns medium-2 text--right\">\r\n                                    {row.totalPrice}\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                        {order?.discountRows?.map((row, index) => (\r\n                            <div\r\n                                key={index}\r\n                                className=\"row medium-unstack no-margin order-detail__summary-items\"\r\n                            >\r\n                                <div className=\"columns medium-5\">\r\n                                    {row.name}\r\n                                </div>\r\n                                <div className=\"columns medium-7 text--right\">\r\n                                    {row.totalPrice}\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                        <div className=\"row medium-unstack no-margin order-detail__summary-method\">\r\n                            <div className=\"columns medium-9\">\r\n                                {translate('orderdetail.paymentmethod')} -\r\n                                {order?.paymentMethod}\r\n                            </div>\r\n                            <div className=\"columns medium-3 text--right\">\r\n                                {order?.orderTotalFee}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row medium-unstack no-margin order-detail__summary-method\">\r\n                            <div className=\"columns medium-9\">\r\n                                {translate('orderdetail.deliverymethod')} -{' '}\r\n                                {order?.deliveryMethod}\r\n                            </div>\r\n                            <div className=\"columns medium-3 text--right\">\r\n                                {order?.orderTotalDeliveryCost}\r\n                            </div>\r\n                        </div>\r\n                        {order?.orderTotalDiscountAmount && (\r\n                            <div className=\"row medium-unstack no-margin order-detail__summary-method\">\r\n                                <div className=\"columns medium-9\">\r\n                                    {translate('orderdetail.discount')}\r\n                                </div>\r\n                                <div className=\"columns medium-3 text--right\">\r\n                                    {order?.orderTotalDiscountAmount}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                        <div className=\"row medium-unstack no-margin order-table__space-delimiter\"></div>\r\n                        <div className=\"row medium-unstack no-margin\">\r\n                            <div className=\"columns small-12 text--right\">\r\n                                {translate('orderdetail.grandtotal')}:{' '}\r\n                                <strong>{order?.orderGrandTotal}</strong>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row medium-unstack no-margin\">\r\n                            <div className=\"columns small-12 text--right\">\r\n                                {translate('orderdetail.ordertotalvat')}:{' '}\r\n                                {order?.orderTotalVat}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OrderHistoryB2BDetail;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { translate } from '../Services/translation';\r\n\r\nconst OrderHistoryB2CDetail = ({ onDismiss }) => {\r\n    const { order } = useSelector((state) => state.myPage.orders);\r\n\r\n    return (\r\n        <div className=\"row order-detail__container\">\r\n            <div className=\"columns\">\r\n                <div className=\"row-inner order-detail__button-container\">\r\n                    <div className=\"small-4\">\r\n                        <a\r\n                            className=\"order-detail__button\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer\"\r\n                            href={`my-pages/order?id=${order?.orderId}&print=true`}\r\n                        >\r\n                            {translate('general.print')}\r\n                        </a>\r\n                    </div>\r\n                    <div className=\"small-8 text--right\">\r\n                        <a className=\"order-detail__button\" onClick={onDismiss}>\r\n                            {translate('orderdetail.backtoorderlist')}\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row-inner\">\r\n                    <div className=\"medium-12 large-6\">\r\n                        <h3>\r\n                            {translate('orderdetail.ordernumber')}:{' '}\r\n                            {order?.externalOrderID}\r\n                        </h3>\r\n                    </div>\r\n                    <div className=\"medium-12 large-6 text--right text__mobile--left\">\r\n                        <p>\r\n                            {translate('orderdetail.orderdate')}:{' '}\r\n                            {order?.orderDate} <br />\r\n                            {translate('orderdetail.orderstatus')}:{' '}\r\n                            <strong> {order?.status}</strong>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n\r\n                {order?.formattedActualDeliveryDate && (\r\n                    <div className=\"row-inner\">\r\n                        <div className=\"medium-12 large-6 large-offset-6 text--right text__mobile--left\">\r\n                            {translate('orderdetail.deliverydate')}:{' '}\r\n                            <strong>\r\n                                {order?.formattedActualDeliveryDate}\r\n                            </strong>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                <div className=\"row-inner order-table\">\r\n                    <div className=\"small-12\">\r\n                        <div className=\"row medium-unstack no-margin order-table__header\">\r\n                            <div className=\"medium-12 columns\">\r\n                                {translate('orderdetail.information')}\r\n                            </div>\r\n                        </div>\r\n                        {order?.deliveries?.map((delivery, index) => (\r\n                            <div\r\n                                key={index}\r\n                                className=\"row no-margin order-table__body\"\r\n                            >\r\n                                <div className=\"medium-12 columns\">\r\n                                    <p>\r\n                                        {delivery.address.firstName}{' '}\r\n                                        {delivery.address.lastName} <br />\r\n                                        {delivery.address.address1} <br />\r\n                                        {delivery.address.zip}{' '}\r\n                                        {delivery.address.city} <br />\r\n                                        {delivery.address.country}\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row-inner order-table\">\r\n                    <div className=\"row medium-unstack no-margin order-table__header hide-for-small-only\">\r\n                        <div className=\"columns medium-5\">\r\n                            {translate('orderdetail.column.products')}\r\n                        </div>\r\n                        <div className=\"columns medium-2\">\r\n                            {translate('orderdetail.column.quantity')}\r\n                        </div>\r\n                        <div className=\"columns medium-2\">\r\n                            {translate('orderdetail.column.price')}\r\n                        </div>\r\n                        <div className=\"columns medium-3 text--right\">\r\n                            {translate('orderdetail.column.total')}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"order-table__body\">\r\n                        {order?.orderRows?.map((row, index) => (\r\n                            <div\r\n                                key={index}\r\n                                className=\"row medium-unstack no-margin order-detail__summary-items\"\r\n                            >\r\n                                <div className=\"columns medium-5\">\r\n                                    <a\r\n                                        href={row.link?.href}\r\n                                        target=\"_parent\"\r\n                                        className=\"order-detail__product-link\"\r\n                                    >\r\n                                        {row.brand} <strong>{row.name}</strong>\r\n                                    </a>\r\n                                </div>\r\n                                <div className=\"columns medium-2\">\r\n                                    {row.quantityString}\r\n                                </div>\r\n                                <div className=\"columns medium-2\">\r\n                                    {row.isFreeGift &&\r\n                                    row.priceInfo?.formattedCampaignPrice ? (\r\n                                        <span>\r\n                                            {\r\n                                                row.priceInfo\r\n                                                    ?.formattedCampaignPrice\r\n                                            }\r\n                                        </span>\r\n                                    ) : (\r\n                                        <span>\r\n                                            {row.priceInfo?.formattedPrice}\r\n                                        </span>\r\n                                    )}\r\n                                </div>\r\n                                <div className=\"columns medium-3 text--right\">\r\n                                    {row.totalPrice}\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                        {order?.discountRows?.map((row, index) => (\r\n                            <div\r\n                                key={index}\r\n                                className=\"row medium-unstack no-margin order-detail__summary-items\"\r\n                            >\r\n                                <div className=\"columns medium-5\">\r\n                                    {row.name}\r\n                                </div>\r\n                                <div className=\"columns medium-7 text--right\">\r\n                                    {row.totalPrice}\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n\r\n                        <div className=\"row medium-unstack no-margin order-detail__summary-method\">\r\n                            <div className=\"columns medium-9\">\r\n                                {translate('orderdetail.paymentmethod')} -{' '}\r\n                                {order?.paymentMethod}\r\n                            </div>\r\n                            <div className=\"columns medium-3 text--right\">\r\n                                {order?.orderTotalFee}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row medium-unstack no-margin order-detail__summary-method\">\r\n                            <div className=\"columns medium-9\">\r\n                                {translate('orderdetail.deliverymethod')} -{' '}\r\n                                {order?.deliveryMethod}\r\n                            </div>\r\n                            <div className=\"columns medium-3 text--right\">\r\n                                {order?.orderTotalDeliveryCost}\r\n                            </div>\r\n                        </div>\r\n                        {order?.orderTotalDiscountAmount && (\r\n                            <div className=\"row medium-unstack no-margin order-detail__summary-method\">\r\n                                <div className=\"columns medium-9\">\r\n                                    {translate('orderdetail.discount')}\r\n                                </div>\r\n                                <div className=\"columns medium-3 text--right\">\r\n                                    {order?.orderTotalDiscountAmount}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                        <div className=\"row medium-unstack no-margin order-table__space-delimiter\"></div>\r\n                        <div className=\"row medium-unstack no-margin\">\r\n                            <div className=\"columns small-12 text--right\">\r\n                                {translate('orderdetail.grandtotal')}:{' '}\r\n                                <strong>{order?.orderGrandTotal}</strong>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row medium-unstack no-margin\">\r\n                            <div className=\"columns small-12 text--right\">\r\n                                {translate('orderdetail.ordertotalvat')}:{' '}\r\n                                {order?.orderTotalVat}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OrderHistoryB2CDetail;\r\n","import React, { Fragment } from 'react';\r\n\r\nconst PaginationItem = ({\r\n    name = '',\r\n    current = false,\r\n    disabled = false,\r\n    onChange,\r\n}) => {\r\n    const cssClass = `pagination__link \r\n    ${current ? 'pagination__link--current' : ''} \r\n    ${disabled ? 'pagination__link--disabled' : ''}`;\r\n\r\n    return (\r\n        <li className=\"pagination__item\">\r\n            <a className={cssClass.trim()} onClick={() => onChange()}>\r\n                {name}\r\n            </a>\r\n        </li>\r\n    );\r\n};\r\n\r\nconst RenderFirstHalfItems = ({\r\n    intervalStart,\r\n    edgeEntries,\r\n    currentPageIndex,\r\n    onChange,\r\n}) => {\r\n    const renderItems = [];\r\n    const end = Math.min(edgeEntries, intervalStart);\r\n    for (let i = 0; i < end; i++) {\r\n        const publicPageIndex = i + 1;\r\n        renderItems.push(\r\n            <PaginationItem\r\n                key={publicPageIndex}\r\n                name={publicPageIndex}\r\n                current={publicPageIndex === currentPageIndex}\r\n                onChange={() => onChange(publicPageIndex)}\r\n            />\r\n        );\r\n    }\r\n    if (edgeEntries < intervalStart) {\r\n        renderItems.push(\r\n            <PaginationItem key=\"first_indicator\" name=\"...\" disabled={true} />\r\n        );\r\n    }\r\n    return renderItems;\r\n};\r\n\r\nconst RenderMiddleItems = ({\r\n    intervalStart,\r\n    intervalEnd,\r\n    currentPageIndex,\r\n    onChange,\r\n}) => {\r\n    const renderItems = [];\r\n    for (let i = intervalStart; i < intervalEnd; i++) {\r\n        const publicPageIndex = i + 1;\r\n        renderItems.push(\r\n            <PaginationItem\r\n                key={publicPageIndex}\r\n                name={publicPageIndex}\r\n                current={publicPageIndex === currentPageIndex}\r\n                onChange={() => onChange(publicPageIndex)}\r\n            />\r\n        );\r\n    }\r\n    return renderItems;\r\n};\r\n\r\nconst RenderSecondHalfItems = ({\r\n    intervalEnd,\r\n    edgeEntries,\r\n    pageCount,\r\n    currentPageIndex,\r\n    onChange,\r\n}) => {\r\n    const renderItems = [];\r\n    if (pageCount - edgeEntries > intervalEnd) {\r\n        renderItems.push(\r\n            <PaginationItem key=\"second_indicator\" name=\"...\" disabled={true} />\r\n        );\r\n    }\r\n    const begin = Math.max(pageCount - edgeEntries, intervalEnd);\r\n    for (let i = begin; i < pageCount; i++) {\r\n        const publicPageIndex = i + 1;\r\n        renderItems.push(\r\n            <PaginationItem\r\n                key={publicPageIndex}\r\n                name={publicPageIndex}\r\n                current={publicPageIndex === currentPageIndex}\r\n                onChange={() => onChange(publicPageIndex)}\r\n            />\r\n        );\r\n    }\r\n    return renderItems;\r\n};\r\n\r\nconst Pagination = ({ model, onChange }) => {\r\n    const {\r\n        currentPageIndex,\r\n        pageCount,\r\n        intervalStart,\r\n        intervalEnd,\r\n        edgeEntries,\r\n    } = model;\r\n\r\n    return (\r\n        <Fragment>\r\n            {pageCount > 1 && (\r\n                <ul className=\"pagination\">\r\n                    {currentPageIndex > 1 && (\r\n                        <PaginationItem\r\n                            name=\"<<\"\r\n                            current={false}\r\n                            disabled={false}\r\n                            onChange={() => onChange(currentPageIndex - 1)}\r\n                        />\r\n                    )}\r\n                    {intervalStart > 0 && edgeEntries > 0 && (\r\n                        <RenderFirstHalfItems\r\n                            intervalStart={intervalStart}\r\n                            edgeEntries={edgeEntries}\r\n                            currentPageIndex={currentPageIndex}\r\n                            onChange={onChange}\r\n                        />\r\n                    )}\r\n                    <RenderMiddleItems\r\n                        intervalStart={intervalStart}\r\n                        intervalEnd={intervalEnd}\r\n                        currentPageIndex={currentPageIndex}\r\n                        onChange={onChange}\r\n                    />\r\n                    {intervalEnd < pageCount && edgeEntries > 0 && (\r\n                        <RenderSecondHalfItems\r\n                            intervalEnd={intervalEnd}\r\n                            pageCount={pageCount}\r\n                            edgeEntries={edgeEntries}\r\n                            currentPageIndex={currentPageIndex}\r\n                            onChange={onChange}\r\n                        />\r\n                    )}\r\n                    {currentPageIndex < pageCount && (\r\n                        <PaginationItem\r\n                            name=\">>\"\r\n                            current={false}\r\n                            disabled={false}\r\n                            onChange={() => onChange(currentPageIndex + 1)}\r\n                        />\r\n                    )}\r\n                </ul>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Pagination;\r\n","import { PaginationOptions } from '../constants';\r\n\r\nexport const calculatePager = (\r\n    totalCount = 0,\r\n    currentPage = 1,\r\n    options = {}\r\n) => {\r\n    const {\r\n        pageSize = PaginationOptions.PageSize,\r\n        displayedEntries = PaginationOptions.DisplayedEntries,\r\n        edgeEntries = PaginationOptions.EdgeEntries,\r\n    } = options;\r\n\r\n    const pageCount =\r\n        pageSize != 0\r\n            ? parseInt(Math.ceil(parseFloat(totalCount) / pageSize))\r\n            : 0;\r\n    const interval = getInterval(pageCount, currentPage, displayedEntries);\r\n\r\n    return {\r\n        totalCount,\r\n        pageSize,\r\n        currentPageIndex: currentPage,\r\n        pageCount,\r\n        edgeEntries,\r\n        intervalStart: interval[0],\r\n        intervalEnd: interval[1],\r\n    };\r\n};\r\n\r\nconst getInterval = (pageCount, currentPageIndex, displayedEntries) => {\r\n    const internalPageIndex = currentPageIndex - 1;\r\n    const half = parseInt(Math.ceil(parseFloat(displayedEntries / 2)));\r\n    const upperLimit = pageCount - displayedEntries;\r\n    const start =\r\n        internalPageIndex > half\r\n            ? Math.max(Math.min(internalPageIndex - half, upperLimit), 0)\r\n            : 0;\r\n    const end =\r\n        internalPageIndex > half\r\n            ? Math.min(internalPageIndex + half, pageCount)\r\n            : Math.min(displayedEntries, pageCount);\r\n\r\n    return [start, end];\r\n};\r\n","import React, { Fragment, useEffect, useState, useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n    query,\r\n    changeMode,\r\n    changeCurrentPage,\r\n    setOrder,\r\n} from '../Actions/Order.action';\r\nimport OrderHistoryList from './OrderHistoryList';\r\nimport OrderHistoryB2BDetail from './OrderHistoryB2BDetail';\r\nimport OrderHistoryB2CDetail from './OrderHistoryB2CDetail';\r\nimport Pagination from './Pagination';\r\nimport { calculatePager } from '../Services/Pagination.service';\r\nimport { translate } from '../Services/translation';\r\nimport { PaginationOptions, ViewMode } from '../constants';\r\nimport { isEmpty } from 'lodash-es';\r\n\r\nconst OrderListContainer = () => {\r\n    const {\r\n        mode,\r\n        totalCount,\r\n        currentPage,\r\n        showOnlyMyOrders,\r\n        errors,\r\n    } = useSelector((state) => state.myPage.orders);\r\n    const { isBusinessCustomer, hasApproverRole } = useSelector(\r\n        (state) => state.myPage\r\n    );\r\n    const [currentShowMyOrder, setCurrentShowMyOrder] = useState(\r\n        showOnlyMyOrders || false\r\n    );\r\n    const [pager, setPager] = useState({});\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(query(currentPage, currentShowMyOrder));\r\n    }, [dispatch, currentPage, currentShowMyOrder]);\r\n\r\n    useEffect(() => {\r\n        setPager(calculatePager(totalCount, currentPage));\r\n    }, [totalCount, currentPage]);\r\n\r\n    const showDetail = useCallback(\r\n        (order) => {\r\n            dispatch(setOrder(order));\r\n            dispatch(changeMode(ViewMode.Detail));\r\n        },\r\n        [dispatch]\r\n    );\r\n\r\n    const showList = useCallback(() => {\r\n        dispatch(setOrder({}));\r\n        dispatch(changeMode(ViewMode.List));\r\n    }, [dispatch]);\r\n\r\n    const changeShowMyOrder = useCallback((checked) => {\r\n        setCurrentShowMyOrder(checked);\r\n    }, []);\r\n\r\n    const changePageIndex = useCallback(\r\n        (index) => {\r\n            if (index !== currentPage) {\r\n                dispatch(changeCurrentPage(index));\r\n            }\r\n        },\r\n        [currentPage, dispatch]\r\n    );\r\n\r\n    const onApproveOrderCallback = useCallback(\r\n        (orderId, showOrderDetail = false) => {\r\n            dispatch(\r\n                query(\r\n                    currentPage,\r\n                    currentShowMyOrder,\r\n                    PaginationOptions.PageSize,\r\n                    orderId,\r\n                    showOrderDetail\r\n                )\r\n            );\r\n        },\r\n        [currentPage, currentShowMyOrder, dispatch]\r\n    );\r\n\r\n    return (\r\n        <Fragment>\r\n            {errors && !isEmpty(errors) && (\r\n                <Fragment>\r\n                    {Object.keys(errors).map((key, i) => (\r\n                        <div key={i} className=\"form__validator--error\">\r\n                            {translate(errors[key])}\r\n                        </div>\r\n                    ))}\r\n                </Fragment>\r\n            )}\r\n            {mode !== ViewMode.List && (\r\n                <Fragment>\r\n                    {isBusinessCustomer ? (\r\n                        <OrderHistoryB2BDetail\r\n                            hasApproverRole={hasApproverRole}\r\n                            onApproveOrderCallback={onApproveOrderCallback}\r\n                            onDismiss={showList}\r\n                        />\r\n                    ) : (\r\n                        <OrderHistoryB2CDetail onDismiss={showList} />\r\n                    )}\r\n                </Fragment>\r\n            )}\r\n            {mode === ViewMode.List && (\r\n                <Fragment>\r\n                    {isBusinessCustomer && hasApproverRole && (\r\n                        <div className=\"order__checkbox-container\">\r\n                            <a className=\"order__checkbox-input\">\r\n                                <input\r\n                                    className=\"form__radio\"\r\n                                    id=\"showOnlyMyOrders\"\r\n                                    name=\"showOnlyMyOrders\"\r\n                                    type=\"checkbox\"\r\n                                    defaultChecked={currentShowMyOrder}\r\n                                    onChange={(e) =>\r\n                                        changeShowMyOrder(e.target.checked)\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"showOnlyMyOrders\">\r\n                                    {translate('orderlist.showonlymyorders')}\r\n                                </label>\r\n                            </a>\r\n                        </div>\r\n                    )}\r\n                    <OrderHistoryList\r\n                        onShowDetail={showDetail}\r\n                        onApproveOrderCallback={onApproveOrderCallback}\r\n                        isBusinessCustomer={isBusinessCustomer}\r\n                        hasApproverRole={hasApproverRole}\r\n                    />\r\n                    <Pagination model={pager} onChange={changePageIndex} />\r\n                </Fragment>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default OrderListContainer;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { reorder as reorderService } from '../Services/Cart.service';\r\nimport withReactiveStyleBuyButton from './withReactiveStyleBuyButton';\r\nimport { receive, loadError } from '../Actions/Cart.action';\r\nimport { catchError } from '../Actions/Error.action';\r\n\r\nconst ReorderButton = ({ label, title, cssClass, orderId, onClick }) => {\r\n    return (\r\n        <button\r\n            className={cssClass}\r\n            type=\"button\"\r\n            title={title}\r\n            onClick={() => onClick({ orderId })}\r\n        >\r\n            {label}\r\n        </button>\r\n    );\r\n};\r\n\r\nconst StyledButton = (props) => {\r\n    const dispatch = useDispatch();\r\n    const onClick = async ({ orderId }) => {\r\n        try {\r\n            const cart = await reorderService(orderId);\r\n            dispatch(receive(cart));\r\n            return true;\r\n        } catch (ex) {\r\n            dispatch(catchError(ex, (error) => loadError(error)));\r\n            return false;\r\n        }\r\n    };\r\n    const Button = withReactiveStyleBuyButton(\r\n        ReorderButton,\r\n        onClick,\r\n        'buy-button'\r\n    );\r\n    return <Button {...props} />;\r\n};\r\n\r\nexport default StyledButton;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst StateStyles = {\r\n    LOADING: '--loading',\r\n    SUCCESS: '--success',\r\n    ERROR: '--error',\r\n};\r\n\r\n/**\r\n * Represents a HOC which wraps a BuyButton or ReorderButton and applies diffrent styles to it\r\n * depending on its click state.\r\n * @param {*} WrappedComponent The button component.\r\n * @param {*} onClick The async button's onClick event. It should return true if everything is OK, or false if there is any error.\r\n * @param {*} stylePrefix The style prefix to append state's modifiers. For\r\n * example, 'button' will result as 'button--loading'.\r\n *\r\n * Some available props that the HOC component supports:\r\n * autoReset : it is true by default. Not its value, but the behaviour is like that. Unless people set it as false, by default, button is always reset to neutral state after the request is completed.\r\n * resetTimeout: Number milisecond after the complete state, the style of button will be reset. If don't set, it is 2000\r\n * minimumLoadingTime: Mininum milisecond to display the loading state. If don't set, it is 1000\r\n */\r\nexport default function withReactiveStyleBuyButton(\r\n    WrappedComponent,\r\n    onClick,\r\n    stylePrefix\r\n) {\r\n    return (props) => {\r\n        const [stateClass, setStateClass] = useState('');\r\n        const startTime = useRef(0);\r\n\r\n        useEffect(() => {\r\n            return () => {\r\n                setStateClass('');\r\n            };\r\n        }, []);\r\n\r\n        function onNeutralState() {\r\n            setStateClass('');\r\n            startTime.current = 0;\r\n        }\r\n\r\n        function onLoadingState() {\r\n            setStateClass(`${stylePrefix}${StateStyles.LOADING}`);\r\n            startTime.current = Date.now();\r\n        }\r\n\r\n        const changeState = (complete) => {\r\n            setStateClass(\r\n                `${stylePrefix}${\r\n                    complete ? StateStyles.SUCCESS : StateStyles.ERROR\r\n                }`\r\n            );\r\n\r\n            // if `autoReset` is true, which is default, the style will be changed\r\n            // to neutral after a `resetTimeout` amount of time (2 seconds by default).\r\n            props.autoReset !== false &&\r\n                setTimeout(() => {\r\n                    onNeutralState();\r\n                }, props.resetTimeout || 2000);\r\n        };\r\n\r\n        function onComplete(complete) {\r\n            const loadingDuration = Date.now() - startTime.current;\r\n            const minimumLoadingTime = props.minimumLoadingTime || 1000;\r\n            // ensure the loading indicator is displayed at least a `minimumLoadingTime`\r\n            // amount of time before changing it to Success or Error.\r\n            if (loadingDuration >= minimumLoadingTime) {\r\n                changeState(complete);\r\n            } else {\r\n                setTimeout(() => {\r\n                    changeState(complete);\r\n                }, minimumLoadingTime - loadingDuration);\r\n            }\r\n        }\r\n\r\n        async function onButtonClick(params) {\r\n            onLoadingState();\r\n            const data = await onClick(params);\r\n            onComplete(data);\r\n        }\r\n\r\n        return (\r\n            <span className={stateClass}>\r\n                <WrappedComponent\r\n                    onClick={(params) => onButtonClick(params)}\r\n                    {...props}\r\n                />\r\n            </span>\r\n        );\r\n    };\r\n}\r\n","import { post } from './http';\r\n\r\nexport const add = async ({ articleNumber, quantity = 1 }) => {\r\n    if (!quantity || isNaN(quantity) || parseFloat(quantity) <= 0) {\r\n        throw 'Invalid quantity';\r\n    }\r\n\r\n    const response = await post('/api/cart/add', {\r\n        articleNumber,\r\n        quantity: parseFloat(quantity),\r\n    });\r\n    return response.json();\r\n};\r\n\r\nexport const reorder = async (orderId) => {\r\n    const response = await post('/api/cart/reorder', { orderId });\r\n    return response.json();\r\n};\r\n"],"sourceRoot":""}